// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: il/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryStoplossRequest is the request type for the Query/Stoploss gRPC method.
type QueryStoplossRequest struct {
	// account address that owns the stoploss position
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// uniswap pair of the position
	UniswapPair string `protobuf:"bytes,2,opt,name=uniswap_pair,json=uniswapPair,proto3" json:"uniswap_pair,omitempty"`
}

func (m *QueryStoplossRequest) Reset()         { *m = QueryStoplossRequest{} }
func (m *QueryStoplossRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStoplossRequest) ProtoMessage()    {}
func (*QueryStoplossRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5230b1e697a3491, []int{0}
}
func (m *QueryStoplossRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStoplossRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStoplossRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStoplossRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStoplossRequest.Merge(m, src)
}
func (m *QueryStoplossRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStoplossRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStoplossRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStoplossRequest proto.InternalMessageInfo

func (m *QueryStoplossRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryStoplossRequest) GetUniswapPair() string {
	if m != nil {
		return m.UniswapPair
	}
	return ""
}

// QueryStoplossResponse is the response type for the Query/Stoploss gRPC method.
type QueryStoplossResponse struct {
	// stoploss position for the given address and pair.
	Stoploss Stoploss `protobuf:"bytes,1,opt,name=stoploss,proto3" json:"stoploss"`
}

func (m *QueryStoplossResponse) Reset()         { *m = QueryStoplossResponse{} }
func (m *QueryStoplossResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStoplossResponse) ProtoMessage()    {}
func (*QueryStoplossResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5230b1e697a3491, []int{1}
}
func (m *QueryStoplossResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStoplossResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStoplossResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStoplossResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStoplossResponse.Merge(m, src)
}
func (m *QueryStoplossResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStoplossResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStoplossResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStoplossResponse proto.InternalMessageInfo

func (m *QueryStoplossResponse) GetStoploss() Stoploss {
	if m != nil {
		return m.Stoploss
	}
	return Stoploss{}
}

// QueryStoplossPisitionsRequest is the request type for the Query/StoplossPositions gRPC method.
type QueryStoplossPositionsRequest struct {
	// account address that owns the stoploss positions
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// pagination request
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStoplossPositionsRequest) Reset()         { *m = QueryStoplossPositionsRequest{} }
func (m *QueryStoplossPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStoplossPositionsRequest) ProtoMessage()    {}
func (*QueryStoplossPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5230b1e697a3491, []int{2}
}
func (m *QueryStoplossPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStoplossPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStoplossPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStoplossPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStoplossPositionsRequest.Merge(m, src)
}
func (m *QueryStoplossPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStoplossPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStoplossPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStoplossPositionsRequest proto.InternalMessageInfo

func (m *QueryStoplossPositionsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryStoplossPositionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryStoplossPositionsResponse is the response type for the Query/StoplossPositions gRPC method.
type QueryStoplossPositionsResponse struct {
	// set of possitions owned by the given address
	StoplossPositions []Stoploss `protobuf:"bytes,1,rep,name=stoploss_positions,json=stoplossPositions,proto3" json:"stoploss_positions"`
	// pagination response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStoplossPositionsResponse) Reset()         { *m = QueryStoplossPositionsResponse{} }
func (m *QueryStoplossPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStoplossPositionsResponse) ProtoMessage()    {}
func (*QueryStoplossPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5230b1e697a3491, []int{3}
}
func (m *QueryStoplossPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStoplossPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStoplossPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStoplossPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStoplossPositionsResponse.Merge(m, src)
}
func (m *QueryStoplossPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStoplossPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStoplossPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStoplossPositionsResponse proto.InternalMessageInfo

func (m *QueryStoplossPositionsResponse) GetStoplossPositions() []Stoploss {
	if m != nil {
		return m.StoplossPositions
	}
	return nil
}

func (m *QueryStoplossPositionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParamsRequest is the request type for the Query/Params gRPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5230b1e697a3491, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params gRPC method.
type QueryParamsResponse struct {
	// impermanent loss parameters
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5230b1e697a3491, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryStoplossRequest)(nil), "il.v1.QueryStoplossRequest")
	proto.RegisterType((*QueryStoplossResponse)(nil), "il.v1.QueryStoplossResponse")
	proto.RegisterType((*QueryStoplossPositionsRequest)(nil), "il.v1.QueryStoplossPositionsRequest")
	proto.RegisterType((*QueryStoplossPositionsResponse)(nil), "il.v1.QueryStoplossPositionsResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "il.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "il.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("il/v1/query.proto", fileDescriptor_b5230b1e697a3491) }

var fileDescriptor_b5230b1e697a3491 = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0x33, 0xd1, 0xc6, 0xfa, 0xc6, 0x5a, 0x32, 0xa6, 0x10, 0xd7, 0xba, 0xd6, 0xd5, 0x5a,
	0xb1, 0xb0, 0x43, 0xa2, 0x27, 0x6f, 0x06, 0x51, 0xf0, 0x14, 0x53, 0xf0, 0xe0, 0xa5, 0x4c, 0xda,
	0x61, 0x1c, 0xd9, 0xdd, 0x99, 0xee, 0x6c, 0xa2, 0xa1, 0xf4, 0x50, 0xef, 0x82, 0xe0, 0x07, 0xf1,
	0x6b, 0xf4, 0x58, 0xf0, 0xe2, 0x49, 0x24, 0xf1, 0x1b, 0xf8, 0x05, 0x24, 0x33, 0xb3, 0x9a, 0xa4,
	0x5b, 0xd2, 0x5b, 0xf6, 0x7d, 0x9f, 0x79, 0xde, 0xdf, 0xfb, 0x27, 0x50, 0x13, 0x11, 0x19, 0x34,
	0xc9, 0x41, 0x9f, 0xa5, 0xc3, 0x50, 0xa5, 0x32, 0x93, 0x78, 0x49, 0x44, 0xe1, 0xa0, 0xe9, 0xd5,
	0xb9, 0xe4, 0xd2, 0x44, 0xc8, 0xe4, 0x97, 0x4d, 0x7a, 0xd7, 0xad, 0x5e, 0x44, 0xee, 0x7b, 0x9d,
	0x4b, 0xc9, 0x23, 0x46, 0xa8, 0x12, 0x84, 0x26, 0x89, 0xcc, 0x68, 0x26, 0x64, 0xa2, 0x5d, 0xf6,
	0xd1, 0x9e, 0xd4, 0xb1, 0xd4, 0xa4, 0x47, 0x35, 0xb3, 0x35, 0xc8, 0xa0, 0xd9, 0x63, 0x19, 0x6d,
	0x12, 0x45, 0xb9, 0x48, 0x8c, 0xd8, 0x6a, 0x83, 0x1d, 0xa8, 0xbf, 0x9e, 0x28, 0x76, 0x32, 0xa9,
	0x22, 0xa9, 0x75, 0x97, 0x1d, 0xf4, 0x99, 0xce, 0x70, 0x03, 0xae, 0xd0, 0xfd, 0xfd, 0x94, 0x69,
	0xdd, 0x40, 0x1b, 0xe8, 0xe1, 0xd5, 0x6e, 0xfe, 0x89, 0xef, 0xc2, 0xb5, 0x7e, 0x22, 0xf4, 0x07,
	0xaa, 0x76, 0x15, 0x15, 0x69, 0xa3, 0x6c, 0xd2, 0x55, 0x17, 0xeb, 0x50, 0x91, 0x06, 0xaf, 0x60,
	0x6d, 0xce, 0x54, 0x2b, 0x99, 0x68, 0x86, 0x9b, 0xb0, 0xac, 0x5d, 0xcc, 0xd8, 0x56, 0x5b, 0xab,
	0xa1, 0xe9, 0x3b, 0xcc, 0xa5, 0xed, 0xcb, 0x27, 0x3f, 0xef, 0x94, 0xba, 0xff, 0x64, 0xc1, 0x31,
	0x82, 0xdb, 0x33, 0x66, 0x1d, 0xa9, 0x85, 0xe9, 0x76, 0x31, 0xea, 0x0b, 0x80, 0xff, 0x0d, 0x1b,
	0xd0, 0x6a, 0xeb, 0x41, 0x68, 0xa7, 0x13, 0x4e, 0xa6, 0x13, 0xda, 0x0d, 0xb8, 0xe9, 0x84, 0x1d,
	0xca, 0x99, 0x73, 0xed, 0x4e, 0xbd, 0x0c, 0xbe, 0x21, 0xf0, 0xcf, 0x63, 0x70, 0x9d, 0x3d, 0x07,
	0x9c, 0x23, 0xef, 0xaa, 0x3c, 0xdb, 0x40, 0x1b, 0x97, 0xce, 0xef, 0xb1, 0xa6, 0xe7, 0xdd, 0xf0,
	0xcb, 0x02, 0xe0, 0xad, 0x85, 0xc0, 0x16, 0x61, 0x86, 0xb8, 0x0e, 0xd8, 0x00, 0x77, 0x68, 0x4a,
	0xe3, 0x7c, 0x52, 0x41, 0x1b, 0x6e, 0xcc, 0x44, 0x1d, 0xfb, 0x36, 0x54, 0x94, 0x89, 0xb8, 0x9d,
	0xac, 0x38, 0x5e, 0x2b, 0x73, 0xb4, 0x4e, 0xd2, 0xfa, 0x53, 0x86, 0x25, 0x63, 0x82, 0x8f, 0x11,
	0x2c, 0xe7, 0x2d, 0xe1, 0x5b, 0xee, 0x4d, 0xd1, 0x31, 0x79, 0xeb, 0xc5, 0x49, 0x5b, 0x3e, 0x78,
	0xfa, 0xe9, 0xfb, 0xef, 0xaf, 0xe5, 0x27, 0xb8, 0x45, 0xec, 0x95, 0x9f, 0x9d, 0x23, 0x39, 0x74,
	0x1b, 0x3d, 0x22, 0x87, 0xd3, 0xb7, 0x77, 0x84, 0x3f, 0x23, 0xa8, 0x9d, 0x59, 0x0a, 0xbe, 0x5f,
	0x54, 0x6f, 0xfe, 0x6e, 0xbc, 0xcd, 0x05, 0x2a, 0x87, 0xb7, 0x6d, 0xf0, 0x36, 0xf1, 0xbd, 0x0b,
	0xe0, 0xe1, 0x37, 0x50, 0xb1, 0x53, 0xc3, 0x37, 0xa7, 0xdd, 0x67, 0xd6, 0xe0, 0x79, 0x45, 0x29,
	0x57, 0x6d, 0xcd, 0x54, 0x5b, 0xc5, 0x2b, 0xae, 0x9a, 0x9d, 0x7a, 0xfb, 0xd9, 0xc9, 0xc8, 0x47,
	0xa7, 0x23, 0x1f, 0xfd, 0x1a, 0xf9, 0xe8, 0xcb, 0xd8, 0x2f, 0x9d, 0x8e, 0xfd, 0xd2, 0x8f, 0xb1,
	0x5f, 0x7a, 0xbb, 0xc5, 0x45, 0xf6, 0xae, 0xdf, 0x0b, 0xf7, 0x64, 0x4c, 0x14, 0xe3, 0x7c, 0xf8,
	0x7e, 0x40, 0xb4, 0x8c, 0x63, 0x16, 0x09, 0x96, 0x92, 0x8f, 0x13, 0x9b, 0x6c, 0xa8, 0x98, 0xee,
	0x55, 0xcc, 0x1f, 0xfe, 0xf1, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0x09, 0x07, 0x37, 0x7c,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Stoploss queries a stoploss position for a given pair and account address.
	Stoploss(ctx context.Context, in *QueryStoplossRequest, opts ...grpc.CallOption) (*QueryStoplossResponse, error)
	// Stoploss returns all stoploss positions from an address.
	StoplossPositions(ctx context.Context, in *QueryStoplossPositionsRequest, opts ...grpc.CallOption) (*QueryStoplossPositionsResponse, error)
	// Params queries the IL module parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Stoploss(ctx context.Context, in *QueryStoplossRequest, opts ...grpc.CallOption) (*QueryStoplossResponse, error) {
	out := new(QueryStoplossResponse)
	err := c.cc.Invoke(ctx, "/il.v1.Query/Stoploss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoplossPositions(ctx context.Context, in *QueryStoplossPositionsRequest, opts ...grpc.CallOption) (*QueryStoplossPositionsResponse, error) {
	out := new(QueryStoplossPositionsResponse)
	err := c.cc.Invoke(ctx, "/il.v1.Query/StoplossPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/il.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Stoploss queries a stoploss position for a given pair and account address.
	Stoploss(context.Context, *QueryStoplossRequest) (*QueryStoplossResponse, error)
	// Stoploss returns all stoploss positions from an address.
	StoplossPositions(context.Context, *QueryStoplossPositionsRequest) (*QueryStoplossPositionsResponse, error)
	// Params queries the IL module parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Stoploss(ctx context.Context, req *QueryStoplossRequest) (*QueryStoplossResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stoploss not implemented")
}
func (*UnimplementedQueryServer) StoplossPositions(ctx context.Context, req *QueryStoplossPositionsRequest) (*QueryStoplossPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoplossPositions not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Stoploss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStoplossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Stoploss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/il.v1.Query/Stoploss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Stoploss(ctx, req.(*QueryStoplossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoplossPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStoplossPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoplossPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/il.v1.Query/StoplossPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoplossPositions(ctx, req.(*QueryStoplossPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/il.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "il.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stoploss",
			Handler:    _Query_Stoploss_Handler,
		},
		{
			MethodName: "StoplossPositions",
			Handler:    _Query_StoplossPositions_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "il/v1/query.proto",
}

func (m *QueryStoplossRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStoplossRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStoplossRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UniswapPair) > 0 {
		i -= len(m.UniswapPair)
		copy(dAtA[i:], m.UniswapPair)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UniswapPair)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStoplossResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStoplossResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStoplossResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Stoploss.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStoplossPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStoplossPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStoplossPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStoplossPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStoplossPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStoplossPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoplossPositions) > 0 {
		for iNdEx := len(m.StoplossPositions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoplossPositions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryStoplossRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UniswapPair)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStoplossResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Stoploss.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStoplossPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStoplossPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StoplossPositions) > 0 {
		for _, e := range m.StoplossPositions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryStoplossRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStoplossRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStoplossRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniswapPair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniswapPair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStoplossResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStoplossResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStoplossResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stoploss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stoploss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStoplossPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStoplossPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStoplossPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStoplossPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStoplossPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStoplossPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoplossPositions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoplossPositions = append(m.StoplossPositions, Stoploss{})
			if err := m.StoplossPositions[len(m.StoplossPositions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
