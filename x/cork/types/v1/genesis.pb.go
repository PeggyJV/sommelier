// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cork/v1/genesis.proto

package v1

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState - all cork state that must be provided at genesis
type GenesisState struct {
	Params            Params           `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	CellarIds         CellarIDSet      `protobuf:"bytes,2,opt,name=cellar_ids,json=cellarIds,proto3" json:"cellar_ids"`
	InvalidationNonce uint64           `protobuf:"varint,3,opt,name=invalidation_nonce,json=invalidationNonce,proto3" json:"invalidation_nonce,omitempty"`
	Corks             []*ValidatorCork `protobuf:"bytes,4,rep,name=corks,proto3" json:"corks,omitempty"`
	ScheduledCorks    []*ScheduledCork `protobuf:"bytes,5,rep,name=scheduled_corks,json=scheduledCorks,proto3" json:"scheduled_corks,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec09bf5ff5694398, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetCellarIds() CellarIDSet {
	if m != nil {
		return m.CellarIds
	}
	return CellarIDSet{}
}

func (m *GenesisState) GetInvalidationNonce() uint64 {
	if m != nil {
		return m.InvalidationNonce
	}
	return 0
}

func (m *GenesisState) GetCorks() []*ValidatorCork {
	if m != nil {
		return m.Corks
	}
	return nil
}

func (m *GenesisState) GetScheduledCorks() []*ScheduledCork {
	if m != nil {
		return m.ScheduledCorks
	}
	return nil
}

// Params cork parameters
type Params struct {
	// VotePeriod defines the number of blocks to wait for votes before attempting to tally
	VotePeriod int64 `protobuf:"varint,1,opt,name=vote_period,json=votePeriod,proto3" json:"vote_period,omitempty" yaml:"vote_period"`
	// VoteThreshold defines the percentage of bonded stake required to vote each period
	VoteThreshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=vote_threshold,json=voteThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"vote_threshold" yaml:"vote_threshold"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec09bf5ff5694398, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetVotePeriod() int64 {
	if m != nil {
		return m.VotePeriod
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "cork.v1.GenesisState")
	proto.RegisterType((*Params)(nil), "cork.v1.Params")
}

func init() { proto.RegisterFile("cork/v1/genesis.proto", fileDescriptor_ec09bf5ff5694398) }

var fileDescriptor_ec09bf5ff5694398 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xbf, 0x6a, 0xdb, 0x40,
	0x18, 0xb7, 0x62, 0xc7, 0x25, 0xe7, 0x36, 0x69, 0x8f, 0x24, 0x98, 0x0c, 0xb2, 0xd1, 0x50, 0x3c,
	0xd4, 0x3a, 0x9c, 0x0e, 0x25, 0x5d, 0x0a, 0x4e, 0x20, 0x78, 0x29, 0x41, 0x2e, 0x1d, 0xba, 0x18,
	0x45, 0xf7, 0x21, 0x5f, 0x2d, 0xe9, 0x13, 0x77, 0x17, 0x11, 0xbf, 0x45, 0xa7, 0xbe, 0x47, 0xdf,
	0x22, 0x63, 0xc6, 0xd2, 0xc1, 0x14, 0xfb, 0x0d, 0xfc, 0x04, 0x45, 0x77, 0x96, 0x11, 0x9d, 0x74,
	0xbf, 0x7f, 0xdf, 0x0f, 0x7d, 0x7c, 0xe4, 0x2c, 0x42, 0xb9, 0x60, 0xc5, 0x88, 0xc5, 0x90, 0x81,
	0x12, 0xca, 0xcf, 0x25, 0x6a, 0xa4, 0x2f, 0x4a, 0xda, 0x2f, 0x46, 0x17, 0xaf, 0x2b, 0x5d, 0x3f,
	0x5a, 0xe9, 0x82, 0x56, 0x8c, 0xb1, 0x58, 0xee, 0x34, 0xc6, 0x18, 0xcd, 0x93, 0x95, 0x2f, 0xcb,
	0x7a, 0x3f, 0x0f, 0xc8, 0xcb, 0x5b, 0x3b, 0x76, 0xaa, 0x43, 0x0d, 0x74, 0x48, 0xda, 0x79, 0x28,
	0xc3, 0x54, 0x75, 0x9d, 0xbe, 0x33, 0xe8, 0x5c, 0x9e, 0xf8, 0xbb, 0x1a, 0xff, 0xce, 0xd0, 0xe3,
	0xd6, 0xd3, 0xaa, 0xd7, 0x08, 0x76, 0x26, 0x7a, 0x45, 0x48, 0x04, 0x49, 0x12, 0xca, 0x99, 0xe0,
	0xaa, 0x7b, 0x60, 0x22, 0xa7, 0xfb, 0xc8, 0xb5, 0x91, 0x26, 0x37, 0x53, 0xd0, 0xbb, 0xdc, 0x91,
	0x75, 0x4f, 0xb8, 0xa2, 0x43, 0x42, 0x45, 0x56, 0x84, 0x89, 0xe0, 0xa1, 0x16, 0x98, 0xcd, 0x32,
	0xcc, 0x22, 0xe8, 0x36, 0xfb, 0xce, 0xa0, 0x15, 0xbc, 0xa9, 0x2b, 0x9f, 0x4b, 0x81, 0xbe, 0x23,
	0x87, 0xe5, 0x58, 0xd5, 0x6d, 0xf5, 0x9b, 0x83, 0xce, 0xe5, 0xf9, 0xbe, 0xe4, 0xab, 0x35, 0xa2,
	0xbc, 0x46, 0xb9, 0x08, 0xac, 0x89, 0x7e, 0x22, 0x27, 0x2a, 0x9a, 0x03, 0x7f, 0x48, 0x80, 0xcf,
	0x6c, 0xee, 0xf0, 0xbf, 0xdc, 0xb4, 0xd2, 0x4d, 0xee, 0x58, 0xd5, 0xa1, 0xf2, 0x7e, 0x39, 0xa4,
	0x6d, 0xff, 0x98, 0x7e, 0x20, 0x9d, 0x02, 0x35, 0xcc, 0x72, 0x90, 0x02, 0xb9, 0xd9, 0x4b, 0x73,
	0x7c, 0xbe, 0x5d, 0xf5, 0xe8, 0x32, 0x4c, 0x93, 0x8f, 0x5e, 0x4d, 0xf4, 0x02, 0x52, 0xa2, 0x3b,
	0x03, 0x68, 0x46, 0x8e, 0x8d, 0xa6, 0xe7, 0x12, 0xd4, 0x1c, 0x13, 0x6e, 0x16, 0x74, 0x34, 0xbe,
	0x2d, 0x57, 0xf1, 0x67, 0xd5, 0x7b, 0x1b, 0x0b, 0x3d, 0x7f, 0xb8, 0xf7, 0x23, 0x4c, 0x59, 0x84,
	0x2a, 0x45, 0xb5, 0xfb, 0x0c, 0x15, 0x5f, 0x30, 0xbd, 0xcc, 0x41, 0xf9, 0x37, 0x10, 0x6d, 0x57,
	0xbd, 0xb3, 0x5a, 0xd3, 0x7e, 0x9a, 0x17, 0xbc, 0x2a, 0x89, 0x2f, 0x15, 0x1e, 0x4f, 0x9e, 0xd6,
	0xae, 0xf3, 0xbc, 0x76, 0x9d, 0xbf, 0x6b, 0xd7, 0xf9, 0xb1, 0x71, 0x1b, 0xcf, 0x1b, 0xb7, 0xf1,
	0x7b, 0xe3, 0x36, 0xbe, 0xb1, 0x5a, 0x53, 0x0e, 0x71, 0xbc, 0xfc, 0x5e, 0x30, 0x85, 0x69, 0x0a,
	0x89, 0x00, 0xc9, 0x8a, 0x2b, 0xf6, 0x68, 0x4e, 0xc5, 0x76, 0xb2, 0x62, 0x74, 0xdf, 0x36, 0xe7,
	0xf1, 0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x96, 0x42, 0x5a, 0x72, 0x7c, 0x02, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScheduledCorks) > 0 {
		for iNdEx := len(m.ScheduledCorks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScheduledCorks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Corks) > 0 {
		for iNdEx := len(m.Corks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Corks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.InvalidationNonce != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.InvalidationNonce))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.CellarIds.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.VoteThreshold.Size()
		i -= size
		if _, err := m.VoteThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.VotePeriod != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.VotePeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.CellarIds.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.InvalidationNonce != 0 {
		n += 1 + sovGenesis(uint64(m.InvalidationNonce))
	}
	if len(m.Corks) > 0 {
		for _, e := range m.Corks {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ScheduledCorks) > 0 {
		for _, e := range m.ScheduledCorks {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotePeriod != 0 {
		n += 1 + sovGenesis(uint64(m.VotePeriod))
	}
	l = m.VoteThreshold.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CellarIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationNonce", wireType)
			}
			m.InvalidationNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidationNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Corks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Corks = append(m.Corks, &ValidatorCork{})
			if err := m.Corks[len(m.Corks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledCorks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledCorks = append(m.ScheduledCorks, &ScheduledCork{})
			if err := m.ScheduledCorks[len(m.ScheduledCorks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriod", wireType)
			}
			m.VotePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VoteThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
