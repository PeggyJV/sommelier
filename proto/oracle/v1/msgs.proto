syntax = "proto3";
package oracle.v1;

import "google/api/annotations.proto";

option go_package = "github.com/peggyjv/sommelier/x/oracle/types";

service Msg {
  rpc DelegateFeedConsent(MsgDelegateFeedConsent) returns (MsgDelegateFeedConsentResponse) {
    option (google.api.http).post = "/oracle/v1/delegate_feed_consent";
  }
  rpc AggregateExchangeRatePrevote(MsgAggregateExchangeRatePrevote) returns (MsgAggregateExchangeRatePrevoteResponse) {
    option (google.api.http).post = "/oracle/v1/aggregate_exchange_rate_prevote";
  }
  rpc AggregateExchangeRateVote(MsgAggregateExchangeRateVote) returns (MsgAggregateExchangeRateVoteResponse) {
    option (google.api.http).post = "/oracle/v1/aggregate_exchange_rate_vote";
  }
}

// MsgDelegateFeedConsent - struct for delegating oracle voting rights to another address.
message MsgDelegateFeedConsent {
    string operator = 1;
    string delegate = 2;
}

// TODO: return data
message MsgDelegateFeedConsentResponse {}

// MsgAggregateExchangeRatePrevote - struct for aggregate prevoting on the ExchangeRateVote.
// The purpose of aggregate prevote is to hide vote exchange rates with hash
// which is formatted as hex string in SHA256("{salt}:{exchange rate}{denom},...,{exchange rate}{denom}:{voter}")
message MsgAggregateExchangeRatePrevote {
    bytes  hash      = 1;
    string feeder    = 2;
    string validator = 3;
}

// TODO: return data
message MsgAggregateExchangeRatePrevoteResponse {}

// MsgAggregateExchangeRateVote - struct for voting on the exchange rates of Luna denominated in various Terra assets.
message MsgAggregateExchangeRateVote {
    string salt           = 1;
    string exchange_rates = 2;
    string feeder         = 3;
    string validator      = 4;
}

// TODO: return data
message MsgAggregateExchangeRateVoteResponse {}