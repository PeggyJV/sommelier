// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeeAccrualCounter {
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub count: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeeAccrualCounters {
    #[prost(message, repeated, tag = "1")]
    pub counters: ::prost::alloc::vec::Vec<FeeAccrualCounter>,
}
/// Params defines the parameters for the module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// The number of fee accruals after which an auction should be started
    #[prost(uint64, tag = "1")]
    pub fee_accrual_auction_threshold: u64,
    /// Emission rate factor. Specifically, the number of blocks over which to distribute
    /// some amount of staking rewards.
    #[prost(uint64, tag = "2")]
    pub reward_emission_period: u64,
    /// The initial rate at which auctions should decrease their denom's price in SOMM
    #[prost(string, tag = "3")]
    pub initial_price_decrease_rate: ::prost::alloc::string::String,
    /// Number of blocks between auction price decreases
    #[prost(uint64, tag = "4")]
    pub price_decrease_block_interval: u64,
    /// The interval between starting auctions
    #[prost(uint64, tag = "5")]
    pub auction_interval: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryModuleAccountsRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryModuleAccountsResponse {
    #[prost(string, tag = "1")]
    pub fees_address: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryLastRewardSupplyPeakRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryLastRewardSupplyPeakResponse {
    #[prost(string, tag = "1")]
    pub last_reward_supply_peak: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryFeeAccrualCountersRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryFeeAccrualCountersResponse {
    #[prost(message, optional, tag = "1")]
    pub fee_accrual_counters: ::core::option::Option<FeeAccrualCounters>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryApyRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryApyResponse {
    #[prost(string, tag = "1")]
    pub apy: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn query_params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cellarfees.v1.Query/QueryParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cellarfees.v1.Query", "QueryParams"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_module_accounts(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryModuleAccountsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryModuleAccountsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cellarfees.v1.Query/QueryModuleAccounts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cellarfees.v1.Query", "QueryModuleAccounts"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_last_reward_supply_peak(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryLastRewardSupplyPeakRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryLastRewardSupplyPeakResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cellarfees.v1.Query/QueryLastRewardSupplyPeak",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cellarfees.v1.Query", "QueryLastRewardSupplyPeak"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_fee_accrual_counters(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryFeeAccrualCountersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryFeeAccrualCountersResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cellarfees.v1.Query/QueryFeeAccrualCounters",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cellarfees.v1.Query", "QueryFeeAccrualCounters"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_apy(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryApyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryApyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cellarfees.v1.Query/QueryAPY",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cellarfees.v1.Query", "QueryAPY"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// GenesisState defines the cellarfees module's genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
    #[prost(message, optional, tag = "2")]
    pub fee_accrual_counters: ::core::option::Option<FeeAccrualCounters>,
    #[prost(string, tag = "3")]
    pub last_reward_supply_peak: ::prost::alloc::string::String,
}
