// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cellarfees/v2/cellarfees.proto

package v2

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Collin: This type should never be saved to state in case of indeterminism around how
// Go interprets floating point numbers. This is only meant to be used for query results.
type FeeTokenBalance struct {
	Balance  types.Coin `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance"`
	UsdValue float64    `protobuf:"fixed64,2,opt,name=usd_value,json=usdValue,proto3" json:"usd_value,omitempty"`
}

func (m *FeeTokenBalance) Reset()         { *m = FeeTokenBalance{} }
func (m *FeeTokenBalance) String() string { return proto.CompactTextString(m) }
func (*FeeTokenBalance) ProtoMessage()    {}
func (*FeeTokenBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9a743a746b9d1be, []int{0}
}
func (m *FeeTokenBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeTokenBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeTokenBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeTokenBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeTokenBalance.Merge(m, src)
}
func (m *FeeTokenBalance) XXX_Size() int {
	return m.Size()
}
func (m *FeeTokenBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeTokenBalance.DiscardUnknown(m)
}

var xxx_messageInfo_FeeTokenBalance proto.InternalMessageInfo

func (m *FeeTokenBalance) GetBalance() types.Coin {
	if m != nil {
		return m.Balance
	}
	return types.Coin{}
}

func (m *FeeTokenBalance) GetUsdValue() float64 {
	if m != nil {
		return m.UsdValue
	}
	return 0
}

func init() {
	proto.RegisterType((*FeeTokenBalance)(nil), "cellarfees.v2.FeeTokenBalance")
}

func init() { proto.RegisterFile("cellarfees/v2/cellarfees.proto", fileDescriptor_f9a743a746b9d1be) }

var fileDescriptor_f9a743a746b9d1be = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbd, 0x4a, 0xc4, 0x40,
	0x14, 0x85, 0x33, 0x22, 0xfe, 0x44, 0x44, 0x08, 0x16, 0xeb, 0x0a, 0xe3, 0x62, 0xb5, 0xd5, 0x5c,
	0x36, 0x22, 0x68, 0x1b, 0xc1, 0x56, 0x58, 0xc4, 0xc2, 0x46, 0x26, 0xb3, 0xd7, 0x71, 0x74, 0x92,
	0x1b, 0x32, 0xc9, 0xe0, 0xbe, 0x85, 0x8f, 0xb5, 0xe5, 0x96, 0x56, 0x22, 0xc9, 0x8b, 0x48, 0x12,
	0xc5, 0xed, 0xbe, 0x7b, 0x38, 0x7c, 0x70, 0x6e, 0xc8, 0x15, 0x5a, 0x2b, 0xcb, 0x67, 0x44, 0x07,
	0x3e, 0x86, 0xff, 0x4b, 0x14, 0x25, 0x55, 0x14, 0x1d, 0x6e, 0x24, 0x3e, 0x1e, 0x73, 0x45, 0x2e,
	0x23, 0x07, 0xa9, 0x74, 0x08, 0x7e, 0x96, 0x62, 0x25, 0x67, 0xa0, 0xc8, 0xe4, 0x43, 0x7d, 0x7c,
	0xac, 0x49, 0x53, 0x8f, 0xd0, 0xd1, 0x90, 0x9e, 0x9b, 0xf0, 0xe8, 0x16, 0xf1, 0x9e, 0xde, 0x30,
	0x4f, 0xa4, 0x95, 0xb9, 0xc2, 0xe8, 0x3a, 0xdc, 0x4d, 0x07, 0x1c, 0xb1, 0x09, 0x9b, 0x1e, 0xc4,
	0x27, 0x62, 0x50, 0x8b, 0x4e, 0x2d, 0x7e, 0xd5, 0xe2, 0x86, 0x4c, 0x9e, 0x6c, 0xaf, 0xbe, 0xce,
	0x82, 0xf9, 0x5f, 0x3f, 0x3a, 0x0d, 0xf7, 0x6b, 0xb7, 0x78, 0xf2, 0xd2, 0xd6, 0x38, 0xda, 0x9a,
	0xb0, 0x29, 0x9b, 0xef, 0xd5, 0x6e, 0xf1, 0xd0, 0xdd, 0xc9, 0xdd, 0xaa, 0xe1, 0x6c, 0xdd, 0x70,
	0xf6, 0xdd, 0x70, 0xf6, 0xd1, 0xf2, 0x60, 0xdd, 0xf2, 0xe0, 0xb3, 0xe5, 0xc1, 0xe3, 0xa5, 0x36,
	0xd5, 0x4b, 0x9d, 0x0a, 0x45, 0x19, 0x14, 0xa8, 0xf5, 0xf2, 0xd5, 0x83, 0xa3, 0x2c, 0x43, 0x6b,
	0xb0, 0x04, 0x7f, 0x05, 0xef, 0x1b, 0xeb, 0xa1, 0x5a, 0x16, 0xfd, 0x47, 0xd2, 0x9d, 0x7e, 0xc2,
	0xc5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x0c, 0xc7, 0xb9, 0x29, 0x01, 0x00, 0x00,
}

func (m *FeeTokenBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeTokenBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeTokenBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UsdValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.UsdValue))))
		i--
		dAtA[i] = 0x11
	}
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCellarfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintCellarfees(dAtA []byte, offset int, v uint64) int {
	offset -= sovCellarfees(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeeTokenBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Balance.Size()
	n += 1 + l + sovCellarfees(uint64(l))
	if m.UsdValue != 0 {
		n += 9
	}
	return n
}

func sovCellarfees(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCellarfees(x uint64) (n int) {
	return sovCellarfees(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeeTokenBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCellarfees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeTokenBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeTokenBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCellarfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCellarfees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCellarfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.UsdValue = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCellarfees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCellarfees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCellarfees(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCellarfees
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCellarfees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCellarfees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCellarfees
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCellarfees
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCellarfees
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCellarfees        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCellarfees          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCellarfees = fmt.Errorf("proto: unexpected end of group")
)
