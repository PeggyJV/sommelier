// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cork/v2/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params gRPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsRequest is the response type for the Query/Params gRPC method.
type QueryParamsResponse struct {
	// allocation parameters
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryCellarIDsRequest is the request type for Query/QueryCellarIDs gRPC method.
type QueryCellarIDsRequest struct {
}

func (m *QueryCellarIDsRequest) Reset()         { *m = QueryCellarIDsRequest{} }
func (m *QueryCellarIDsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCellarIDsRequest) ProtoMessage()    {}
func (*QueryCellarIDsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{2}
}
func (m *QueryCellarIDsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCellarIDsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCellarIDsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCellarIDsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCellarIDsRequest.Merge(m, src)
}
func (m *QueryCellarIDsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCellarIDsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCellarIDsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCellarIDsRequest proto.InternalMessageInfo

// QueryCellarIDsResponse is the response type for Query/QueryCellars gRPC method.
type QueryCellarIDsResponse struct {
	CellarIds []string `protobuf:"bytes,1,rep,name=cellar_ids,json=cellarIds,proto3" json:"cellar_ids,omitempty"`
}

func (m *QueryCellarIDsResponse) Reset()         { *m = QueryCellarIDsResponse{} }
func (m *QueryCellarIDsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCellarIDsResponse) ProtoMessage()    {}
func (*QueryCellarIDsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{3}
}
func (m *QueryCellarIDsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCellarIDsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCellarIDsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCellarIDsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCellarIDsResponse.Merge(m, src)
}
func (m *QueryCellarIDsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCellarIDsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCellarIDsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCellarIDsResponse proto.InternalMessageInfo

func (m *QueryCellarIDsResponse) GetCellarIds() []string {
	if m != nil {
		return m.CellarIds
	}
	return nil
}

// QueryScheduledCorksRequest
type QueryScheduledCorksRequest struct {
}

func (m *QueryScheduledCorksRequest) Reset()         { *m = QueryScheduledCorksRequest{} }
func (m *QueryScheduledCorksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryScheduledCorksRequest) ProtoMessage()    {}
func (*QueryScheduledCorksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{4}
}
func (m *QueryScheduledCorksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryScheduledCorksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryScheduledCorksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryScheduledCorksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryScheduledCorksRequest.Merge(m, src)
}
func (m *QueryScheduledCorksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryScheduledCorksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryScheduledCorksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryScheduledCorksRequest proto.InternalMessageInfo

// QueryScheduledCorksResponse
type QueryScheduledCorksResponse struct {
	Corks []*ScheduledCork `protobuf:"bytes,1,rep,name=corks,proto3" json:"corks,omitempty"`
}

func (m *QueryScheduledCorksResponse) Reset()         { *m = QueryScheduledCorksResponse{} }
func (m *QueryScheduledCorksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryScheduledCorksResponse) ProtoMessage()    {}
func (*QueryScheduledCorksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{5}
}
func (m *QueryScheduledCorksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryScheduledCorksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryScheduledCorksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryScheduledCorksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryScheduledCorksResponse.Merge(m, src)
}
func (m *QueryScheduledCorksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryScheduledCorksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryScheduledCorksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryScheduledCorksResponse proto.InternalMessageInfo

func (m *QueryScheduledCorksResponse) GetCorks() []*ScheduledCork {
	if m != nil {
		return m.Corks
	}
	return nil
}

// QueryScheduledBlockHeightsRequest
type QueryScheduledBlockHeightsRequest struct {
}

func (m *QueryScheduledBlockHeightsRequest) Reset()         { *m = QueryScheduledBlockHeightsRequest{} }
func (m *QueryScheduledBlockHeightsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryScheduledBlockHeightsRequest) ProtoMessage()    {}
func (*QueryScheduledBlockHeightsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{6}
}
func (m *QueryScheduledBlockHeightsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryScheduledBlockHeightsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryScheduledBlockHeightsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryScheduledBlockHeightsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryScheduledBlockHeightsRequest.Merge(m, src)
}
func (m *QueryScheduledBlockHeightsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryScheduledBlockHeightsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryScheduledBlockHeightsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryScheduledBlockHeightsRequest proto.InternalMessageInfo

// QueryScheduledBlockHeightsResponse
type QueryScheduledBlockHeightsResponse struct {
	BlockHeights []uint64 `protobuf:"varint,1,rep,packed,name=block_heights,json=blockHeights,proto3" json:"block_heights,omitempty"`
}

func (m *QueryScheduledBlockHeightsResponse) Reset()         { *m = QueryScheduledBlockHeightsResponse{} }
func (m *QueryScheduledBlockHeightsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryScheduledBlockHeightsResponse) ProtoMessage()    {}
func (*QueryScheduledBlockHeightsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{7}
}
func (m *QueryScheduledBlockHeightsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryScheduledBlockHeightsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryScheduledBlockHeightsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryScheduledBlockHeightsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryScheduledBlockHeightsResponse.Merge(m, src)
}
func (m *QueryScheduledBlockHeightsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryScheduledBlockHeightsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryScheduledBlockHeightsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryScheduledBlockHeightsResponse proto.InternalMessageInfo

func (m *QueryScheduledBlockHeightsResponse) GetBlockHeights() []uint64 {
	if m != nil {
		return m.BlockHeights
	}
	return nil
}

// QueryScheduledCorksByBlockHeightRequest
type QueryScheduledCorksByBlockHeightRequest struct {
	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryScheduledCorksByBlockHeightRequest) Reset() {
	*m = QueryScheduledCorksByBlockHeightRequest{}
}
func (m *QueryScheduledCorksByBlockHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryScheduledCorksByBlockHeightRequest) ProtoMessage()    {}
func (*QueryScheduledCorksByBlockHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{8}
}
func (m *QueryScheduledCorksByBlockHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryScheduledCorksByBlockHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryScheduledCorksByBlockHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryScheduledCorksByBlockHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryScheduledCorksByBlockHeightRequest.Merge(m, src)
}
func (m *QueryScheduledCorksByBlockHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryScheduledCorksByBlockHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryScheduledCorksByBlockHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryScheduledCorksByBlockHeightRequest proto.InternalMessageInfo

func (m *QueryScheduledCorksByBlockHeightRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// QueryScheduledCorksByBlockHeightResponse
type QueryScheduledCorksByBlockHeightResponse struct {
	Corks []*ScheduledCork `protobuf:"bytes,1,rep,name=corks,proto3" json:"corks,omitempty"`
}

func (m *QueryScheduledCorksByBlockHeightResponse) Reset() {
	*m = QueryScheduledCorksByBlockHeightResponse{}
}
func (m *QueryScheduledCorksByBlockHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryScheduledCorksByBlockHeightResponse) ProtoMessage()    {}
func (*QueryScheduledCorksByBlockHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{9}
}
func (m *QueryScheduledCorksByBlockHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryScheduledCorksByBlockHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryScheduledCorksByBlockHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryScheduledCorksByBlockHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryScheduledCorksByBlockHeightResponse.Merge(m, src)
}
func (m *QueryScheduledCorksByBlockHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryScheduledCorksByBlockHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryScheduledCorksByBlockHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryScheduledCorksByBlockHeightResponse proto.InternalMessageInfo

func (m *QueryScheduledCorksByBlockHeightResponse) GetCorks() []*ScheduledCork {
	if m != nil {
		return m.Corks
	}
	return nil
}

// QueryScheduledCorksByIDRequest
type QueryScheduledCorksByIDRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryScheduledCorksByIDRequest) Reset()         { *m = QueryScheduledCorksByIDRequest{} }
func (m *QueryScheduledCorksByIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryScheduledCorksByIDRequest) ProtoMessage()    {}
func (*QueryScheduledCorksByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{10}
}
func (m *QueryScheduledCorksByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryScheduledCorksByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryScheduledCorksByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryScheduledCorksByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryScheduledCorksByIDRequest.Merge(m, src)
}
func (m *QueryScheduledCorksByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryScheduledCorksByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryScheduledCorksByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryScheduledCorksByIDRequest proto.InternalMessageInfo

func (m *QueryScheduledCorksByIDRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryScheduledCorksByIDResponse
type QueryScheduledCorksByIDResponse struct {
	Corks []*ScheduledCork `protobuf:"bytes,1,rep,name=corks,proto3" json:"corks,omitempty"`
}

func (m *QueryScheduledCorksByIDResponse) Reset()         { *m = QueryScheduledCorksByIDResponse{} }
func (m *QueryScheduledCorksByIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryScheduledCorksByIDResponse) ProtoMessage()    {}
func (*QueryScheduledCorksByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{11}
}
func (m *QueryScheduledCorksByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryScheduledCorksByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryScheduledCorksByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryScheduledCorksByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryScheduledCorksByIDResponse.Merge(m, src)
}
func (m *QueryScheduledCorksByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryScheduledCorksByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryScheduledCorksByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryScheduledCorksByIDResponse proto.InternalMessageInfo

func (m *QueryScheduledCorksByIDResponse) GetCorks() []*ScheduledCork {
	if m != nil {
		return m.Corks
	}
	return nil
}

type QueryCorkResultRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryCorkResultRequest) Reset()         { *m = QueryCorkResultRequest{} }
func (m *QueryCorkResultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCorkResultRequest) ProtoMessage()    {}
func (*QueryCorkResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{12}
}
func (m *QueryCorkResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCorkResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCorkResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCorkResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCorkResultRequest.Merge(m, src)
}
func (m *QueryCorkResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCorkResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCorkResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCorkResultRequest proto.InternalMessageInfo

func (m *QueryCorkResultRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryCorkResultResponse struct {
	CorkResult *CorkResult `protobuf:"bytes,1,opt,name=corkResult,proto3" json:"corkResult,omitempty"`
}

func (m *QueryCorkResultResponse) Reset()         { *m = QueryCorkResultResponse{} }
func (m *QueryCorkResultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCorkResultResponse) ProtoMessage()    {}
func (*QueryCorkResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{13}
}
func (m *QueryCorkResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCorkResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCorkResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCorkResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCorkResultResponse.Merge(m, src)
}
func (m *QueryCorkResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCorkResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCorkResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCorkResultResponse proto.InternalMessageInfo

func (m *QueryCorkResultResponse) GetCorkResult() *CorkResult {
	if m != nil {
		return m.CorkResult
	}
	return nil
}

type QueryCorkResultsRequest struct {
}

func (m *QueryCorkResultsRequest) Reset()         { *m = QueryCorkResultsRequest{} }
func (m *QueryCorkResultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCorkResultsRequest) ProtoMessage()    {}
func (*QueryCorkResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{14}
}
func (m *QueryCorkResultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCorkResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCorkResultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCorkResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCorkResultsRequest.Merge(m, src)
}
func (m *QueryCorkResultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCorkResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCorkResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCorkResultsRequest proto.InternalMessageInfo

type QueryCorkResultsResponse struct {
	CorkResults []*CorkResult `protobuf:"bytes,1,rep,name=corkResults,proto3" json:"corkResults,omitempty"`
}

func (m *QueryCorkResultsResponse) Reset()         { *m = QueryCorkResultsResponse{} }
func (m *QueryCorkResultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCorkResultsResponse) ProtoMessage()    {}
func (*QueryCorkResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2ffa9107b7d7f7, []int{15}
}
func (m *QueryCorkResultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCorkResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCorkResultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCorkResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCorkResultsResponse.Merge(m, src)
}
func (m *QueryCorkResultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCorkResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCorkResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCorkResultsResponse proto.InternalMessageInfo

func (m *QueryCorkResultsResponse) GetCorkResults() []*CorkResult {
	if m != nil {
		return m.CorkResults
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "cork.v2.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "cork.v2.QueryParamsResponse")
	proto.RegisterType((*QueryCellarIDsRequest)(nil), "cork.v2.QueryCellarIDsRequest")
	proto.RegisterType((*QueryCellarIDsResponse)(nil), "cork.v2.QueryCellarIDsResponse")
	proto.RegisterType((*QueryScheduledCorksRequest)(nil), "cork.v2.QueryScheduledCorksRequest")
	proto.RegisterType((*QueryScheduledCorksResponse)(nil), "cork.v2.QueryScheduledCorksResponse")
	proto.RegisterType((*QueryScheduledBlockHeightsRequest)(nil), "cork.v2.QueryScheduledBlockHeightsRequest")
	proto.RegisterType((*QueryScheduledBlockHeightsResponse)(nil), "cork.v2.QueryScheduledBlockHeightsResponse")
	proto.RegisterType((*QueryScheduledCorksByBlockHeightRequest)(nil), "cork.v2.QueryScheduledCorksByBlockHeightRequest")
	proto.RegisterType((*QueryScheduledCorksByBlockHeightResponse)(nil), "cork.v2.QueryScheduledCorksByBlockHeightResponse")
	proto.RegisterType((*QueryScheduledCorksByIDRequest)(nil), "cork.v2.QueryScheduledCorksByIDRequest")
	proto.RegisterType((*QueryScheduledCorksByIDResponse)(nil), "cork.v2.QueryScheduledCorksByIDResponse")
	proto.RegisterType((*QueryCorkResultRequest)(nil), "cork.v2.QueryCorkResultRequest")
	proto.RegisterType((*QueryCorkResultResponse)(nil), "cork.v2.QueryCorkResultResponse")
	proto.RegisterType((*QueryCorkResultsRequest)(nil), "cork.v2.QueryCorkResultsRequest")
	proto.RegisterType((*QueryCorkResultsResponse)(nil), "cork.v2.QueryCorkResultsResponse")
}

func init() { proto.RegisterFile("cork/v2/query.proto", fileDescriptor_5f2ffa9107b7d7f7) }

var fileDescriptor_5f2ffa9107b7d7f7 = []byte{
	// 791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0x5f, 0x4f, 0xd3, 0x50,
	0x18, 0xc6, 0x57, 0x04, 0x0c, 0xef, 0x10, 0xcc, 0xe1, 0x7f, 0x81, 0x8e, 0x15, 0x94, 0x65, 0x8e,
	0x1d, 0x18, 0x12, 0xaf, 0x1d, 0xc4, 0xb8, 0x68, 0x54, 0xe6, 0x8d, 0xf1, 0x66, 0xe9, 0xd6, 0x93,
	0xae, 0xee, 0xcf, 0x19, 0x6d, 0xb7, 0xb0, 0x10, 0x12, 0xc3, 0xb5, 0x17, 0x26, 0x7e, 0x04, 0xaf,
	0x4c, 0xfc, 0x20, 0x5c, 0x12, 0xbd, 0xf1, 0xca, 0x18, 0xf0, 0x83, 0x98, 0x9d, 0x73, 0x5a, 0xda,
	0xad, 0xdb, 0x90, 0x3b, 0xfa, 0xbe, 0xcf, 0x79, 0x9e, 0x5f, 0xcb, 0x79, 0xdf, 0x0c, 0x66, 0x4a,
	0xd4, 0xaa, 0xe0, 0x56, 0x06, 0x1f, 0x35, 0x89, 0xd5, 0x4e, 0x37, 0x2c, 0xea, 0x50, 0x74, 0xb7,
	0x53, 0x4c, 0xb7, 0x32, 0xf2, 0xac, 0x41, 0x0d, 0xca, 0x6a, 0xb8, 0xf3, 0x17, 0x6f, 0xcb, 0x2b,
	0x06, 0xa5, 0x46, 0x95, 0x60, 0xad, 0x61, 0x62, 0xad, 0x5e, 0xa7, 0x8e, 0xe6, 0x98, 0xb4, 0x6e,
	0x8b, 0xee, 0x9c, 0xeb, 0x68, 0x90, 0x3a, 0xb1, 0x4d, 0xb7, 0x8c, 0xdc, 0x32, 0xf3, 0xe6, 0xb5,
	0xa5, 0x12, 0xb5, 0x6b, 0xd4, 0x2e, 0xf0, 0x04, 0xfe, 0x20, 0x5a, 0x49, 0xfe, 0x84, 0x8b, 0x9a,
	0x4d, 0x38, 0x1b, 0x6e, 0xed, 0x14, 0x89, 0xa3, 0xed, 0xe0, 0x86, 0x66, 0x98, 0x75, 0x16, 0xc9,
	0xb5, 0xea, 0x2c, 0xa0, 0xc3, 0x8e, 0xe2, 0x8d, 0x66, 0x69, 0x35, 0x3b, 0x4f, 0x8e, 0x9a, 0xc4,
	0x76, 0xd4, 0x03, 0x98, 0x09, 0x54, 0xed, 0x06, 0xad, 0xdb, 0x04, 0x6d, 0xc1, 0x78, 0x83, 0x55,
	0x16, 0xa5, 0x35, 0x29, 0x11, 0xcd, 0x4c, 0xa7, 0xc5, 0xcb, 0xa6, 0xb9, 0x30, 0x3b, 0x7a, 0xfe,
	0x3b, 0x16, 0xc9, 0x0b, 0x91, 0xba, 0x00, 0x73, 0xcc, 0x65, 0x9f, 0x54, 0xab, 0x9a, 0x95, 0x3b,
	0xf0, 0xec, 0x9f, 0xc0, 0x7c, 0x77, 0x43, 0x24, 0xac, 0x02, 0x94, 0x58, 0xb1, 0x60, 0xea, 0x9d,
	0x94, 0x3b, 0x89, 0x89, 0xfc, 0x04, 0xaf, 0xe4, 0x74, 0x5b, 0x5d, 0x01, 0x99, 0x1d, 0x7c, 0x5b,
	0x2a, 0x13, 0xbd, 0x59, 0x25, 0xfa, 0x3e, 0xb5, 0x2a, 0x9e, 0xed, 0x0b, 0x58, 0x0e, 0xed, 0x0a,
	0xef, 0x14, 0x8c, 0x75, 0x70, 0xb9, 0x6d, 0x34, 0x33, 0xef, 0xc1, 0x07, 0xf4, 0x79, 0x2e, 0x52,
	0xd7, 0x21, 0x1e, 0x34, 0xcb, 0x56, 0x69, 0xa9, 0xf2, 0x9c, 0x98, 0x46, 0xd9, 0xf1, 0x12, 0x73,
	0xa0, 0x0e, 0x12, 0x89, 0xe0, 0x75, 0xb8, 0x57, 0xec, 0xd4, 0x0b, 0x65, 0xde, 0x60, 0x00, 0xa3,
	0xf9, 0xc9, 0xa2, 0x4f, 0xac, 0xbe, 0x84, 0xcd, 0x10, 0xf8, 0x6c, 0xdb, 0xe7, 0x28, 0x52, 0x51,
	0x1c, 0x26, 0xfd, 0x7e, 0xec, 0x9f, 0x31, 0x9a, 0x8f, 0xfa, 0xec, 0xd4, 0x77, 0x90, 0x18, 0xee,
	0x76, 0xab, 0xef, 0xb2, 0x0d, 0x4a, 0xa8, 0x73, 0xee, 0xc0, 0xc5, 0x9b, 0x82, 0x11, 0x53, 0x17,
	0x50, 0x23, 0xa6, 0xae, 0xbe, 0x86, 0x58, 0xdf, 0x13, 0xb7, 0x42, 0x48, 0xb8, 0xd7, 0xa7, 0x53,
	0x23, 0x76, 0xb3, 0xea, 0xf4, 0x8b, 0x7e, 0x05, 0x0b, 0x3d, 0x4a, 0x11, 0xb9, 0x0b, 0x50, 0xf2,
	0xaa, 0xe2, 0x3e, 0xcf, 0x78, 0xb9, 0xbe, 0x03, 0x3e, 0x99, 0xba, 0xd4, 0xe3, 0xe7, 0x5d, 0x85,
	0x43, 0x58, 0xec, 0x6d, 0x89, 0xac, 0x3d, 0x88, 0x5e, 0x9b, 0xb8, 0x2f, 0x19, 0x1a, 0xe6, 0xd7,
	0x65, 0xbe, 0x4f, 0xc0, 0x18, 0xf3, 0x44, 0x15, 0x88, 0xfa, 0xe6, 0x11, 0x2d, 0x7b, 0x47, 0x7b,
	0x67, 0x57, 0x5e, 0x09, 0x6f, 0x72, 0x14, 0x35, 0x7e, 0xf6, 0xf3, 0xef, 0x97, 0x91, 0x65, 0xb4,
	0x84, 0x6d, 0x5a, 0xab, 0x91, 0xaa, 0x49, 0x2c, 0xec, 0x6e, 0x17, 0x3e, 0xb6, 0xe8, 0x18, 0xa6,
	0x82, 0xd3, 0x89, 0x94, 0xa0, 0x65, 0xf7, 0x3c, 0xcb, 0xb1, 0xbe, 0x7d, 0x91, 0xfa, 0x80, 0xa5,
	0xc6, 0xd0, 0x6a, 0x48, 0xea, 0xf5, 0xbc, 0xa3, 0x4f, 0x92, 0xd8, 0x3b, 0xc1, 0xab, 0x82, 0xd6,
	0x83, 0xfe, 0xa1, 0xd3, 0x2f, 0x6f, 0x0c, 0x16, 0x09, 0x92, 0x24, 0x23, 0xd9, 0x40, 0x6a, 0x08,
	0x89, 0xed, 0x1e, 0x29, 0xb0, 0x7b, 0x86, 0xbe, 0x49, 0xdd, 0xeb, 0xc6, 0x3f, 0xde, 0x28, 0xd9,
	0x27, 0x30, 0x64, 0x51, 0xc8, 0x8f, 0x6e, 0xa4, 0x15, 0x8c, 0x19, 0xc6, 0x98, 0x42, 0xc9, 0x81,
	0x8c, 0x81, 0x95, 0x82, 0x7e, 0x48, 0xb0, 0x36, 0x6c, 0xe2, 0xd1, 0xf6, 0xa0, 0x4f, 0x14, 0xb6,
	0x6a, 0xe4, 0x9d, 0xff, 0x38, 0x21, 0xe8, 0x73, 0x8c, 0x7e, 0x1f, 0x3d, 0x1d, 0xfe, 0x85, 0x0b,
	0xc5, 0x76, 0xe0, 0x35, 0xf0, 0x89, 0xff, 0xe9, 0x14, 0x7d, 0x95, 0xc4, 0xbc, 0xf5, 0xae, 0x0e,
	0xb4, 0x39, 0x98, 0xcc, 0x5b, 0x47, 0x72, 0x62, 0xb8, 0x50, 0x90, 0xef, 0x31, 0x72, 0x8c, 0xb6,
	0x6e, 0x46, 0x6e, 0xea, 0xf8, 0xc4, 0xd4, 0x4f, 0xd1, 0x99, 0x04, 0xd3, 0x5d, 0xa3, 0x8f, 0xba,
	0x27, 0xa2, 0x7b, 0x53, 0xc9, 0x6b, 0xfd, 0x05, 0x82, 0x26, 0xc5, 0x68, 0x1e, 0xa2, 0x8d, 0xb0,
	0x99, 0xa1, 0x56, 0xa5, 0x60, 0xf1, 0x35, 0xc1, 0x21, 0x3e, 0x4a, 0x70, 0xbf, 0x7b, 0xff, 0xa0,
	0xbe, 0x21, 0xde, 0xbd, 0x8c, 0x0f, 0x50, 0x08, 0x8e, 0x4d, 0xc6, 0x11, 0x47, 0xb1, 0x21, 0x1c,
	0xd9, 0x67, 0xe7, 0x97, 0x8a, 0x74, 0x71, 0xa9, 0x48, 0x7f, 0x2e, 0x15, 0xe9, 0xf3, 0x95, 0x12,
	0xb9, 0xb8, 0x52, 0x22, 0xbf, 0xae, 0x94, 0xc8, 0xfb, 0x94, 0x61, 0x3a, 0xe5, 0x66, 0x31, 0x5d,
	0xa2, 0x35, 0xdc, 0x20, 0x86, 0xd1, 0xfe, 0xd0, 0xf2, 0x99, 0xb5, 0x1e, 0xe3, 0x63, 0xee, 0xe8,
	0xb4, 0x1b, 0xc4, 0x2e, 0x8e, 0xb3, 0x5f, 0x26, 0xbb, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3a,
	0x55, 0xf7, 0xf2, 0x5f, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// QueryParams queries the allocation module parameters.
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// QueryCellarIDs returns all cellars and current tick ranges
	QueryCellarIDs(ctx context.Context, in *QueryCellarIDsRequest, opts ...grpc.CallOption) (*QueryCellarIDsResponse, error)
	// QueryScheduledCorks returns all scheduled corks
	QueryScheduledCorks(ctx context.Context, in *QueryScheduledCorksRequest, opts ...grpc.CallOption) (*QueryScheduledCorksResponse, error)
	// QueryScheduledBlockHeights returns all scheduled block heights
	QueryScheduledBlockHeights(ctx context.Context, in *QueryScheduledBlockHeightsRequest, opts ...grpc.CallOption) (*QueryScheduledBlockHeightsResponse, error)
	// QueryScheduledCorks returns all scheduled corks at a block height
	QueryScheduledCorksByBlockHeight(ctx context.Context, in *QueryScheduledCorksByBlockHeightRequest, opts ...grpc.CallOption) (*QueryScheduledCorksByBlockHeightResponse, error)
	// QueryScheduledCorks returns all scheduled corks with the specified ID
	QueryScheduledCorksByID(ctx context.Context, in *QueryScheduledCorksByIDRequest, opts ...grpc.CallOption) (*QueryScheduledCorksByIDResponse, error)
	QueryCorkResult(ctx context.Context, in *QueryCorkResultRequest, opts ...grpc.CallOption) (*QueryCorkResultResponse, error)
	QueryCorkResults(ctx context.Context, in *QueryCorkResultsRequest, opts ...grpc.CallOption) (*QueryCorkResultsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/cork.v2.Query/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCellarIDs(ctx context.Context, in *QueryCellarIDsRequest, opts ...grpc.CallOption) (*QueryCellarIDsResponse, error) {
	out := new(QueryCellarIDsResponse)
	err := c.cc.Invoke(ctx, "/cork.v2.Query/QueryCellarIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryScheduledCorks(ctx context.Context, in *QueryScheduledCorksRequest, opts ...grpc.CallOption) (*QueryScheduledCorksResponse, error) {
	out := new(QueryScheduledCorksResponse)
	err := c.cc.Invoke(ctx, "/cork.v2.Query/QueryScheduledCorks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryScheduledBlockHeights(ctx context.Context, in *QueryScheduledBlockHeightsRequest, opts ...grpc.CallOption) (*QueryScheduledBlockHeightsResponse, error) {
	out := new(QueryScheduledBlockHeightsResponse)
	err := c.cc.Invoke(ctx, "/cork.v2.Query/QueryScheduledBlockHeights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryScheduledCorksByBlockHeight(ctx context.Context, in *QueryScheduledCorksByBlockHeightRequest, opts ...grpc.CallOption) (*QueryScheduledCorksByBlockHeightResponse, error) {
	out := new(QueryScheduledCorksByBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/cork.v2.Query/QueryScheduledCorksByBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryScheduledCorksByID(ctx context.Context, in *QueryScheduledCorksByIDRequest, opts ...grpc.CallOption) (*QueryScheduledCorksByIDResponse, error) {
	out := new(QueryScheduledCorksByIDResponse)
	err := c.cc.Invoke(ctx, "/cork.v2.Query/QueryScheduledCorksByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCorkResult(ctx context.Context, in *QueryCorkResultRequest, opts ...grpc.CallOption) (*QueryCorkResultResponse, error) {
	out := new(QueryCorkResultResponse)
	err := c.cc.Invoke(ctx, "/cork.v2.Query/QueryCorkResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCorkResults(ctx context.Context, in *QueryCorkResultsRequest, opts ...grpc.CallOption) (*QueryCorkResultsResponse, error) {
	out := new(QueryCorkResultsResponse)
	err := c.cc.Invoke(ctx, "/cork.v2.Query/QueryCorkResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// QueryParams queries the allocation module parameters.
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// QueryCellarIDs returns all cellars and current tick ranges
	QueryCellarIDs(context.Context, *QueryCellarIDsRequest) (*QueryCellarIDsResponse, error)
	// QueryScheduledCorks returns all scheduled corks
	QueryScheduledCorks(context.Context, *QueryScheduledCorksRequest) (*QueryScheduledCorksResponse, error)
	// QueryScheduledBlockHeights returns all scheduled block heights
	QueryScheduledBlockHeights(context.Context, *QueryScheduledBlockHeightsRequest) (*QueryScheduledBlockHeightsResponse, error)
	// QueryScheduledCorks returns all scheduled corks at a block height
	QueryScheduledCorksByBlockHeight(context.Context, *QueryScheduledCorksByBlockHeightRequest) (*QueryScheduledCorksByBlockHeightResponse, error)
	// QueryScheduledCorks returns all scheduled corks with the specified ID
	QueryScheduledCorksByID(context.Context, *QueryScheduledCorksByIDRequest) (*QueryScheduledCorksByIDResponse, error)
	QueryCorkResult(context.Context, *QueryCorkResultRequest) (*QueryCorkResultResponse, error)
	QueryCorkResults(context.Context, *QueryCorkResultsRequest) (*QueryCorkResultsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (*UnimplementedQueryServer) QueryCellarIDs(ctx context.Context, req *QueryCellarIDsRequest) (*QueryCellarIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCellarIDs not implemented")
}
func (*UnimplementedQueryServer) QueryScheduledCorks(ctx context.Context, req *QueryScheduledCorksRequest) (*QueryScheduledCorksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryScheduledCorks not implemented")
}
func (*UnimplementedQueryServer) QueryScheduledBlockHeights(ctx context.Context, req *QueryScheduledBlockHeightsRequest) (*QueryScheduledBlockHeightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryScheduledBlockHeights not implemented")
}
func (*UnimplementedQueryServer) QueryScheduledCorksByBlockHeight(ctx context.Context, req *QueryScheduledCorksByBlockHeightRequest) (*QueryScheduledCorksByBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryScheduledCorksByBlockHeight not implemented")
}
func (*UnimplementedQueryServer) QueryScheduledCorksByID(ctx context.Context, req *QueryScheduledCorksByIDRequest) (*QueryScheduledCorksByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryScheduledCorksByID not implemented")
}
func (*UnimplementedQueryServer) QueryCorkResult(ctx context.Context, req *QueryCorkResultRequest) (*QueryCorkResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCorkResult not implemented")
}
func (*UnimplementedQueryServer) QueryCorkResults(ctx context.Context, req *QueryCorkResultsRequest) (*QueryCorkResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCorkResults not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cork.v2.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCellarIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCellarIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCellarIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cork.v2.Query/QueryCellarIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCellarIDs(ctx, req.(*QueryCellarIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryScheduledCorks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryScheduledCorksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryScheduledCorks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cork.v2.Query/QueryScheduledCorks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryScheduledCorks(ctx, req.(*QueryScheduledCorksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryScheduledBlockHeights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryScheduledBlockHeightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryScheduledBlockHeights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cork.v2.Query/QueryScheduledBlockHeights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryScheduledBlockHeights(ctx, req.(*QueryScheduledBlockHeightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryScheduledCorksByBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryScheduledCorksByBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryScheduledCorksByBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cork.v2.Query/QueryScheduledCorksByBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryScheduledCorksByBlockHeight(ctx, req.(*QueryScheduledCorksByBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryScheduledCorksByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryScheduledCorksByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryScheduledCorksByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cork.v2.Query/QueryScheduledCorksByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryScheduledCorksByID(ctx, req.(*QueryScheduledCorksByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCorkResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCorkResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCorkResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cork.v2.Query/QueryCorkResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCorkResult(ctx, req.(*QueryCorkResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCorkResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCorkResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCorkResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cork.v2.Query/QueryCorkResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCorkResults(ctx, req.(*QueryCorkResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cork.v2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "QueryCellarIDs",
			Handler:    _Query_QueryCellarIDs_Handler,
		},
		{
			MethodName: "QueryScheduledCorks",
			Handler:    _Query_QueryScheduledCorks_Handler,
		},
		{
			MethodName: "QueryScheduledBlockHeights",
			Handler:    _Query_QueryScheduledBlockHeights_Handler,
		},
		{
			MethodName: "QueryScheduledCorksByBlockHeight",
			Handler:    _Query_QueryScheduledCorksByBlockHeight_Handler,
		},
		{
			MethodName: "QueryScheduledCorksByID",
			Handler:    _Query_QueryScheduledCorksByID_Handler,
		},
		{
			MethodName: "QueryCorkResult",
			Handler:    _Query_QueryCorkResult_Handler,
		},
		{
			MethodName: "QueryCorkResults",
			Handler:    _Query_QueryCorkResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cork/v2/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCellarIDsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCellarIDsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCellarIDsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCellarIDsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCellarIDsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCellarIDsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CellarIds) > 0 {
		for iNdEx := len(m.CellarIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CellarIds[iNdEx])
			copy(dAtA[i:], m.CellarIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.CellarIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryScheduledCorksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryScheduledCorksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryScheduledCorksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryScheduledCorksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryScheduledCorksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryScheduledCorksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Corks) > 0 {
		for iNdEx := len(m.Corks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Corks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryScheduledBlockHeightsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryScheduledBlockHeightsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryScheduledBlockHeightsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryScheduledBlockHeightsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryScheduledBlockHeightsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryScheduledBlockHeightsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHeights) > 0 {
		dAtA3 := make([]byte, len(m.BlockHeights)*10)
		var j2 int
		for _, num := range m.BlockHeights {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintQuery(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryScheduledCorksByBlockHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryScheduledCorksByBlockHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryScheduledCorksByBlockHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryScheduledCorksByBlockHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryScheduledCorksByBlockHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryScheduledCorksByBlockHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Corks) > 0 {
		for iNdEx := len(m.Corks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Corks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryScheduledCorksByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryScheduledCorksByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryScheduledCorksByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryScheduledCorksByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryScheduledCorksByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryScheduledCorksByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Corks) > 0 {
		for iNdEx := len(m.Corks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Corks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCorkResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCorkResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCorkResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCorkResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCorkResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCorkResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CorkResult != nil {
		{
			size, err := m.CorkResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCorkResultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCorkResultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCorkResultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCorkResultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCorkResultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCorkResultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CorkResults) > 0 {
		for iNdEx := len(m.CorkResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CorkResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCellarIDsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCellarIDsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CellarIds) > 0 {
		for _, s := range m.CellarIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryScheduledCorksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryScheduledCorksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Corks) > 0 {
		for _, e := range m.Corks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryScheduledBlockHeightsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryScheduledBlockHeightsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockHeights) > 0 {
		l = 0
		for _, e := range m.BlockHeights {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryScheduledCorksByBlockHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryScheduledCorksByBlockHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Corks) > 0 {
		for _, e := range m.Corks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryScheduledCorksByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryScheduledCorksByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Corks) > 0 {
		for _, e := range m.Corks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCorkResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryCorkResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CorkResult != nil {
		l = m.CorkResult.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCorkResultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCorkResultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CorkResults) > 0 {
		for _, e := range m.CorkResults {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCellarIDsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCellarIDsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCellarIDsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCellarIDsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCellarIDsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCellarIDsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellarIds = append(m.CellarIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryScheduledCorksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryScheduledCorksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryScheduledCorksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryScheduledCorksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryScheduledCorksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryScheduledCorksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Corks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Corks = append(m.Corks, &ScheduledCork{})
			if err := m.Corks[len(m.Corks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryScheduledBlockHeightsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryScheduledBlockHeightsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryScheduledBlockHeightsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryScheduledBlockHeightsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryScheduledBlockHeightsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryScheduledBlockHeightsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BlockHeights = append(m.BlockHeights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BlockHeights) == 0 {
					m.BlockHeights = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BlockHeights = append(m.BlockHeights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryScheduledCorksByBlockHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryScheduledCorksByBlockHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryScheduledCorksByBlockHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryScheduledCorksByBlockHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryScheduledCorksByBlockHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryScheduledCorksByBlockHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Corks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Corks = append(m.Corks, &ScheduledCork{})
			if err := m.Corks[len(m.Corks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryScheduledCorksByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryScheduledCorksByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryScheduledCorksByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryScheduledCorksByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryScheduledCorksByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryScheduledCorksByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Corks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Corks = append(m.Corks, &ScheduledCork{})
			if err := m.Corks[len(m.Corks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCorkResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCorkResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCorkResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCorkResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCorkResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCorkResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorkResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorkResult == nil {
				m.CorkResult = &CorkResult{}
			}
			if err := m.CorkResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCorkResultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCorkResultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCorkResultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCorkResultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCorkResultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCorkResultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorkResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorkResults = append(m.CorkResults, &CorkResult{})
			if err := m.CorkResults[len(m.CorkResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
