// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: addresses/v1/query.proto

package v1

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryAddressMappingsRequest struct {
	Pagination query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryAddressMappingsRequest) Reset()         { *m = QueryAddressMappingsRequest{} }
func (m *QueryAddressMappingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAddressMappingsRequest) ProtoMessage()    {}
func (*QueryAddressMappingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe10bad8a6f145d, []int{0}
}
func (m *QueryAddressMappingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressMappingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressMappingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressMappingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressMappingsRequest.Merge(m, src)
}
func (m *QueryAddressMappingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressMappingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressMappingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressMappingsRequest proto.InternalMessageInfo

func (m *QueryAddressMappingsRequest) GetPagination() query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return query.PageRequest{}
}

type QueryAddressMappingsResponse struct {
	AddressMappings []*AddressMapping  `protobuf:"bytes,1,rep,name=address_mappings,json=addressMappings,proto3" json:"address_mappings,omitempty"`
	Pagination      query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryAddressMappingsResponse) Reset()         { *m = QueryAddressMappingsResponse{} }
func (m *QueryAddressMappingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAddressMappingsResponse) ProtoMessage()    {}
func (*QueryAddressMappingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe10bad8a6f145d, []int{1}
}
func (m *QueryAddressMappingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressMappingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressMappingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressMappingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressMappingsResponse.Merge(m, src)
}
func (m *QueryAddressMappingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressMappingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressMappingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressMappingsResponse proto.InternalMessageInfo

func (m *QueryAddressMappingsResponse) GetAddressMappings() []*AddressMapping {
	if m != nil {
		return m.AddressMappings
	}
	return nil
}

func (m *QueryAddressMappingsResponse) GetPagination() query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return query.PageResponse{}
}

type QueryAddressMappingByEVMAddressRequest struct {
	EvmAddress string `protobuf:"bytes,1,opt,name=evm_address,json=evmAddress,proto3" json:"evm_address,omitempty"`
}

func (m *QueryAddressMappingByEVMAddressRequest) Reset() {
	*m = QueryAddressMappingByEVMAddressRequest{}
}
func (m *QueryAddressMappingByEVMAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAddressMappingByEVMAddressRequest) ProtoMessage()    {}
func (*QueryAddressMappingByEVMAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe10bad8a6f145d, []int{2}
}
func (m *QueryAddressMappingByEVMAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressMappingByEVMAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressMappingByEVMAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressMappingByEVMAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressMappingByEVMAddressRequest.Merge(m, src)
}
func (m *QueryAddressMappingByEVMAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressMappingByEVMAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressMappingByEVMAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressMappingByEVMAddressRequest proto.InternalMessageInfo

func (m *QueryAddressMappingByEVMAddressRequest) GetEvmAddress() string {
	if m != nil {
		return m.EvmAddress
	}
	return ""
}

type QueryAddressMappingByEVMAddressResponse struct {
	CosmosAddress string `protobuf:"bytes,1,opt,name=cosmos_address,json=cosmosAddress,proto3" json:"cosmos_address,omitempty"`
	EvmAddress    string `protobuf:"bytes,2,opt,name=evm_address,json=evmAddress,proto3" json:"evm_address,omitempty"`
}

func (m *QueryAddressMappingByEVMAddressResponse) Reset() {
	*m = QueryAddressMappingByEVMAddressResponse{}
}
func (m *QueryAddressMappingByEVMAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAddressMappingByEVMAddressResponse) ProtoMessage()    {}
func (*QueryAddressMappingByEVMAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe10bad8a6f145d, []int{3}
}
func (m *QueryAddressMappingByEVMAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressMappingByEVMAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressMappingByEVMAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressMappingByEVMAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressMappingByEVMAddressResponse.Merge(m, src)
}
func (m *QueryAddressMappingByEVMAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressMappingByEVMAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressMappingByEVMAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressMappingByEVMAddressResponse proto.InternalMessageInfo

func (m *QueryAddressMappingByEVMAddressResponse) GetCosmosAddress() string {
	if m != nil {
		return m.CosmosAddress
	}
	return ""
}

func (m *QueryAddressMappingByEVMAddressResponse) GetEvmAddress() string {
	if m != nil {
		return m.EvmAddress
	}
	return ""
}

type QueryAddressMappingByCosmosAddressRequest struct {
	CosmosAddress string `protobuf:"bytes,1,opt,name=cosmos_address,json=cosmosAddress,proto3" json:"cosmos_address,omitempty"`
}

func (m *QueryAddressMappingByCosmosAddressRequest) Reset() {
	*m = QueryAddressMappingByCosmosAddressRequest{}
}
func (m *QueryAddressMappingByCosmosAddressRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAddressMappingByCosmosAddressRequest) ProtoMessage() {}
func (*QueryAddressMappingByCosmosAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe10bad8a6f145d, []int{4}
}
func (m *QueryAddressMappingByCosmosAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressMappingByCosmosAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressMappingByCosmosAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressMappingByCosmosAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressMappingByCosmosAddressRequest.Merge(m, src)
}
func (m *QueryAddressMappingByCosmosAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressMappingByCosmosAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressMappingByCosmosAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressMappingByCosmosAddressRequest proto.InternalMessageInfo

func (m *QueryAddressMappingByCosmosAddressRequest) GetCosmosAddress() string {
	if m != nil {
		return m.CosmosAddress
	}
	return ""
}

type QueryAddressMappingByCosmosAddressResponse struct {
	CosmosAddress string `protobuf:"bytes,1,opt,name=cosmos_address,json=cosmosAddress,proto3" json:"cosmos_address,omitempty"`
	EvmAddress    string `protobuf:"bytes,2,opt,name=evm_address,json=evmAddress,proto3" json:"evm_address,omitempty"`
}

func (m *QueryAddressMappingByCosmosAddressResponse) Reset() {
	*m = QueryAddressMappingByCosmosAddressResponse{}
}
func (m *QueryAddressMappingByCosmosAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAddressMappingByCosmosAddressResponse) ProtoMessage() {}
func (*QueryAddressMappingByCosmosAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe10bad8a6f145d, []int{5}
}
func (m *QueryAddressMappingByCosmosAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressMappingByCosmosAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressMappingByCosmosAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressMappingByCosmosAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressMappingByCosmosAddressResponse.Merge(m, src)
}
func (m *QueryAddressMappingByCosmosAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressMappingByCosmosAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressMappingByCosmosAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressMappingByCosmosAddressResponse proto.InternalMessageInfo

func (m *QueryAddressMappingByCosmosAddressResponse) GetCosmosAddress() string {
	if m != nil {
		return m.CosmosAddress
	}
	return ""
}

func (m *QueryAddressMappingByCosmosAddressResponse) GetEvmAddress() string {
	if m != nil {
		return m.EvmAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryAddressMappingsRequest)(nil), "addresses.v1.QueryAddressMappingsRequest")
	proto.RegisterType((*QueryAddressMappingsResponse)(nil), "addresses.v1.QueryAddressMappingsResponse")
	proto.RegisterType((*QueryAddressMappingByEVMAddressRequest)(nil), "addresses.v1.QueryAddressMappingByEVMAddressRequest")
	proto.RegisterType((*QueryAddressMappingByEVMAddressResponse)(nil), "addresses.v1.QueryAddressMappingByEVMAddressResponse")
	proto.RegisterType((*QueryAddressMappingByCosmosAddressRequest)(nil), "addresses.v1.QueryAddressMappingByCosmosAddressRequest")
	proto.RegisterType((*QueryAddressMappingByCosmosAddressResponse)(nil), "addresses.v1.QueryAddressMappingByCosmosAddressResponse")
}

func init() { proto.RegisterFile("addresses/v1/query.proto", fileDescriptor_ebe10bad8a6f145d) }

var fileDescriptor_ebe10bad8a6f145d = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcf, 0x6e, 0xd3, 0x30,
	0x18, 0xaf, 0xcb, 0x40, 0xc2, 0xe5, 0x9f, 0xac, 0x1d, 0xaa, 0x50, 0xa5, 0x53, 0x24, 0xb6, 0xae,
	0x07, 0x9b, 0x96, 0xa1, 0x21, 0xc4, 0x01, 0x82, 0x10, 0x20, 0x51, 0x04, 0x39, 0x70, 0xe0, 0x32,
	0xb9, 0x9b, 0x65, 0x02, 0x4b, 0x9c, 0xd6, 0x69, 0x44, 0x35, 0xed, 0xc2, 0x13, 0x20, 0xf1, 0x00,
	0xbc, 0x05, 0xcf, 0xb0, 0xe3, 0x04, 0x17, 0x4e, 0x08, 0x52, 0x1e, 0x04, 0xd5, 0x76, 0xb7, 0x64,
	0x44, 0x24, 0x95, 0xb8, 0x45, 0xf6, 0xef, 0xfb, 0xfd, 0xf9, 0xbe, 0x2f, 0x86, 0x4d, 0xba, 0xb7,
	0x37, 0x66, 0x52, 0x32, 0x49, 0x92, 0x1e, 0x19, 0x4d, 0xd8, 0x78, 0x8a, 0xa3, 0xb1, 0x88, 0x05,
	0xba, 0x74, 0x72, 0x83, 0x93, 0x9e, 0xd5, 0xca, 0xe1, 0x4e, 0xaf, 0x14, 0xd6, 0x5a, 0xe5, 0x82,
	0x0b, 0xf5, 0x49, 0xe6, 0x5f, 0xe6, 0xb4, 0xc5, 0x85, 0xe0, 0xfb, 0x8c, 0xd0, 0xc8, 0x27, 0x34,
	0x0c, 0x45, 0x4c, 0x63, 0x5f, 0x84, 0x8b, 0x9a, 0xee, 0xae, 0x90, 0x81, 0x90, 0x64, 0x48, 0x25,
	0xd3, 0xc2, 0x24, 0xe9, 0x0d, 0x59, 0x4c, 0x7b, 0x24, 0xa2, 0xdc, 0x0f, 0x15, 0x58, 0x63, 0x9d,
	0x77, 0xf0, 0xfa, 0xcb, 0x39, 0xe2, 0x81, 0xd6, 0x1d, 0xd0, 0x28, 0xf2, 0x43, 0x2e, 0x3d, 0x36,
	0x9a, 0x30, 0x19, 0xa3, 0x67, 0x10, 0x9e, 0x96, 0x34, 0xc1, 0x1a, 0xe8, 0x34, 0xfa, 0xeb, 0x58,
	0xf3, 0xe3, 0x39, 0x3f, 0xd6, 0xc1, 0x0c, 0x3f, 0x7e, 0x41, 0x39, 0x33, 0xb5, 0xee, 0xca, 0xd1,
	0x8f, 0x76, 0xcd, 0xcb, 0xd4, 0x3b, 0x5f, 0x00, 0x6c, 0x15, 0xab, 0xc9, 0x48, 0x84, 0x92, 0xa1,
	0xc7, 0xf0, 0x9a, 0x69, 0xc0, 0x4e, 0x60, 0xee, 0x9a, 0x60, 0xed, 0x5c, 0xa7, 0xd1, 0x6f, 0xe1,
	0x6c, 0xd3, 0x70, 0x9e, 0xc0, 0xbb, 0x4a, 0xf3, 0x84, 0x68, 0x90, 0xf3, 0x5d, 0x57, 0xbe, 0x37,
	0x4a, 0x7d, 0x6b, 0x17, 0x05, 0xc6, 0x9f, 0xc2, 0xf5, 0x02, 0xdf, 0xee, 0xf4, 0xd1, 0xab, 0x81,
	0x39, 0x5a, 0x34, 0xac, 0x0d, 0x1b, 0x2c, 0x09, 0x76, 0x8c, 0x1f, 0xd5, 0xb1, 0x8b, 0x1e, 0x64,
	0x49, 0x60, 0x70, 0xce, 0x08, 0x6e, 0x94, 0x52, 0x99, 0x6e, 0xdc, 0x80, 0x57, 0xb4, 0xe3, 0x33,
	0x74, 0x97, 0xf5, 0xa9, 0x81, 0x9f, 0x95, 0xac, 0xff, 0x25, 0xe9, 0xc1, 0xcd, 0x42, 0xc9, 0x87,
	0x59, 0x9a, 0x45, 0x80, 0x6a, 0xa2, 0x4e, 0x0c, 0xbb, 0x55, 0x38, 0xff, 0x6f, 0x92, 0x7e, 0xba,
	0x02, 0xcf, 0x2b, 0x59, 0xf4, 0x19, 0xc0, 0xd5, 0xa2, 0x55, 0x42, 0x9b, 0xf9, 0x45, 0xf9, 0xc7,
	0x72, 0x5b, 0xdd, 0x2a, 0x50, 0x9d, 0xc0, 0xb9, 0xf9, 0xe1, 0xdb, 0xef, 0x4f, 0xf5, 0x2e, 0xea,
	0x10, 0x29, 0x82, 0x80, 0xed, 0xfb, 0x6c, 0x4c, 0x8a, 0x7e, 0xdc, 0x93, 0xbd, 0x45, 0x5f, 0x01,
	0x6c, 0x97, 0x4c, 0x1a, 0x6d, 0x95, 0x3a, 0x28, 0xd8, 0x31, 0xeb, 0xf6, 0x92, 0x55, 0x26, 0x82,
	0xab, 0x22, 0xdc, 0x43, 0x77, 0xab, 0x46, 0x20, 0x2c, 0x09, 0xc8, 0x41, 0x66, 0x22, 0x87, 0xe8,
	0x17, 0x80, 0x4e, 0xf9, 0xdc, 0xd1, 0x76, 0x05, 0x87, 0x45, 0xdb, 0x67, 0xdd, 0x59, 0xbe, 0xd0,
	0xa4, 0x7b, 0xa2, 0xd2, 0xb9, 0xe8, 0x7e, 0xe5, 0x74, 0xe6, 0x95, 0x3c, 0xc8, 0x6f, 0xe6, 0xa1,
	0xfb, 0xfc, 0x28, 0xb5, 0xc1, 0x71, 0x6a, 0x83, 0x9f, 0xa9, 0x0d, 0x3e, 0xce, 0xec, 0xda, 0xf1,
	0xcc, 0xae, 0x7d, 0x9f, 0xd9, 0xb5, 0xd7, 0x5b, 0xdc, 0x8f, 0xdf, 0x4c, 0x86, 0x78, 0x57, 0x04,
	0x24, 0x62, 0x9c, 0x4f, 0xdf, 0x26, 0x19, 0xb5, 0x64, 0x9b, 0xbc, 0xcf, 0x48, 0xc6, 0xd3, 0x48,
	0x09, 0x0f, 0x2f, 0xa8, 0x97, 0xf6, 0xd6, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xee, 0x59, 0x34,
	0x97, 0x11, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	QueryAddressMappings(ctx context.Context, in *QueryAddressMappingsRequest, opts ...grpc.CallOption) (*QueryAddressMappingsResponse, error)
	QueryAddressMappingByEVMAddress(ctx context.Context, in *QueryAddressMappingByEVMAddressRequest, opts ...grpc.CallOption) (*QueryAddressMappingByEVMAddressResponse, error)
	QueryAddressMappingByCosmosAddress(ctx context.Context, in *QueryAddressMappingByCosmosAddressRequest, opts ...grpc.CallOption) (*QueryAddressMappingByCosmosAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryAddressMappings(ctx context.Context, in *QueryAddressMappingsRequest, opts ...grpc.CallOption) (*QueryAddressMappingsResponse, error) {
	out := new(QueryAddressMappingsResponse)
	err := c.cc.Invoke(ctx, "/addresses.v1.Query/QueryAddressMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAddressMappingByEVMAddress(ctx context.Context, in *QueryAddressMappingByEVMAddressRequest, opts ...grpc.CallOption) (*QueryAddressMappingByEVMAddressResponse, error) {
	out := new(QueryAddressMappingByEVMAddressResponse)
	err := c.cc.Invoke(ctx, "/addresses.v1.Query/QueryAddressMappingByEVMAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAddressMappingByCosmosAddress(ctx context.Context, in *QueryAddressMappingByCosmosAddressRequest, opts ...grpc.CallOption) (*QueryAddressMappingByCosmosAddressResponse, error) {
	out := new(QueryAddressMappingByCosmosAddressResponse)
	err := c.cc.Invoke(ctx, "/addresses.v1.Query/QueryAddressMappingByCosmosAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	QueryAddressMappings(context.Context, *QueryAddressMappingsRequest) (*QueryAddressMappingsResponse, error)
	QueryAddressMappingByEVMAddress(context.Context, *QueryAddressMappingByEVMAddressRequest) (*QueryAddressMappingByEVMAddressResponse, error)
	QueryAddressMappingByCosmosAddress(context.Context, *QueryAddressMappingByCosmosAddressRequest) (*QueryAddressMappingByCosmosAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryAddressMappings(ctx context.Context, req *QueryAddressMappingsRequest) (*QueryAddressMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAddressMappings not implemented")
}
func (*UnimplementedQueryServer) QueryAddressMappingByEVMAddress(ctx context.Context, req *QueryAddressMappingByEVMAddressRequest) (*QueryAddressMappingByEVMAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAddressMappingByEVMAddress not implemented")
}
func (*UnimplementedQueryServer) QueryAddressMappingByCosmosAddress(ctx context.Context, req *QueryAddressMappingByCosmosAddressRequest) (*QueryAddressMappingByCosmosAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAddressMappingByCosmosAddress not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryAddressMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAddressMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/addresses.v1.Query/QueryAddressMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAddressMappings(ctx, req.(*QueryAddressMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAddressMappingByEVMAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressMappingByEVMAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAddressMappingByEVMAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/addresses.v1.Query/QueryAddressMappingByEVMAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAddressMappingByEVMAddress(ctx, req.(*QueryAddressMappingByEVMAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAddressMappingByCosmosAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressMappingByCosmosAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAddressMappingByCosmosAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/addresses.v1.Query/QueryAddressMappingByCosmosAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAddressMappingByCosmosAddress(ctx, req.(*QueryAddressMappingByCosmosAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "addresses.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryAddressMappings",
			Handler:    _Query_QueryAddressMappings_Handler,
		},
		{
			MethodName: "QueryAddressMappingByEVMAddress",
			Handler:    _Query_QueryAddressMappingByEVMAddress_Handler,
		},
		{
			MethodName: "QueryAddressMappingByCosmosAddress",
			Handler:    _Query_QueryAddressMappingByCosmosAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "addresses/v1/query.proto",
}

func (m *QueryAddressMappingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressMappingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressMappingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAddressMappingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressMappingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressMappingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.AddressMappings) > 0 {
		for iNdEx := len(m.AddressMappings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddressMappings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressMappingByEVMAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressMappingByEVMAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressMappingByEVMAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmAddress) > 0 {
		i -= len(m.EvmAddress)
		copy(dAtA[i:], m.EvmAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EvmAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressMappingByEVMAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressMappingByEVMAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressMappingByEVMAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmAddress) > 0 {
		i -= len(m.EvmAddress)
		copy(dAtA[i:], m.EvmAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EvmAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CosmosAddress) > 0 {
		i -= len(m.CosmosAddress)
		copy(dAtA[i:], m.CosmosAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CosmosAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressMappingByCosmosAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressMappingByCosmosAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressMappingByCosmosAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CosmosAddress) > 0 {
		i -= len(m.CosmosAddress)
		copy(dAtA[i:], m.CosmosAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CosmosAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressMappingByCosmosAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressMappingByCosmosAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressMappingByCosmosAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmAddress) > 0 {
		i -= len(m.EvmAddress)
		copy(dAtA[i:], m.EvmAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EvmAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CosmosAddress) > 0 {
		i -= len(m.CosmosAddress)
		copy(dAtA[i:], m.CosmosAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CosmosAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAddressMappingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAddressMappingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AddressMappings) > 0 {
		for _, e := range m.AddressMappings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAddressMappingByEVMAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EvmAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressMappingByEVMAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CosmosAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EvmAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressMappingByCosmosAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CosmosAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressMappingByCosmosAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CosmosAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EvmAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAddressMappingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressMappingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressMappingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressMappingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressMappingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressMappingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressMappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressMappings = append(m.AddressMappings, &AddressMapping{})
			if err := m.AddressMappings[len(m.AddressMappings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressMappingByEVMAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressMappingByEVMAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressMappingByEVMAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressMappingByEVMAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressMappingByEVMAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressMappingByEVMAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressMappingByCosmosAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressMappingByCosmosAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressMappingByCosmosAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressMappingByCosmosAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressMappingByCosmosAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressMappingByCosmosAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
