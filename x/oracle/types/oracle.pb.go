// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oracle/v1/oracle.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UniswapData is an implementation of OracleData
type UniswapData struct {
	Pairs []UniswapPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs"`
}

func (m *UniswapData) Reset()         { *m = UniswapData{} }
func (m *UniswapData) String() string { return proto.CompactTextString(m) }
func (*UniswapData) ProtoMessage()    {}
func (*UniswapData) Descriptor() ([]byte, []int) {
	return fileDescriptor_652b57db11528d07, []int{0}
}
func (m *UniswapData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniswapData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniswapData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniswapData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniswapData.Merge(m, src)
}
func (m *UniswapData) XXX_Size() int {
	return m.Size()
}
func (m *UniswapData) XXX_DiscardUnknown() {
	xxx_messageInfo_UniswapData.DiscardUnknown(m)
}

var xxx_messageInfo_UniswapData proto.InternalMessageInfo

func (m *UniswapData) GetPairs() []UniswapPair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

// UniswapDataAlt is an implementation of OracleData
type UniswapDataAlt struct {
	Pairs []UniswapPairAlt `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs"`
}

func (m *UniswapDataAlt) Reset()         { *m = UniswapDataAlt{} }
func (m *UniswapDataAlt) String() string { return proto.CompactTextString(m) }
func (*UniswapDataAlt) ProtoMessage()    {}
func (*UniswapDataAlt) Descriptor() ([]byte, []int) {
	return fileDescriptor_652b57db11528d07, []int{1}
}
func (m *UniswapDataAlt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniswapDataAlt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniswapDataAlt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniswapDataAlt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniswapDataAlt.Merge(m, src)
}
func (m *UniswapDataAlt) XXX_Size() int {
	return m.Size()
}
func (m *UniswapDataAlt) XXX_DiscardUnknown() {
	xxx_messageInfo_UniswapDataAlt.DiscardUnknown(m)
}

var xxx_messageInfo_UniswapDataAlt proto.InternalMessageInfo

func (m *UniswapDataAlt) GetPairs() []UniswapPairAlt {
	if m != nil {
		return m.Pairs
	}
	return nil
}

// UniswapPair represents the necessary data for a uniswap pair
type UniswapPair struct {
	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Reserve0    string       `protobuf:"bytes,2,opt,name=reserve0,proto3" json:"reserve0"`
	Reserve1    string       `protobuf:"bytes,3,opt,name=reserve1,proto3" json:"reserve1"`
	ReserveUsd  string       `protobuf:"bytes,4,opt,name=reserve_usd,json=reserveUsd,proto3" json:"reserveUSD"`
	Token0      UniswapToken `protobuf:"bytes,5,opt,name=token0,proto3" json:"token0"`
	Token1      UniswapToken `protobuf:"bytes,6,opt,name=token1,proto3" json:"token1"`
	Token0Price string       `protobuf:"bytes,7,opt,name=token0_price,json=token0Price,proto3" json:"token0Price"`
	Token1Price string       `protobuf:"bytes,8,opt,name=token1_price,json=token1Price,proto3" json:"token1Price"`
	TotalSupply string       `protobuf:"bytes,9,opt,name=total_supply,json=totalSupply,proto3" json:"totalSupply"`
}

func (m *UniswapPair) Reset()         { *m = UniswapPair{} }
func (m *UniswapPair) String() string { return proto.CompactTextString(m) }
func (*UniswapPair) ProtoMessage()    {}
func (*UniswapPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_652b57db11528d07, []int{2}
}
func (m *UniswapPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniswapPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniswapPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniswapPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniswapPair.Merge(m, src)
}
func (m *UniswapPair) XXX_Size() int {
	return m.Size()
}
func (m *UniswapPair) XXX_DiscardUnknown() {
	xxx_messageInfo_UniswapPair.DiscardUnknown(m)
}

var xxx_messageInfo_UniswapPair proto.InternalMessageInfo

func (m *UniswapPair) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UniswapPair) GetReserve0() string {
	if m != nil {
		return m.Reserve0
	}
	return ""
}

func (m *UniswapPair) GetReserve1() string {
	if m != nil {
		return m.Reserve1
	}
	return ""
}

func (m *UniswapPair) GetReserveUsd() string {
	if m != nil {
		return m.ReserveUsd
	}
	return ""
}

func (m *UniswapPair) GetToken0() UniswapToken {
	if m != nil {
		return m.Token0
	}
	return UniswapToken{}
}

func (m *UniswapPair) GetToken1() UniswapToken {
	if m != nil {
		return m.Token1
	}
	return UniswapToken{}
}

func (m *UniswapPair) GetToken0Price() string {
	if m != nil {
		return m.Token0Price
	}
	return ""
}

func (m *UniswapPair) GetToken1Price() string {
	if m != nil {
		return m.Token1Price
	}
	return ""
}

func (m *UniswapPair) GetTotalSupply() string {
	if m != nil {
		return m.TotalSupply
	}
	return ""
}

type UniswapPairAlt struct {
	Id          string                                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Reserve0    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=reserve0,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserve0"`
	Reserve1    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=reserve1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserve1"`
	ReserveUsd  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=reserve_usd,json=reserveUsd,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserveUSD"`
	Token0      UniswapToken                           `protobuf:"bytes,5,opt,name=token0,proto3" json:"token0"`
	Token1      UniswapToken                           `protobuf:"bytes,6,opt,name=token1,proto3" json:"token1"`
	Token0Price github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=token0_price,json=token0Price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"token0Price"`
	Token1Price github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=token1_price,json=token1Price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"token1Price"`
	TotalSupply github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=total_supply,json=totalSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"totalSupply"`
}

func (m *UniswapPairAlt) Reset()         { *m = UniswapPairAlt{} }
func (m *UniswapPairAlt) String() string { return proto.CompactTextString(m) }
func (*UniswapPairAlt) ProtoMessage()    {}
func (*UniswapPairAlt) Descriptor() ([]byte, []int) {
	return fileDescriptor_652b57db11528d07, []int{3}
}
func (m *UniswapPairAlt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniswapPairAlt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniswapPairAlt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniswapPairAlt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniswapPairAlt.Merge(m, src)
}
func (m *UniswapPairAlt) XXX_Size() int {
	return m.Size()
}
func (m *UniswapPairAlt) XXX_DiscardUnknown() {
	xxx_messageInfo_UniswapPairAlt.DiscardUnknown(m)
}

var xxx_messageInfo_UniswapPairAlt proto.InternalMessageInfo

func (m *UniswapPairAlt) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UniswapPairAlt) GetToken0() UniswapToken {
	if m != nil {
		return m.Token0
	}
	return UniswapToken{}
}

func (m *UniswapPairAlt) GetToken1() UniswapToken {
	if m != nil {
		return m.Token1
	}
	return UniswapToken{}
}

// UniswapToken is the returned uniswap token representation
type UniswapToken struct {
	Decimals string `protobuf:"bytes,1,opt,name=decimals,proto3" json:"decimals"`
	Id       string `protobuf:"bytes,2,opt,name=id,proto3" json:"id"`
}

func (m *UniswapToken) Reset()         { *m = UniswapToken{} }
func (m *UniswapToken) String() string { return proto.CompactTextString(m) }
func (*UniswapToken) ProtoMessage()    {}
func (*UniswapToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_652b57db11528d07, []int{4}
}
func (m *UniswapToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniswapToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniswapToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniswapToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniswapToken.Merge(m, src)
}
func (m *UniswapToken) XXX_Size() int {
	return m.Size()
}
func (m *UniswapToken) XXX_DiscardUnknown() {
	xxx_messageInfo_UniswapToken.DiscardUnknown(m)
}

var xxx_messageInfo_UniswapToken proto.InternalMessageInfo

func (m *UniswapToken) GetDecimals() string {
	if m != nil {
		return m.Decimals
	}
	return ""
}

func (m *UniswapToken) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*UniswapData)(nil), "oracle.v1.UniswapData")
	proto.RegisterType((*UniswapDataAlt)(nil), "oracle.v1.UniswapDataAlt")
	proto.RegisterType((*UniswapPair)(nil), "oracle.v1.UniswapPair")
	proto.RegisterType((*UniswapPairAlt)(nil), "oracle.v1.UniswapPairAlt")
	proto.RegisterType((*UniswapToken)(nil), "oracle.v1.UniswapToken")
}

func init() { proto.RegisterFile("oracle/v1/oracle.proto", fileDescriptor_652b57db11528d07) }

var fileDescriptor_652b57db11528d07 = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x41, 0x8f, 0x93, 0x40,
	0x14, 0x2e, 0x74, 0x5b, 0xb7, 0x43, 0x53, 0x13, 0x62, 0x2a, 0x7a, 0x80, 0xa6, 0x07, 0xd3, 0xc4,
	0x08, 0x3b, 0x35, 0x5e, 0x8c, 0xc6, 0xb4, 0xa9, 0xf1, 0xda, 0xb0, 0xee, 0x1e, 0x4c, 0x4c, 0xcb,
	0xc2, 0x04, 0xc7, 0x85, 0x1d, 0xc2, 0xd0, 0x6a, 0xff, 0x85, 0x3f, 0xab, 0xc7, 0x3d, 0x1a, 0x0f,
	0x68, 0xda, 0x1b, 0xbf, 0xc2, 0x00, 0xe3, 0x64, 0x76, 0x4b, 0x0f, 0xed, 0xc9, 0x13, 0x6f, 0xde,
	0x7c, 0xdf, 0xc7, 0x7b, 0xbc, 0x8f, 0x07, 0xba, 0x24, 0x76, 0xdc, 0x00, 0x59, 0x4b, 0x68, 0x95,
	0x91, 0x19, 0xc5, 0x24, 0x21, 0x6a, 0x8b, 0x9d, 0x96, 0xf0, 0xe9, 0x23, 0x9f, 0xf8, 0xa4, 0xc8,
	0x5a, 0x79, 0x54, 0x02, 0xfa, 0x23, 0xa0, 0x5c, 0xdc, 0x60, 0xfa, 0xcd, 0x89, 0x26, 0x4e, 0xe2,
	0xa8, 0x43, 0xd0, 0x88, 0x1c, 0x1c, 0x53, 0x4d, 0xea, 0xd5, 0x07, 0xca, 0xb0, 0x6b, 0x72, 0xbe,
	0xc9, 0x60, 0x53, 0x07, 0xc7, 0xe3, 0x93, 0x75, 0x6a, 0xd4, 0xec, 0x12, 0xda, 0xff, 0x00, 0x3a,
	0x82, 0xc4, 0x28, 0x48, 0xd4, 0x57, 0x77, 0x55, 0x9e, 0x54, 0xab, 0x8c, 0x82, 0xe4, 0xae, 0xd0,
	0xba, 0xce, 0x8b, 0xc9, 0xef, 0xd5, 0x2e, 0x90, 0xb1, 0xa7, 0x49, 0x3d, 0x69, 0xd0, 0x1a, 0x37,
	0xb3, 0xd4, 0x90, 0xb1, 0x67, 0xcb, 0xd8, 0x53, 0x07, 0xe0, 0x34, 0x46, 0x14, 0xc5, 0x4b, 0x74,
	0xa6, 0xc9, 0xc5, 0x6d, 0x3b, 0x4b, 0x0d, 0x9e, 0xb3, 0x79, 0x24, 0x20, 0xa1, 0x56, 0xdf, 0x41,
	0x42, 0x8e, 0x84, 0xaa, 0x05, 0x14, 0x16, 0xcf, 0x16, 0xd4, 0xd3, 0x4e, 0x0a, 0x70, 0x27, 0x4b,
	0x0d, 0xc0, 0xd2, 0x17, 0xe7, 0x13, 0x9b, 0xc7, 0xd4, 0x53, 0xdf, 0x81, 0x66, 0x42, 0xae, 0xd1,
	0xcd, 0x99, 0xd6, 0xe8, 0x49, 0x03, 0x65, 0xf8, 0x78, 0xb7, 0xc9, 0x8f, 0xf9, 0xfd, 0xb8, 0x93,
	0xb7, 0x98, 0xa5, 0x06, 0x83, 0xdb, 0xec, 0xc9, 0x05, 0xa0, 0xd6, 0x3c, 0x44, 0x00, 0x32, 0x01,
	0xa8, 0x0e, 0x41, 0xbb, 0x94, 0x9a, 0x45, 0x31, 0x76, 0x91, 0xf6, 0xa0, 0xa8, 0xf9, 0x61, 0x96,
	0x1a, 0x4a, 0x99, 0x9f, 0xe6, 0x69, 0x5b, 0x3c, 0x70, 0x0e, 0x64, 0x9c, 0xd3, 0x7b, 0x1c, 0x28,
	0x72, 0xa0, 0xc0, 0x49, 0x9c, 0x60, 0x46, 0x17, 0x51, 0x14, 0xac, 0xb4, 0x96, 0xc8, 0x49, 0x9c,
	0xe0, 0xbc, 0x48, 0xdb, 0xe2, 0xa1, 0xff, 0xbb, 0xc1, 0x4d, 0xc1, 0x46, 0xbd, 0x77, 0x9a, 0x97,
	0x3b, 0xd3, 0x7c, 0x9d, 0x37, 0xfc, 0x2b, 0x35, 0x9e, 0xf9, 0x38, 0xf9, 0xb2, 0xb8, 0x32, 0x5d,
	0x12, 0x5a, 0x2e, 0xa1, 0x21, 0xa1, 0xec, 0xf1, 0x82, 0x7a, 0xd7, 0x56, 0xb2, 0x8a, 0x10, 0x35,
	0x27, 0xc8, 0xdd, 0x33, 0xfb, 0xcb, 0x9d, 0xd9, 0x1f, 0xaf, 0x2b, 0x3a, 0xe5, 0x73, 0x95, 0x53,
	0xde, 0x1c, 0x2c, 0xfd, 0xff, 0xfa, 0x6a, 0x5e, 0xe9, 0xab, 0xb7, 0x07, 0x77, 0xb8, 0xdf, 0x85,
	0xf3, 0x4a, 0x17, 0x1e, 0xfb, 0x86, 0x2a, 0xcf, 0xce, 0x2b, 0x3d, 0x7b, 0xd4, 0x1b, 0xf6, 0x38,
	0x7c, 0x0a, 0xda, 0xe2, 0xd7, 0xcc, 0x57, 0x8d, 0x87, 0x5c, 0x1c, 0x3a, 0x01, 0x65, 0x26, 0x2f,
	0x56, 0xcd, 0xbf, 0x9c, 0xcd, 0x23, 0xf6, 0x23, 0xc8, 0xf7, 0x7f, 0x84, 0xf1, 0xfb, 0xf5, 0x46,
	0x97, 0x6e, 0x37, 0xba, 0xf4, 0x67, 0xa3, 0x4b, 0x3f, 0xb6, 0x7a, 0xed, 0x76, 0xab, 0xd7, 0x7e,
	0x6e, 0xf5, 0xda, 0xa7, 0xe7, 0x42, 0xbd, 0x11, 0xf2, 0xfd, 0xd5, 0xd7, 0xa5, 0x45, 0x49, 0x18,
	0xa2, 0x00, 0xa3, 0xd8, 0xfa, 0xce, 0x56, 0x7e, 0x59, 0xf8, 0x55, 0xb3, 0x58, 0xec, 0x2f, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x45, 0xcc, 0xbd, 0xe8, 0x13, 0x06, 0x00, 0x00,
}

func (m *UniswapData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniswapData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniswapData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UniswapDataAlt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniswapDataAlt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniswapDataAlt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UniswapPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniswapPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniswapPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalSupply) > 0 {
		i -= len(m.TotalSupply)
		copy(dAtA[i:], m.TotalSupply)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.TotalSupply)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Token1Price) > 0 {
		i -= len(m.Token1Price)
		copy(dAtA[i:], m.Token1Price)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Token1Price)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Token0Price) > 0 {
		i -= len(m.Token0Price)
		copy(dAtA[i:], m.Token0Price)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Token0Price)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.Token1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Token0.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ReserveUsd) > 0 {
		i -= len(m.ReserveUsd)
		copy(dAtA[i:], m.ReserveUsd)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.ReserveUsd)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Reserve1) > 0 {
		i -= len(m.Reserve1)
		copy(dAtA[i:], m.Reserve1)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Reserve1)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reserve0) > 0 {
		i -= len(m.Reserve0)
		copy(dAtA[i:], m.Reserve0)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Reserve0)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UniswapPairAlt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniswapPairAlt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniswapPairAlt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalSupply.Size()
		i -= size
		if _, err := m.TotalSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.Token1Price.Size()
		i -= size
		if _, err := m.Token1Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.Token0Price.Size()
		i -= size
		if _, err := m.Token0Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.Token1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Token0.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.ReserveUsd.Size()
		i -= size
		if _, err := m.ReserveUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Reserve1.Size()
		i -= size
		if _, err := m.Reserve1.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Reserve0.Size()
		i -= size
		if _, err := m.Reserve0.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UniswapToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniswapToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniswapToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Decimals) > 0 {
		i -= len(m.Decimals)
		copy(dAtA[i:], m.Decimals)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Decimals)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovOracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UniswapData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	return n
}

func (m *UniswapDataAlt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	return n
}

func (m *UniswapPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Reserve0)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Reserve1)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.ReserveUsd)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = m.Token0.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.Token1.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = len(m.Token0Price)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Token1Price)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.TotalSupply)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func (m *UniswapPairAlt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = m.Reserve0.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.Reserve1.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.ReserveUsd.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.Token0.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.Token1.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.Token0Price.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.Token1Price.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.TotalSupply.Size()
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func (m *UniswapToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Decimals)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func sovOracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOracle(x uint64) (n int) {
	return sovOracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UniswapData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniswapData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniswapData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, UniswapPair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniswapDataAlt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniswapDataAlt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniswapDataAlt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, UniswapPairAlt{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniswapPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniswapPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniswapPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve0 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token0", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token0Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token0Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token1Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token1Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniswapPairAlt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniswapPairAlt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniswapPairAlt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reserve0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reserve1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token0", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token0Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token0Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token1Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token1Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniswapToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniswapToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniswapToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decimals = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOracle = fmt.Errorf("proto: unexpected end of group")
)
