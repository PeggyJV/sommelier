// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pubsub/v1/pubsub.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// for a given PublisherIntent, whether or not it is pulled or pushed
type PublishMethod int32

const (
	PublishMethod_PULL PublishMethod = 0
	PublishMethod_PUSH PublishMethod = 1
)

var PublishMethod_name = map[int32]string{
	0: "PULL",
	1: "PUSH",
}

var PublishMethod_value = map[string]int32{
	"PULL": 0,
	"PUSH": 1,
}

func (x PublishMethod) String() string {
	return proto.EnumName(PublishMethod_name, int32(x))
}

func (PublishMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3164155f25b3675d, []int{0}
}

// for a given PublisherIntent, determines what types of subscribers may subscribe
type AllowedSubscribers int32

const (
	AllowedSubscribers_ANY        AllowedSubscribers = 0
	AllowedSubscribers_VALIDATORS AllowedSubscribers = 1
	AllowedSubscribers_LIST       AllowedSubscribers = 2
)

var AllowedSubscribers_name = map[int32]string{
	0: "ANY",
	1: "VALIDATORS",
	2: "LIST",
}

var AllowedSubscribers_value = map[string]int32{
	"ANY":        0,
	"VALIDATORS": 1,
	"LIST":       2,
}

func (x AllowedSubscribers) String() string {
	return proto.EnumName(AllowedSubscribers_name, int32(x))
}

func (AllowedSubscribers) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3164155f25b3675d, []int{1}
}

type Publisher struct {
	Domain   string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	CaCert   string `protobuf:"bytes,2,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	Address  string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	ProofUrl string `protobuf:"bytes,4,opt,name=proof_url,json=proofUrl,proto3" json:"proof_url,omitempty"`
}

func (m *Publisher) Reset()         { *m = Publisher{} }
func (m *Publisher) String() string { return proto.CompactTextString(m) }
func (*Publisher) ProtoMessage()    {}
func (*Publisher) Descriptor() ([]byte, []int) {
	return fileDescriptor_3164155f25b3675d, []int{0}
}
func (m *Publisher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Publisher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Publisher.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Publisher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Publisher.Merge(m, src)
}
func (m *Publisher) XXX_Size() int {
	return m.Size()
}
func (m *Publisher) XXX_DiscardUnknown() {
	xxx_messageInfo_Publisher.DiscardUnknown(m)
}

var xxx_messageInfo_Publisher proto.InternalMessageInfo

func (m *Publisher) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Publisher) GetCaCert() string {
	if m != nil {
		return m.CaCert
	}
	return ""
}

func (m *Publisher) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Publisher) GetProofUrl() string {
	if m != nil {
		return m.ProofUrl
	}
	return ""
}

type Subscriber struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// the below fields are optional, and only required if the subscriber wants to use "push" subscriptions
	Domain   string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	CaCert   string `protobuf:"bytes,3,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	ProofUrl string `protobuf:"bytes,4,opt,name=proof_url,json=proofUrl,proto3" json:"proof_url,omitempty"`
}

func (m *Subscriber) Reset()         { *m = Subscriber{} }
func (m *Subscriber) String() string { return proto.CompactTextString(m) }
func (*Subscriber) ProtoMessage()    {}
func (*Subscriber) Descriptor() ([]byte, []int) {
	return fileDescriptor_3164155f25b3675d, []int{1}
}
func (m *Subscriber) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subscriber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subscriber.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subscriber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscriber.Merge(m, src)
}
func (m *Subscriber) XXX_Size() int {
	return m.Size()
}
func (m *Subscriber) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscriber.DiscardUnknown(m)
}

var xxx_messageInfo_Subscriber proto.InternalMessageInfo

func (m *Subscriber) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Subscriber) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Subscriber) GetCaCert() string {
	if m != nil {
		return m.CaCert
	}
	return ""
}

func (m *Subscriber) GetProofUrl() string {
	if m != nil {
		return m.ProofUrl
	}
	return ""
}

type PublisherIntent struct {
	// unique key is subscription_id and publisher_domain tuple
	SubscriptionId     string             `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	PublisherDomain    string             `protobuf:"bytes,2,opt,name=publisher_domain,json=publisherDomain,proto3" json:"publisher_domain,omitempty"`
	Method             PublishMethod      `protobuf:"varint,3,opt,name=method,proto3,enum=pubsub.v1.PublishMethod" json:"method,omitempty"`
	PullUrl            string             `protobuf:"bytes,4,opt,name=pull_url,json=pullUrl,proto3" json:"pull_url,omitempty"`
	AllowedSubscribers AllowedSubscribers `protobuf:"varint,5,opt,name=allowed_subscribers,json=allowedSubscribers,proto3,enum=pubsub.v1.AllowedSubscribers" json:"allowed_subscribers,omitempty"`
	AllowedAddresses   []string           `protobuf:"bytes,6,rep,name=allowed_addresses,json=allowedAddresses,proto3" json:"allowed_addresses,omitempty"`
}

func (m *PublisherIntent) Reset()         { *m = PublisherIntent{} }
func (m *PublisherIntent) String() string { return proto.CompactTextString(m) }
func (*PublisherIntent) ProtoMessage()    {}
func (*PublisherIntent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3164155f25b3675d, []int{2}
}
func (m *PublisherIntent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublisherIntent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublisherIntent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublisherIntent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublisherIntent.Merge(m, src)
}
func (m *PublisherIntent) XXX_Size() int {
	return m.Size()
}
func (m *PublisherIntent) XXX_DiscardUnknown() {
	xxx_messageInfo_PublisherIntent.DiscardUnknown(m)
}

var xxx_messageInfo_PublisherIntent proto.InternalMessageInfo

func (m *PublisherIntent) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *PublisherIntent) GetPublisherDomain() string {
	if m != nil {
		return m.PublisherDomain
	}
	return ""
}

func (m *PublisherIntent) GetMethod() PublishMethod {
	if m != nil {
		return m.Method
	}
	return PublishMethod_PULL
}

func (m *PublisherIntent) GetPullUrl() string {
	if m != nil {
		return m.PullUrl
	}
	return ""
}

func (m *PublisherIntent) GetAllowedSubscribers() AllowedSubscribers {
	if m != nil {
		return m.AllowedSubscribers
	}
	return AllowedSubscribers_ANY
}

func (m *PublisherIntent) GetAllowedAddresses() []string {
	if m != nil {
		return m.AllowedAddresses
	}
	return nil
}

type SubscriberIntent struct {
	// unique key is subscription_id and subscriber_address tuple, a given subscriber can only subscribe to one publisher per
	// subscription_id at a time
	SubscsriptionId   string `protobuf:"bytes,1,opt,name=subscsription_id,json=subscsriptionId,proto3" json:"subscsription_id,omitempty"`
	SubscriberAddress string `protobuf:"bytes,2,opt,name=subscriber_address,json=subscriberAddress,proto3" json:"subscriber_address,omitempty"`
	PublisherDomain   string `protobuf:"bytes,3,opt,name=publisher_domain,json=publisherDomain,proto3" json:"publisher_domain,omitempty"`
	PushUrl           string `protobuf:"bytes,4,opt,name=push_url,json=pushUrl,proto3" json:"push_url,omitempty"`
}

func (m *SubscriberIntent) Reset()         { *m = SubscriberIntent{} }
func (m *SubscriberIntent) String() string { return proto.CompactTextString(m) }
func (*SubscriberIntent) ProtoMessage()    {}
func (*SubscriberIntent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3164155f25b3675d, []int{3}
}
func (m *SubscriberIntent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriberIntent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriberIntent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriberIntent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberIntent.Merge(m, src)
}
func (m *SubscriberIntent) XXX_Size() int {
	return m.Size()
}
func (m *SubscriberIntent) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberIntent.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberIntent proto.InternalMessageInfo

func (m *SubscriberIntent) GetSubscsriptionId() string {
	if m != nil {
		return m.SubscsriptionId
	}
	return ""
}

func (m *SubscriberIntent) GetSubscriberAddress() string {
	if m != nil {
		return m.SubscriberAddress
	}
	return ""
}

func (m *SubscriberIntent) GetPublisherDomain() string {
	if m != nil {
		return m.PublisherDomain
	}
	return ""
}

func (m *SubscriberIntent) GetPushUrl() string {
	if m != nil {
		return m.PushUrl
	}
	return ""
}

type AddPublisherProposal struct {
	Title       string     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Publisher   *Publisher `protobuf:"bytes,3,opt,name=publisher,proto3" json:"publisher,omitempty"`
}

func (m *AddPublisherProposal) Reset()         { *m = AddPublisherProposal{} }
func (m *AddPublisherProposal) String() string { return proto.CompactTextString(m) }
func (*AddPublisherProposal) ProtoMessage()    {}
func (*AddPublisherProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_3164155f25b3675d, []int{4}
}
func (m *AddPublisherProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPublisherProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPublisherProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPublisherProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPublisherProposal.Merge(m, src)
}
func (m *AddPublisherProposal) XXX_Size() int {
	return m.Size()
}
func (m *AddPublisherProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPublisherProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AddPublisherProposal proto.InternalMessageInfo

func (m *AddPublisherProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AddPublisherProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AddPublisherProposal) GetPublisher() *Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

type RemovePublisherProposal struct {
	Title       string     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Publisher   *Publisher `protobuf:"bytes,3,opt,name=publisher,proto3" json:"publisher,omitempty"`
}

func (m *RemovePublisherProposal) Reset()         { *m = RemovePublisherProposal{} }
func (m *RemovePublisherProposal) String() string { return proto.CompactTextString(m) }
func (*RemovePublisherProposal) ProtoMessage()    {}
func (*RemovePublisherProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_3164155f25b3675d, []int{5}
}
func (m *RemovePublisherProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePublisherProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePublisherProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePublisherProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePublisherProposal.Merge(m, src)
}
func (m *RemovePublisherProposal) XXX_Size() int {
	return m.Size()
}
func (m *RemovePublisherProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePublisherProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePublisherProposal proto.InternalMessageInfo

func (m *RemovePublisherProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RemovePublisherProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RemovePublisherProposal) GetPublisher() *Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func init() {
	proto.RegisterEnum("pubsub.v1.PublishMethod", PublishMethod_name, PublishMethod_value)
	proto.RegisterEnum("pubsub.v1.AllowedSubscribers", AllowedSubscribers_name, AllowedSubscribers_value)
	proto.RegisterType((*Publisher)(nil), "pubsub.v1.Publisher")
	proto.RegisterType((*Subscriber)(nil), "pubsub.v1.Subscriber")
	proto.RegisterType((*PublisherIntent)(nil), "pubsub.v1.PublisherIntent")
	proto.RegisterType((*SubscriberIntent)(nil), "pubsub.v1.SubscriberIntent")
	proto.RegisterType((*AddPublisherProposal)(nil), "pubsub.v1.AddPublisherProposal")
	proto.RegisterType((*RemovePublisherProposal)(nil), "pubsub.v1.RemovePublisherProposal")
}

func init() { proto.RegisterFile("pubsub/v1/pubsub.proto", fileDescriptor_3164155f25b3675d) }

var fileDescriptor_3164155f25b3675d = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe3, 0xa4, 0x4d, 0xea, 0xa9, 0x68, 0xdc, 0xa5, 0x6a, 0x8d, 0x10, 0x56, 0x14, 0x0e,
	0xb4, 0x45, 0xc4, 0x34, 0x3d, 0x70, 0x36, 0xf4, 0xd0, 0x48, 0xa1, 0x44, 0x4e, 0x83, 0x04, 0x97,
	0xc8, 0xce, 0x2e, 0x89, 0xd1, 0x3a, 0x6b, 0xed, 0xae, 0x03, 0xbd, 0x22, 0x71, 0xe7, 0x4d, 0x90,
	0x78, 0x0a, 0x8e, 0x3d, 0x72, 0x44, 0xc9, 0x8b, 0xa0, 0xd8, 0x1b, 0x3b, 0x56, 0x0a, 0x57, 0x6e,
	0x9e, 0x7f, 0x76, 0x66, 0x3e, 0xff, 0xb3, 0x5a, 0x38, 0x8c, 0x62, 0x5f, 0xc4, 0xbe, 0x3d, 0x3b,
	0xb3, 0xd3, 0xaf, 0x56, 0xc4, 0x99, 0x64, 0x48, 0x57, 0xd1, 0xec, 0xac, 0x29, 0x40, 0xef, 0xc5,
	0x3e, 0x0d, 0xc4, 0x84, 0x70, 0x74, 0x08, 0x55, 0xcc, 0x42, 0x2f, 0x98, 0x9a, 0x5a, 0x43, 0x3b,
	0xd6, 0x5d, 0x15, 0xa1, 0x23, 0xa8, 0x8d, 0xbc, 0xe1, 0x88, 0x70, 0x69, 0x96, 0xd3, 0xc4, 0xc8,
	0x7b, 0x45, 0xb8, 0x44, 0x26, 0xd4, 0x3c, 0x8c, 0x39, 0x11, 0xc2, 0xac, 0x24, 0x89, 0x55, 0x88,
	0x1e, 0x82, 0x1e, 0x71, 0xc6, 0x3e, 0x0c, 0x63, 0x4e, 0xcd, 0xad, 0x24, 0xb7, 0x93, 0x08, 0x03,
	0x4e, 0x9b, 0x12, 0xa0, 0x1f, 0xfb, 0x62, 0xc4, 0x03, 0x9f, 0xf0, 0xf5, 0x26, 0x5a, 0xb1, 0x49,
	0xce, 0x53, 0xfe, 0x1b, 0x4f, 0xa5, 0xc0, 0xf3, 0xcf, 0xa9, 0xdf, 0xcb, 0x50, 0xcf, 0xfe, 0xb5,
	0x33, 0x95, 0x64, 0x2a, 0xd1, 0x13, 0xa8, 0x8b, 0x94, 0x24, 0x92, 0x01, 0x9b, 0x0e, 0x03, 0xac,
	0x18, 0xf6, 0xd6, 0xe5, 0x0e, 0x46, 0x27, 0x60, 0x44, 0xab, 0xda, 0x61, 0x01, 0xaa, 0x9e, 0xe9,
	0x17, 0x29, 0xdd, 0x73, 0xa8, 0x86, 0x44, 0x4e, 0x18, 0x4e, 0xe0, 0xf6, 0xda, 0x66, 0x2b, 0xb3,
	0xbb, 0xa5, 0xe6, 0xbf, 0x4e, 0xf2, 0xae, 0x3a, 0x87, 0x1e, 0xc0, 0x4e, 0x14, 0x53, 0xba, 0x46,
	0x5d, 0x5b, 0xc6, 0x03, 0x4e, 0xd1, 0x15, 0xdc, 0xf7, 0x28, 0x65, 0x9f, 0x08, 0x1e, 0x8a, 0xcc,
	0x32, 0x61, 0x6e, 0x27, 0x9d, 0x1f, 0xad, 0x75, 0x76, 0xd2, 0x53, 0xb9, 0xaf, 0xc2, 0x45, 0xde,
	0x86, 0x86, 0x9e, 0xc2, 0xfe, 0xaa, 0x9f, 0x72, 0x99, 0x08, 0xb3, 0xda, 0xa8, 0x1c, 0xeb, 0xae,
	0xa1, 0x12, 0xce, 0x4a, 0x6f, 0xfe, 0xd0, 0xc0, 0xc8, 0x8b, 0x95, 0x65, 0x27, 0x60, 0x24, 0x24,
	0x62, 0xc3, 0xb3, 0x7a, 0x41, 0xef, 0x60, 0xf4, 0x0c, 0x50, 0x0e, 0xbd, 0x9a, 0xa7, 0x6c, 0xdb,
	0xcf, 0x33, 0x6a, 0xe0, 0x9d, 0x1e, 0x57, 0xee, 0xf6, 0x38, 0x71, 0x4c, 0x4c, 0x8a, 0x8e, 0x89,
	0xc9, 0x72, 0xcd, 0x5f, 0x34, 0x38, 0x70, 0x30, 0xce, 0x36, 0xdd, 0xe3, 0x2c, 0x62, 0xc2, 0xa3,
	0xe8, 0x00, 0xb6, 0x65, 0x20, 0x29, 0x51, 0xb4, 0x69, 0x80, 0x1a, 0xb0, 0x8b, 0x49, 0xb6, 0x69,
	0x05, 0xb7, 0x2e, 0xa1, 0x36, 0xe8, 0xd9, 0xf8, 0x84, 0x67, 0xb7, 0x7d, 0xb0, 0xb9, 0x52, 0xc2,
	0xdd, 0xfc, 0x58, 0xf3, 0xab, 0x06, 0x47, 0x2e, 0x09, 0xd9, 0x8c, 0xfc, 0x57, 0x8e, 0xd3, 0xc7,
	0x70, 0xaf, 0x70, 0xe5, 0xd0, 0x0e, 0x6c, 0xf5, 0x06, 0xdd, 0xae, 0x51, 0x4a, 0xbf, 0xfa, 0x97,
	0x86, 0x76, 0xfa, 0x02, 0xd0, 0xe6, 0xed, 0x41, 0x35, 0xa8, 0x38, 0x57, 0xef, 0x8c, 0x12, 0xda,
	0x03, 0x78, 0xeb, 0x74, 0x3b, 0x17, 0xce, 0xf5, 0x1b, 0xb7, 0x6f, 0x68, 0xcb, 0xc2, 0x6e, 0xa7,
	0x7f, 0x6d, 0x94, 0x5f, 0x5e, 0xfe, 0x9c, 0x5b, 0xda, 0xed, 0xdc, 0xd2, 0x7e, 0xcf, 0x2d, 0xed,
	0xdb, 0xc2, 0x2a, 0xdd, 0x2e, 0xac, 0xd2, 0xaf, 0x85, 0x55, 0x7a, 0xdf, 0x1a, 0x07, 0x72, 0x12,
	0xfb, 0xad, 0x11, 0x0b, 0xed, 0x88, 0x8c, 0xc7, 0x37, 0x1f, 0x67, 0xb6, 0x60, 0x61, 0x48, 0x68,
	0x40, 0xb8, 0x3d, 0x3b, 0xb7, 0x3f, 0xab, 0x17, 0xc9, 0x96, 0x37, 0x11, 0x11, 0x7e, 0x35, 0x79,
	0x98, 0xce, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x71, 0xfe, 0xe5, 0xb2, 0x04, 0x00, 0x00,
}

func (m *Publisher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Publisher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Publisher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofUrl) > 0 {
		i -= len(m.ProofUrl)
		copy(dAtA[i:], m.ProofUrl)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.ProofUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CaCert) > 0 {
		i -= len(m.CaCert)
		copy(dAtA[i:], m.CaCert)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.CaCert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Subscriber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subscriber) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subscriber) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofUrl) > 0 {
		i -= len(m.ProofUrl)
		copy(dAtA[i:], m.ProofUrl)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.ProofUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CaCert) > 0 {
		i -= len(m.CaCert)
		copy(dAtA[i:], m.CaCert)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.CaCert)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublisherIntent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublisherIntent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublisherIntent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedAddresses) > 0 {
		for iNdEx := len(m.AllowedAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedAddresses[iNdEx])
			copy(dAtA[i:], m.AllowedAddresses[iNdEx])
			i = encodeVarintPubsub(dAtA, i, uint64(len(m.AllowedAddresses[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.AllowedSubscribers != 0 {
		i = encodeVarintPubsub(dAtA, i, uint64(m.AllowedSubscribers))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PullUrl) > 0 {
		i -= len(m.PullUrl)
		copy(dAtA[i:], m.PullUrl)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.PullUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.Method != 0 {
		i = encodeVarintPubsub(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PublisherDomain) > 0 {
		i -= len(m.PublisherDomain)
		copy(dAtA[i:], m.PublisherDomain)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.PublisherDomain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubscriptionId) > 0 {
		i -= len(m.SubscriptionId)
		copy(dAtA[i:], m.SubscriptionId)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.SubscriptionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscriberIntent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriberIntent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriberIntent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PushUrl) > 0 {
		i -= len(m.PushUrl)
		copy(dAtA[i:], m.PushUrl)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.PushUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublisherDomain) > 0 {
		i -= len(m.PublisherDomain)
		copy(dAtA[i:], m.PublisherDomain)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.PublisherDomain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubscriberAddress) > 0 {
		i -= len(m.SubscriberAddress)
		copy(dAtA[i:], m.SubscriberAddress)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.SubscriberAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubscsriptionId) > 0 {
		i -= len(m.SubscsriptionId)
		copy(dAtA[i:], m.SubscsriptionId)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.SubscsriptionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddPublisherProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPublisherProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPublisherProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Publisher != nil {
		{
			size, err := m.Publisher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPubsub(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemovePublisherProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePublisherProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePublisherProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Publisher != nil {
		{
			size, err := m.Publisher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPubsub(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPubsub(dAtA []byte, offset int, v uint64) int {
	offset -= sovPubsub(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Publisher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.CaCert)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.ProofUrl)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *Subscriber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.CaCert)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.ProofUrl)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *PublisherIntent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubscriptionId)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.PublisherDomain)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.Method != 0 {
		n += 1 + sovPubsub(uint64(m.Method))
	}
	l = len(m.PullUrl)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.AllowedSubscribers != 0 {
		n += 1 + sovPubsub(uint64(m.AllowedSubscribers))
	}
	if len(m.AllowedAddresses) > 0 {
		for _, s := range m.AllowedAddresses {
			l = len(s)
			n += 1 + l + sovPubsub(uint64(l))
		}
	}
	return n
}

func (m *SubscriberIntent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubscsriptionId)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.SubscriberAddress)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.PublisherDomain)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.PushUrl)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *AddPublisherProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.Publisher != nil {
		l = m.Publisher.Size()
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *RemovePublisherProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.Publisher != nil {
		l = m.Publisher.Size()
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func sovPubsub(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPubsub(x uint64) (n int) {
	return sovPubsub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Publisher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Publisher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Publisher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaCert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaCert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subscriber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subscriber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subscriber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaCert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaCert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublisherIntent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublisherIntent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublisherIntent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublisherDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublisherDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= PublishMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PullUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedSubscribers", wireType)
			}
			m.AllowedSubscribers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowedSubscribers |= AllowedSubscribers(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedAddresses = append(m.AllowedAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriberIntent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriberIntent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriberIntent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscsriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscsriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriberAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriberAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublisherDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublisherDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPublisherProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPublisherProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPublisherProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publisher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Publisher == nil {
				m.Publisher = &Publisher{}
			}
			if err := m.Publisher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePublisherProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePublisherProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePublisherProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publisher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Publisher == nil {
				m.Publisher = &Publisher{}
			}
			if err := m.Publisher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPubsub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPubsub
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPubsub
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPubsub
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPubsub        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPubsub          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPubsub = fmt.Errorf("proto: unexpected end of group")
)
