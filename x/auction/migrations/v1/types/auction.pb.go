// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auction/v1/auction.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Auction struct {
	Id                         uint32                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StartingTokensForSale      types.Coin                             `protobuf:"bytes,2,opt,name=starting_tokens_for_sale,json=startingTokensForSale,proto3" json:"starting_tokens_for_sale"`
	StartBlock                 uint64                                 `protobuf:"varint,3,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EndBlock                   uint64                                 `protobuf:"varint,4,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
	InitialPriceDecreaseRate   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=initial_price_decrease_rate,json=initialPriceDecreaseRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"initial_price_decrease_rate"`
	CurrentPriceDecreaseRate   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=current_price_decrease_rate,json=currentPriceDecreaseRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"current_price_decrease_rate"`
	PriceDecreaseBlockInterval uint64                                 `protobuf:"varint,7,opt,name=price_decrease_block_interval,json=priceDecreaseBlockInterval,proto3" json:"price_decrease_block_interval,omitempty"`
	InitialUnitPriceInUsomm    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=initial_unit_price_in_usomm,json=initialUnitPriceInUsomm,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"initial_unit_price_in_usomm"`
	CurrentUnitPriceInUsomm    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=current_unit_price_in_usomm,json=currentUnitPriceInUsomm,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"current_unit_price_in_usomm"`
	RemainingTokensForSale     types.Coin                             `protobuf:"bytes,10,opt,name=remaining_tokens_for_sale,json=remainingTokensForSale,proto3" json:"remaining_tokens_for_sale"`
	FundingModuleAccount       string                                 `protobuf:"bytes,11,opt,name=funding_module_account,json=fundingModuleAccount,proto3" json:"funding_module_account,omitempty"`
	ProceedsModuleAccount      string                                 `protobuf:"bytes,12,opt,name=proceeds_module_account,json=proceedsModuleAccount,proto3" json:"proceeds_module_account,omitempty"`
}

func (m *Auction) Reset()         { *m = Auction{} }
func (m *Auction) String() string { return proto.CompactTextString(m) }
func (*Auction) ProtoMessage()    {}
func (*Auction) Descriptor() ([]byte, []int) {
	return fileDescriptor_efe336ece9e41ddd, []int{0}
}
func (m *Auction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auction.Merge(m, src)
}
func (m *Auction) XXX_Size() int {
	return m.Size()
}
func (m *Auction) XXX_DiscardUnknown() {
	xxx_messageInfo_Auction.DiscardUnknown(m)
}

var xxx_messageInfo_Auction proto.InternalMessageInfo

func (m *Auction) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Auction) GetStartingTokensForSale() types.Coin {
	if m != nil {
		return m.StartingTokensForSale
	}
	return types.Coin{}
}

func (m *Auction) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *Auction) GetEndBlock() uint64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

func (m *Auction) GetPriceDecreaseBlockInterval() uint64 {
	if m != nil {
		return m.PriceDecreaseBlockInterval
	}
	return 0
}

func (m *Auction) GetRemainingTokensForSale() types.Coin {
	if m != nil {
		return m.RemainingTokensForSale
	}
	return types.Coin{}
}

func (m *Auction) GetFundingModuleAccount() string {
	if m != nil {
		return m.FundingModuleAccount
	}
	return ""
}

func (m *Auction) GetProceedsModuleAccount() string {
	if m != nil {
		return m.ProceedsModuleAccount
	}
	return ""
}

type Bid struct {
	Id                        uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AuctionId                 uint32                                 `protobuf:"varint,2,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Bidder                    string                                 `protobuf:"bytes,3,opt,name=bidder,proto3" json:"bidder,omitempty"`
	MaxBidInUsomm             types.Coin                             `protobuf:"bytes,4,opt,name=max_bid_in_usomm,json=maxBidInUsomm,proto3" json:"max_bid_in_usomm"`
	SaleTokenMinimumAmount    types.Coin                             `protobuf:"bytes,5,opt,name=sale_token_minimum_amount,json=saleTokenMinimumAmount,proto3" json:"sale_token_minimum_amount"`
	TotalFulfilledSaleTokens  types.Coin                             `protobuf:"bytes,6,opt,name=total_fulfilled_sale_tokens,json=totalFulfilledSaleTokens,proto3" json:"total_fulfilled_sale_tokens"`
	SaleTokenUnitPriceInUsomm github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=sale_token_unit_price_in_usomm,json=saleTokenUnitPriceInUsomm,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"sale_token_unit_price_in_usomm"`
	TotalUsommPaid            types.Coin                             `protobuf:"bytes,8,opt,name=total_usomm_paid,json=totalUsommPaid,proto3" json:"total_usomm_paid"`
	BlockHeight               uint64                                 `protobuf:"varint,9,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_efe336ece9e41ddd, []int{1}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return m.Size()
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func (m *Bid) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Bid) GetAuctionId() uint32 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *Bid) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *Bid) GetMaxBidInUsomm() types.Coin {
	if m != nil {
		return m.MaxBidInUsomm
	}
	return types.Coin{}
}

func (m *Bid) GetSaleTokenMinimumAmount() types.Coin {
	if m != nil {
		return m.SaleTokenMinimumAmount
	}
	return types.Coin{}
}

func (m *Bid) GetTotalFulfilledSaleTokens() types.Coin {
	if m != nil {
		return m.TotalFulfilledSaleTokens
	}
	return types.Coin{}
}

func (m *Bid) GetTotalUsommPaid() types.Coin {
	if m != nil {
		return m.TotalUsommPaid
	}
	return types.Coin{}
}

func (m *Bid) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// USD price is the value for one non-fractional token (smallest unit of the token * 10^exponent)
type TokenPrice struct {
	Denom            string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Exponent         uint64                                 `protobuf:"varint,2,opt,name=exponent,proto3" json:"exponent,omitempty"`
	UsdPrice         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=usd_price,json=usdPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"usd_price"`
	LastUpdatedBlock uint64                                 `protobuf:"varint,4,opt,name=last_updated_block,json=lastUpdatedBlock,proto3" json:"last_updated_block,omitempty"`
}

func (m *TokenPrice) Reset()         { *m = TokenPrice{} }
func (m *TokenPrice) String() string { return proto.CompactTextString(m) }
func (*TokenPrice) ProtoMessage()    {}
func (*TokenPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_efe336ece9e41ddd, []int{2}
}
func (m *TokenPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPrice.Merge(m, src)
}
func (m *TokenPrice) XXX_Size() int {
	return m.Size()
}
func (m *TokenPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPrice.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPrice proto.InternalMessageInfo

func (m *TokenPrice) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *TokenPrice) GetExponent() uint64 {
	if m != nil {
		return m.Exponent
	}
	return 0
}

func (m *TokenPrice) GetLastUpdatedBlock() uint64 {
	if m != nil {
		return m.LastUpdatedBlock
	}
	return 0
}

type ProposedTokenPrice struct {
	Denom    string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Exponent uint64                                 `protobuf:"varint,2,opt,name=exponent,proto3" json:"exponent,omitempty"`
	UsdPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=usd_price,json=usdPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"usd_price"`
}

func (m *ProposedTokenPrice) Reset()         { *m = ProposedTokenPrice{} }
func (m *ProposedTokenPrice) String() string { return proto.CompactTextString(m) }
func (*ProposedTokenPrice) ProtoMessage()    {}
func (*ProposedTokenPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_efe336ece9e41ddd, []int{3}
}
func (m *ProposedTokenPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposedTokenPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposedTokenPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposedTokenPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposedTokenPrice.Merge(m, src)
}
func (m *ProposedTokenPrice) XXX_Size() int {
	return m.Size()
}
func (m *ProposedTokenPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposedTokenPrice.DiscardUnknown(m)
}

var xxx_messageInfo_ProposedTokenPrice proto.InternalMessageInfo

func (m *ProposedTokenPrice) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *ProposedTokenPrice) GetExponent() uint64 {
	if m != nil {
		return m.Exponent
	}
	return 0
}

func init() {
	proto.RegisterType((*Auction)(nil), "auction.v1.Auction")
	proto.RegisterType((*Bid)(nil), "auction.v1.Bid")
	proto.RegisterType((*TokenPrice)(nil), "auction.v1.TokenPrice")
	proto.RegisterType((*ProposedTokenPrice)(nil), "auction.v1.ProposedTokenPrice")
}

func init() { proto.RegisterFile("auction/v1/auction.proto", fileDescriptor_efe336ece9e41ddd) }

var fileDescriptor_efe336ece9e41ddd = []byte{
	// 799 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x41, 0x6f, 0xdb, 0x36,
	0x14, 0xb6, 0x52, 0xc7, 0xb1, 0xe9, 0xa6, 0x08, 0x88, 0x34, 0x95, 0x1d, 0x54, 0xf1, 0x7c, 0x18,
	0x7c, 0xd8, 0x2c, 0x78, 0x1b, 0xb6, 0xb3, 0xbd, 0xa2, 0xa8, 0x31, 0x14, 0x08, 0xd4, 0x05, 0x18,
	0x7a, 0x18, 0x41, 0x8b, 0xcf, 0x0e, 0x17, 0x89, 0xd4, 0x44, 0xca, 0x70, 0xff, 0xc5, 0x80, 0xfd,
	0x94, 0x9d, 0xf6, 0x0f, 0x7a, 0xec, 0x71, 0xd8, 0xa1, 0x18, 0x92, 0x3f, 0xb1, 0xe3, 0x20, 0x92,
	0x6a, 0x9c, 0xc6, 0x07, 0xcf, 0xa7, 0x9e, 0x2c, 0xbe, 0x4f, 0xef, 0xfb, 0xde, 0xfb, 0xfc, 0x1e,
	0x85, 0x7c, 0x5a, 0xc4, 0x9a, 0x4b, 0x11, 0x2e, 0x47, 0xa1, 0x7b, 0x1c, 0x66, 0xb9, 0xd4, 0x12,
	0xa3, 0xea, 0xb8, 0x1c, 0x75, 0x83, 0x58, 0xaa, 0x54, 0xaa, 0x70, 0x46, 0x15, 0x84, 0xcb, 0xd1,
	0x0c, 0x34, 0x1d, 0x85, 0xb1, 0xe4, 0xee, 0xdd, 0x6e, 0xc7, 0xe2, 0xc4, 0x9c, 0x42, 0x7b, 0x70,
	0xd0, 0xf1, 0x42, 0x2e, 0xa4, 0x8d, 0x97, 0x4f, 0x36, 0xda, 0xff, 0xb7, 0x81, 0x0e, 0xc6, 0x96,
	0x1f, 0x3f, 0x42, 0x7b, 0x9c, 0xf9, 0x5e, 0xcf, 0x1b, 0x1c, 0x46, 0x7b, 0x9c, 0xe1, 0x9f, 0x90,
	0xaf, 0x34, 0xcd, 0x35, 0x17, 0x0b, 0xa2, 0xe5, 0x15, 0x08, 0x45, 0xe6, 0x32, 0x27, 0x8a, 0x26,
	0xe0, 0xef, 0xf5, 0xbc, 0x41, 0xfb, 0xab, 0xce, 0xd0, 0x49, 0x94, 0xf5, 0x0c, 0x5d, 0x3d, 0xc3,
	0xef, 0x25, 0x17, 0x93, 0xfa, 0xdb, 0xf7, 0x67, 0xb5, 0xe8, 0x71, 0x45, 0xf0, 0xa3, 0xc9, 0x7f,
	0x2e, 0xf3, 0x57, 0x34, 0x01, 0x7c, 0x86, 0xda, 0x06, 0x20, 0xb3, 0x44, 0xc6, 0x57, 0xfe, 0x83,
	0x9e, 0x37, 0xa8, 0x47, 0xc8, 0x84, 0x26, 0x65, 0x04, 0x9f, 0xa2, 0x16, 0x08, 0xe6, 0xe0, 0xba,
	0x81, 0x9b, 0x20, 0x98, 0x05, 0x53, 0x74, 0xca, 0x05, 0xd7, 0x9c, 0x26, 0x24, 0xcb, 0x79, 0x0c,
	0x84, 0x41, 0x9c, 0x03, 0x55, 0x40, 0x72, 0xaa, 0xc1, 0xdf, 0xef, 0x79, 0x83, 0xd6, 0x64, 0x58,
	0xea, 0xff, 0xfd, 0xfe, 0xec, 0xf3, 0x05, 0xd7, 0x97, 0xc5, 0x6c, 0x18, 0xcb, 0xd4, 0xf9, 0xe1,
	0x7e, 0xbe, 0x54, 0xec, 0x2a, 0xd4, 0x6f, 0x32, 0x50, 0xc3, 0x67, 0x10, 0x47, 0xbe, 0xa3, 0x3c,
	0x2f, 0x19, 0x9f, 0x39, 0xc2, 0x88, 0x6a, 0x28, 0xe5, 0xe2, 0x22, 0xcf, 0x41, 0xe8, 0x8d, 0x72,
	0x8d, 0xdd, 0xe4, 0x1c, 0xe5, 0x7d, 0xb9, 0x31, 0x7a, 0xfa, 0x91, 0x8c, 0x71, 0x81, 0x70, 0xa1,
	0x21, 0x5f, 0xd2, 0xc4, 0x3f, 0x30, 0x76, 0x74, 0xb3, 0xf5, 0x4c, 0x63, 0xcc, 0xd4, 0xbd, 0x81,
	0x93, 0x5b, 0x83, 0x0a, 0xc1, 0xab, 0xb2, 0xb9, 0x20, 0x85, 0x92, 0x69, 0xea, 0x37, 0x77, 0xaa,
	0xf8, 0x89, 0xa3, 0xbc, 0x10, 0xdc, 0x56, 0x3d, 0x15, 0x17, 0x25, 0x5d, 0xa9, 0x56, 0xf9, 0xb3,
	0x49, 0xad, 0xb5, 0x9b, 0x9a, 0xa3, 0xbc, 0xa7, 0xf6, 0x1a, 0x75, 0x72, 0x48, 0x29, 0x17, 0x9b,
	0xa6, 0x12, 0x6d, 0x37, 0x95, 0x27, 0x1f, 0x18, 0xee, 0x8e, 0xe5, 0x37, 0xe8, 0x64, 0x5e, 0x08,
	0x56, 0x32, 0xa7, 0x92, 0x15, 0x09, 0x10, 0x1a, 0xc7, 0xb2, 0x10, 0xda, 0x6f, 0x97, 0x4d, 0x44,
	0xc7, 0x0e, 0x7d, 0x69, 0xc0, 0xb1, 0xc5, 0xf0, 0xb7, 0xe8, 0x49, 0x96, 0xcb, 0x18, 0x80, 0xa9,
	0x8f, 0xd3, 0x1e, 0x9a, 0xb4, 0xc7, 0x15, 0x7c, 0x27, 0xaf, 0xff, 0x47, 0x1d, 0x3d, 0x98, 0x70,
	0xb6, 0xb6, 0x76, 0x75, 0xb3, 0x76, 0x4f, 0x51, 0xb5, 0xf1, 0x84, 0x33, 0xb3, 0x68, 0x87, 0x51,
	0xcb, 0x45, 0xa6, 0x0c, 0x9f, 0xa0, 0xc6, 0x8c, 0x33, 0x06, 0xb9, 0x59, 0x9b, 0x56, 0xe4, 0x4e,
	0xf8, 0x05, 0x3a, 0x4a, 0xe9, 0x8a, 0xcc, 0x38, 0xbb, 0xf5, 0xbe, 0xbe, 0x9d, 0x1f, 0x87, 0x29,
	0x5d, 0x4d, 0x38, 0x5b, 0xb3, 0xb8, 0x74, 0xd3, 0xba, 0x4b, 0x52, 0x2e, 0x78, 0x5a, 0xa4, 0x84,
	0xa6, 0xa6, 0xa5, 0xfd, 0x2d, 0x2d, 0x2e, 0x19, 0x8c, 0xbb, 0x2f, 0x6d, 0xfe, 0xd8, 0xa4, 0xe3,
	0x9f, 0xd1, 0xa9, 0x96, 0x9a, 0x26, 0x64, 0x5e, 0x24, 0x73, 0x9e, 0x24, 0xc0, 0xc8, 0xad, 0x96,
	0x32, 0xcb, 0xb4, 0x05, 0xbb, 0x6f, 0x38, 0x9e, 0x57, 0x14, 0xaf, 0x2a, 0x2d, 0x85, 0x7f, 0x45,
	0xc1, 0x5a, 0xed, 0x9b, 0xe6, 0xf1, 0x60, 0xa7, 0x79, 0xec, 0x7c, 0xe8, 0xe7, 0xde, 0x44, 0x4e,
	0xd1, 0x91, 0x6d, 0xc9, 0xf0, 0x93, 0x8c, 0x72, 0x66, 0x56, 0x6c, 0x8b, 0x3e, 0x1e, 0x99, 0x44,
	0x43, 0x73, 0x4e, 0x39, 0xc3, 0x9f, 0xa1, 0x87, 0x76, 0xd9, 0x2f, 0x81, 0x2f, 0x2e, 0xb5, 0xd9,
	0x9d, 0x7a, 0xd4, 0x36, 0xb1, 0x17, 0x26, 0xd4, 0xff, 0xd3, 0x43, 0xc8, 0xd4, 0x61, 0x6a, 0xc0,
	0xc7, 0x68, 0x9f, 0x81, 0x90, 0xa9, 0x99, 0x9f, 0x56, 0x64, 0x0f, 0xb8, 0x8b, 0x9a, 0xb0, 0xca,
	0xa4, 0x00, 0xa1, 0xcd, 0x00, 0x95, 0xb7, 0xa7, 0x3b, 0xe3, 0x1f, 0x50, 0xab, 0x50, 0xcc, 0xba,
	0x62, 0x47, 0xe8, 0x7f, 0x9b, 0xd1, 0x2c, 0x14, 0xb3, 0xf2, 0x5f, 0x20, 0x9c, 0x50, 0xa5, 0x49,
	0x91, 0x31, 0xaa, 0xe1, 0xee, 0x85, 0x7d, 0x54, 0x22, 0x17, 0x16, 0x30, 0xf7, 0x53, 0xff, 0x77,
	0x0f, 0xe1, 0xf3, 0x5c, 0x66, 0x52, 0x01, 0xfb, 0x64, 0x7a, 0x98, 0x4c, 0xdf, 0x5e, 0x07, 0xde,
	0xbb, 0xeb, 0xc0, 0xfb, 0xe7, 0x3a, 0xf0, 0x7e, 0xbb, 0x09, 0x6a, 0xef, 0x6e, 0x82, 0xda, 0x5f,
	0x37, 0x41, 0xed, 0x75, 0xb8, 0xc6, 0x95, 0xc1, 0x62, 0xf1, 0xe6, 0x97, 0x65, 0x58, 0xfe, 0x57,
	0x90, 0x70, 0xc8, 0xc3, 0xe5, 0x77, 0xe1, 0xaa, 0xfa, 0x54, 0x5b, 0xe2, 0x59, 0xc3, 0x7c, 0x54,
	0xbf, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x68, 0x28, 0x79, 0x9e, 0xcd, 0x07, 0x00, 0x00,
}

func (m *Auction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProceedsModuleAccount) > 0 {
		i -= len(m.ProceedsModuleAccount)
		copy(dAtA[i:], m.ProceedsModuleAccount)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.ProceedsModuleAccount)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.FundingModuleAccount) > 0 {
		i -= len(m.FundingModuleAccount)
		copy(dAtA[i:], m.FundingModuleAccount)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.FundingModuleAccount)))
		i--
		dAtA[i] = 0x5a
	}
	{
		size, err := m.RemainingTokensForSale.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.CurrentUnitPriceInUsomm.Size()
		i -= size
		if _, err := m.CurrentUnitPriceInUsomm.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.InitialUnitPriceInUsomm.Size()
		i -= size
		if _, err := m.InitialUnitPriceInUsomm.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.PriceDecreaseBlockInterval != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.PriceDecreaseBlockInterval))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.CurrentPriceDecreaseRate.Size()
		i -= size
		if _, err := m.CurrentPriceDecreaseRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.InitialPriceDecreaseRate.Size()
		i -= size
		if _, err := m.InitialPriceDecreaseRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.EndBlock != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.StartBlock != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.StartingTokensForSale.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.TotalUsommPaid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.SaleTokenUnitPriceInUsomm.Size()
		i -= size
		if _, err := m.SaleTokenUnitPriceInUsomm.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.TotalFulfilledSaleTokens.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.SaleTokenMinimumAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.MaxBidInUsomm.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AuctionId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TokenPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastUpdatedBlock != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.LastUpdatedBlock))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.UsdPrice.Size()
		i -= size
		if _, err := m.UsdPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Exponent != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Exponent))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposedTokenPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposedTokenPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposedTokenPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UsdPrice.Size()
		i -= size
		if _, err := m.UsdPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Exponent != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Exponent))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Auction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuction(uint64(m.Id))
	}
	l = m.StartingTokensForSale.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.StartBlock != 0 {
		n += 1 + sovAuction(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovAuction(uint64(m.EndBlock))
	}
	l = m.InitialPriceDecreaseRate.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.CurrentPriceDecreaseRate.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.PriceDecreaseBlockInterval != 0 {
		n += 1 + sovAuction(uint64(m.PriceDecreaseBlockInterval))
	}
	l = m.InitialUnitPriceInUsomm.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.CurrentUnitPriceInUsomm.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.RemainingTokensForSale.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = len(m.FundingModuleAccount)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = len(m.ProceedsModuleAccount)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	return n
}

func (m *Bid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuction(uint64(m.Id))
	}
	if m.AuctionId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.MaxBidInUsomm.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.SaleTokenMinimumAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.TotalFulfilledSaleTokens.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.SaleTokenUnitPriceInUsomm.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.TotalUsommPaid.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.BlockHeight != 0 {
		n += 1 + sovAuction(uint64(m.BlockHeight))
	}
	return n
}

func (m *TokenPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	if m.Exponent != 0 {
		n += 1 + sovAuction(uint64(m.Exponent))
	}
	l = m.UsdPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.LastUpdatedBlock != 0 {
		n += 1 + sovAuction(uint64(m.LastUpdatedBlock))
	}
	return n
}

func (m *ProposedTokenPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	if m.Exponent != 0 {
		n += 1 + sovAuction(uint64(m.Exponent))
	}
	l = m.UsdPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Auction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingTokensForSale", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartingTokensForSale.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialPriceDecreaseRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialPriceDecreaseRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPriceDecreaseRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentPriceDecreaseRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDecreaseBlockInterval", wireType)
			}
			m.PriceDecreaseBlockInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceDecreaseBlockInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialUnitPriceInUsomm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialUnitPriceInUsomm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUnitPriceInUsomm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentUnitPriceInUsomm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingTokensForSale", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingTokensForSale.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingModuleAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FundingModuleAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProceedsModuleAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProceedsModuleAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBidInUsomm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBidInUsomm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleTokenMinimumAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SaleTokenMinimumAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFulfilledSaleTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalFulfilledSaleTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleTokenUnitPriceInUsomm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SaleTokenUnitPriceInUsomm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUsommPaid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalUsommPaid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exponent", wireType)
			}
			m.Exponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exponent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsdPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedBlock", wireType)
			}
			m.LastUpdatedBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdatedBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposedTokenPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposedTokenPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposedTokenPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exponent", wireType)
			}
			m.Exponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exponent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsdPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
