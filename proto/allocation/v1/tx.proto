syntax = "proto3";
package allocation.v1;

import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";
import "allocation/v1/allocation.proto";

option go_package = "github.com/peggyjv/sommelier/v3/x/allocation/types";

// MsgService defines the msgs that the allocation module handles.
service Msg {
    // AllocationPrecommit defines a message that commits a hash of allocation data feed before the data is actually submitted.
    rpc AllocationPrecommit   (MsgAllocationPrecommit)   returns (MsgAllocationPrecommitResponse);
    // AllocationCommit defines a message to submit the actual allocation data that was committed by the feeder through the pre-commit.
    rpc AllocationCommit      (MsgAllocationCommit)      returns (MsgAllocationCommitResponse);
}


// MsgAllocationPrecommit - sdk.Msg for prevoting on an array of oracle data types.
// The purpose of the prevote is to hide vote for data with hashes formatted as hex string:
// SHA256("{salt}:{data_cannonical_json}:{voter}")
message MsgAllocationPrecommit {
    // precommit containing the hash of the allocation precommit contents
    repeated AllocationPrecommit   precommit = 1;
    // signer (i.e feeder) account address
    string          signer  = 2;
}

// MsgAllocationPrecommitResponse is the response type for the Msg/AllocationPrecommitResponse gRPC method.
message MsgAllocationPrecommitResponse {}

// MsgAllocationCommit - sdk.Msg for submitting arbitrary oracle data that has been prevoted on
message MsgAllocationCommit {
    // vote containing the oracle data feed
    repeated Allocation commit   = 1;
    // signer (i.e feeder) account address
    string     signer = 2;
}

// MsgAllocationCommitResponse is the response type for the Msg/AllocationCommit gRPC method.
message MsgAllocationCommitResponse {}
