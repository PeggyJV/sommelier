// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auction/v1/auction.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Auction struct {
	Id                    uint32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StartingAmount        types.Coin `protobuf:"bytes,2,opt,name=starting_amount,json=startingAmount,proto3" json:"starting_amount"`
	StartBlock            uint64     `protobuf:"varint,3,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EndBlock              uint64     `protobuf:"varint,4,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
	InitialDecreaseRate   float32    `protobuf:"fixed32,5,opt,name=initial_decrease_rate,json=initialDecreaseRate,proto3" json:"initial_decrease_rate,omitempty"`
	CurrentDecreaseRate   float32    `protobuf:"fixed32,6,opt,name=current_decrease_rate,json=currentDecreaseRate,proto3" json:"current_decrease_rate,omitempty"`
	BlockDecreaseInterval uint32     `protobuf:"varint,7,opt,name=block_decrease_interval,json=blockDecreaseInterval,proto3" json:"block_decrease_interval,omitempty"`
	CurrentPrice          types.Coin `protobuf:"bytes,8,opt,name=current_price,json=currentPrice,proto3" json:"current_price"`
	AmountRemaining       types.Coin `protobuf:"bytes,9,opt,name=amount_remaining,json=amountRemaining,proto3" json:"amount_remaining"`
	ProceedsModuleAccount string     `protobuf:"bytes,10,opt,name=proceeds_module_account,json=proceedsModuleAccount,proto3" json:"proceeds_module_account,omitempty"`
}

func (m *Auction) Reset()         { *m = Auction{} }
func (m *Auction) String() string { return proto.CompactTextString(m) }
func (*Auction) ProtoMessage()    {}
func (*Auction) Descriptor() ([]byte, []int) {
	return fileDescriptor_efe336ece9e41ddd, []int{0}
}
func (m *Auction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auction.Merge(m, src)
}
func (m *Auction) XXX_Size() int {
	return m.Size()
}
func (m *Auction) XXX_DiscardUnknown() {
	xxx_messageInfo_Auction.DiscardUnknown(m)
}

var xxx_messageInfo_Auction proto.InternalMessageInfo

func (m *Auction) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Auction) GetStartingAmount() types.Coin {
	if m != nil {
		return m.StartingAmount
	}
	return types.Coin{}
}

func (m *Auction) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *Auction) GetEndBlock() uint64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

func (m *Auction) GetInitialDecreaseRate() float32 {
	if m != nil {
		return m.InitialDecreaseRate
	}
	return 0
}

func (m *Auction) GetCurrentDecreaseRate() float32 {
	if m != nil {
		return m.CurrentDecreaseRate
	}
	return 0
}

func (m *Auction) GetBlockDecreaseInterval() uint32 {
	if m != nil {
		return m.BlockDecreaseInterval
	}
	return 0
}

func (m *Auction) GetCurrentPrice() types.Coin {
	if m != nil {
		return m.CurrentPrice
	}
	return types.Coin{}
}

func (m *Auction) GetAmountRemaining() types.Coin {
	if m != nil {
		return m.AmountRemaining
	}
	return types.Coin{}
}

func (m *Auction) GetProceedsModuleAccount() string {
	if m != nil {
		return m.ProceedsModuleAccount
	}
	return ""
}

type Bid struct {
	Id               uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AuctionId        uint32     `protobuf:"varint,2,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Bidder           string     `protobuf:"bytes,3,opt,name=bidder,proto3" json:"bidder,omitempty"`
	MaxBid           types.Coin `protobuf:"bytes,4,opt,name=max_bid,json=maxBid,proto3" json:"max_bid"`
	MinimumAmount    types.Coin `protobuf:"bytes,5,opt,name=minimum_amount,json=minimumAmount,proto3" json:"minimum_amount"`
	FulfilledAmount  types.Coin `protobuf:"bytes,6,opt,name=fulfilled_amount,json=fulfilledAmount,proto3" json:"fulfilled_amount"`
	FulfillmentPrice types.Coin `protobuf:"bytes,7,opt,name=fulfillment_price,json=fulfillmentPrice,proto3" json:"fulfillment_price"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_efe336ece9e41ddd, []int{1}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return m.Size()
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func (m *Bid) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Bid) GetAuctionId() uint32 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *Bid) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *Bid) GetMaxBid() types.Coin {
	if m != nil {
		return m.MaxBid
	}
	return types.Coin{}
}

func (m *Bid) GetMinimumAmount() types.Coin {
	if m != nil {
		return m.MinimumAmount
	}
	return types.Coin{}
}

func (m *Bid) GetFulfilledAmount() types.Coin {
	if m != nil {
		return m.FulfilledAmount
	}
	return types.Coin{}
}

func (m *Bid) GetFulfillmentPrice() types.Coin {
	if m != nil {
		return m.FulfillmentPrice
	}
	return types.Coin{}
}

type TokenPrice struct {
	Denom    string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	UsdPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=usd_price,json=usdPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"usd_price"`
}

func (m *TokenPrice) Reset()         { *m = TokenPrice{} }
func (m *TokenPrice) String() string { return proto.CompactTextString(m) }
func (*TokenPrice) ProtoMessage()    {}
func (*TokenPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_efe336ece9e41ddd, []int{2}
}
func (m *TokenPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPrice.Merge(m, src)
}
func (m *TokenPrice) XXX_Size() int {
	return m.Size()
}
func (m *TokenPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPrice.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPrice proto.InternalMessageInfo

func (m *TokenPrice) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*Auction)(nil), "auction.v1.Auction")
	proto.RegisterType((*Bid)(nil), "auction.v1.Bid")
	proto.RegisterType((*TokenPrice)(nil), "auction.v1.TokenPrice")
}

func init() { proto.RegisterFile("auction/v1/auction.proto", fileDescriptor_efe336ece9e41ddd) }

var fileDescriptor_efe336ece9e41ddd = []byte{
	// 607 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x41, 0x4f, 0xd4, 0x40,
	0x14, 0xc7, 0xb7, 0xcb, 0xb2, 0x4b, 0x1f, 0x2e, 0x60, 0x05, 0x2d, 0x18, 0xcb, 0x86, 0x83, 0xd9,
	0x8b, 0x6d, 0x16, 0x8d, 0xf1, 0xca, 0x4a, 0x8c, 0xa0, 0x26, 0xa6, 0xf1, 0xe4, 0xa5, 0x99, 0x76,
	0x1e, 0x75, 0xa4, 0x33, 0xb3, 0x69, 0xa7, 0x1b, 0xf8, 0x0c, 0x5e, 0xfc, 0x58, 0x1c, 0x39, 0x1a,
	0x0f, 0xc4, 0xc0, 0xc5, 0x8f, 0x61, 0x3a, 0x33, 0x15, 0xf4, 0xb4, 0xa7, 0xed, 0x7b, 0xff, 0xfd,
	0xfd, 0xe7, 0xf5, 0xbd, 0xd7, 0x01, 0x9f, 0xd4, 0x99, 0x62, 0x52, 0x44, 0xf3, 0x49, 0x64, 0x1f,
	0xc3, 0x59, 0x29, 0x95, 0xf4, 0xa0, 0x0d, 0xe7, 0x93, 0x9d, 0x20, 0x93, 0x15, 0x97, 0x55, 0x94,
	0x92, 0x0a, 0xa3, 0xf9, 0x24, 0x45, 0x45, 0x26, 0x51, 0x26, 0x99, 0xfd, 0xef, 0xce, 0xb6, 0xd1,
	0x13, 0x1d, 0x45, 0x26, 0xb0, 0xd2, 0x66, 0x2e, 0x73, 0x69, 0xf2, 0xcd, 0x93, 0xc9, 0xee, 0x7d,
	0xeb, 0xc1, 0xe0, 0xc0, 0xf8, 0x7b, 0x6b, 0xd0, 0x65, 0xd4, 0x77, 0x46, 0xce, 0x78, 0x18, 0x77,
	0x19, 0xf5, 0xde, 0xc2, 0x7a, 0xa5, 0x48, 0xa9, 0x98, 0xc8, 0x13, 0xc2, 0x65, 0x2d, 0x94, 0xdf,
	0x1d, 0x39, 0xe3, 0xd5, 0xfd, 0xed, 0xd0, 0x3a, 0x37, 0x65, 0x84, 0xb6, 0x8c, 0xf0, 0xb5, 0x64,
	0x62, 0xda, 0xbb, 0xb8, 0xda, 0xed, 0xc4, 0x6b, 0x2d, 0x77, 0xa0, 0x31, 0x6f, 0x17, 0x56, 0x75,
	0x26, 0x49, 0x0b, 0x99, 0x9d, 0xfa, 0x4b, 0x23, 0x67, 0xdc, 0x8b, 0x41, 0xa7, 0xa6, 0x4d, 0xc6,
	0x7b, 0x0c, 0x2e, 0x0a, 0x6a, 0xe5, 0x9e, 0x96, 0x57, 0x50, 0x50, 0x23, 0xee, 0xc3, 0x16, 0x13,
	0x4c, 0x31, 0x52, 0x24, 0x14, 0xb3, 0x12, 0x49, 0x85, 0x49, 0x49, 0x14, 0xfa, 0xcb, 0x23, 0x67,
	0xdc, 0x8d, 0x1f, 0x58, 0xf1, 0xd0, 0x6a, 0x31, 0x51, 0xd8, 0x30, 0x59, 0x5d, 0x96, 0x28, 0xd4,
	0x7f, 0x4c, 0xdf, 0x30, 0x56, 0xfc, 0x87, 0x79, 0x09, 0x8f, 0x74, 0x01, 0xb7, 0x04, 0x13, 0x0a,
	0xcb, 0x39, 0x29, 0xfc, 0x81, 0x6e, 0xca, 0x96, 0x96, 0x5b, 0xe6, 0xc8, 0x8a, 0xde, 0x21, 0x0c,
	0xdb, 0xb3, 0x66, 0x25, 0xcb, 0xd0, 0x5f, 0x59, 0xac, 0x4b, 0xf7, 0x2c, 0xf5, 0xb1, 0x81, 0xbc,
	0x63, 0xd8, 0x30, 0x4d, 0x4e, 0x4a, 0xe4, 0x84, 0x09, 0x26, 0x72, 0xdf, 0x5d, 0xcc, 0x68, 0xdd,
	0x80, 0x71, 0xcb, 0x35, 0x6f, 0x32, 0x2b, 0x65, 0x86, 0x48, 0xab, 0x84, 0x4b, 0x5a, 0x17, 0x98,
	0x90, 0x2c, 0xd3, 0x13, 0x84, 0x91, 0x33, 0x76, 0xe3, 0xad, 0x56, 0xfe, 0xa0, 0xd5, 0x03, 0x23,
	0xee, 0xfd, 0xee, 0xc2, 0xd2, 0x94, 0xd1, 0x3b, 0x9b, 0xd0, 0xd3, 0x9b, 0xf0, 0x04, 0xda, 0x25,
	0x4c, 0x18, 0xd5, 0x4b, 0x30, 0x8c, 0x5d, 0x9b, 0x39, 0xa2, 0xde, 0x43, 0xe8, 0xa7, 0x8c, 0x52,
	0x2c, 0xf5, 0x64, 0xdd, 0xd8, 0x46, 0xde, 0x2b, 0x18, 0x70, 0x72, 0x96, 0xa4, 0x8c, 0xea, 0x99,
	0x2e, 0xf0, 0x26, 0x7d, 0x4e, 0xce, 0x9a, 0x02, 0xde, 0xc0, 0x1a, 0x67, 0x82, 0xf1, 0x9a, 0xb7,
	0x9b, 0xb7, 0xbc, 0x98, 0xc1, 0xd0, 0x62, 0x76, 0xf1, 0x8e, 0x61, 0xe3, 0xa4, 0x2e, 0x4e, 0x58,
	0x51, 0x20, 0x6d, 0x9d, 0xfa, 0x0b, 0x36, 0xf5, 0x2f, 0x68, 0xbd, 0xde, 0xc3, 0x7d, 0x9b, 0xe2,
	0xb7, 0xa3, 0x1e, 0x2c, 0x66, 0xb6, 0x71, 0x87, 0xd4, 0xe3, 0xde, 0x93, 0x00, 0x9f, 0xe4, 0x29,
	0x0a, 0x33, 0xfc, 0x4d, 0x58, 0xa6, 0x28, 0x24, 0xd7, 0x3d, 0x77, 0x63, 0x13, 0x78, 0xef, 0xc0,
	0xad, 0x2b, 0x6a, 0x4f, 0x6a, 0xba, 0xee, 0x4e, 0xc3, 0xc6, 0xee, 0xe7, 0xd5, 0xee, 0xd3, 0x9c,
	0xa9, 0x2f, 0x75, 0x1a, 0x66, 0x92, 0xdb, 0xcf, 0xdc, 0xfe, 0x3c, 0xab, 0xe8, 0x69, 0xa4, 0xce,
	0x67, 0x58, 0x85, 0x87, 0x98, 0xc5, 0x2b, 0x75, 0x45, 0xf5, 0x11, 0xd3, 0xa3, 0x8b, 0xeb, 0xc0,
	0xb9, 0xbc, 0x0e, 0x9c, 0x5f, 0xd7, 0x81, 0xf3, 0xfd, 0x26, 0xe8, 0x5c, 0xde, 0x04, 0x9d, 0x1f,
	0x37, 0x41, 0xe7, 0x73, 0x74, 0xc7, 0x6b, 0x86, 0x79, 0x7e, 0xfe, 0x75, 0x1e, 0x55, 0x92, 0x73,
	0x2c, 0x18, 0x96, 0xd1, 0xfc, 0x45, 0x74, 0xd6, 0xde, 0x48, 0xc6, 0x38, 0xed, 0xeb, 0xbb, 0xe3,
	0xf9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0x68, 0x33, 0xa7, 0xb4, 0x04, 0x00, 0x00,
}

func (m *Auction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProceedsModuleAccount) > 0 {
		i -= len(m.ProceedsModuleAccount)
		copy(dAtA[i:], m.ProceedsModuleAccount)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.ProceedsModuleAccount)))
		i--
		dAtA[i] = 0x52
	}
	{
		size, err := m.AmountRemaining.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.CurrentPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.BlockDecreaseInterval != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.BlockDecreaseInterval))
		i--
		dAtA[i] = 0x38
	}
	if m.CurrentDecreaseRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CurrentDecreaseRate))))
		i--
		dAtA[i] = 0x35
	}
	if m.InitialDecreaseRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.InitialDecreaseRate))))
		i--
		dAtA[i] = 0x2d
	}
	if m.EndBlock != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.StartBlock != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.StartingAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FulfillmentPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.FulfilledAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.MinimumAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.MaxBid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AuctionId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TokenPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UsdPrice.Size()
		i -= size
		if _, err := m.UsdPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Auction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuction(uint64(m.Id))
	}
	l = m.StartingAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.StartBlock != 0 {
		n += 1 + sovAuction(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovAuction(uint64(m.EndBlock))
	}
	if m.InitialDecreaseRate != 0 {
		n += 5
	}
	if m.CurrentDecreaseRate != 0 {
		n += 5
	}
	if m.BlockDecreaseInterval != 0 {
		n += 1 + sovAuction(uint64(m.BlockDecreaseInterval))
	}
	l = m.CurrentPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.AmountRemaining.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = len(m.ProceedsModuleAccount)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	return n
}

func (m *Bid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuction(uint64(m.Id))
	}
	if m.AuctionId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.MaxBid.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.MinimumAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.FulfilledAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.FulfillmentPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func (m *TokenPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.UsdPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Auction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialDecreaseRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.InitialDecreaseRate = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentDecreaseRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CurrentDecreaseRate = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDecreaseInterval", wireType)
			}
			m.BlockDecreaseInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockDecreaseInterval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountRemaining", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountRemaining.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProceedsModuleAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProceedsModuleAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FulfilledAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FulfilledAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FulfillmentPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FulfillmentPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsdPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
