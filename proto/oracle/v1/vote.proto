syntax = "proto3";
package oracle.v1;

import "gogoproto/gogo.proto";
// import "google/protobuf/any.proto";
// import "cosmos_proto/cosmos.proto";

option go_package = "github.com/peggyjv/sommelier/x/oracle/types";


// AggregateExchangeRatePrevote - struct to store a validator's aggregate prevote on the rate of Luna in the denom asset
// type AggregateExchangeRatePrevote struct {
// 	Hash        AggregateVoteHash `json:"hash"`  // Vote hex hash to protect centralize data source problem
// 	Voter       sdk.ValAddress    `json:"voter"` // Voter val address
// 	SubmitBlock int64             `json:"submit_block"`
// }
message AggregateExchangeRatePrevote {
    bytes hash = 1;
    string voter = 2; 
    int64 submit_block = 3;
}

// ExchangeRateTuple - struct to represent a exchange rate of Luna in the denom asset
// type ExchangeRateTuple struct {
// 	Denom        string  `json:"denom"`
// 	ExchangeRate sdk.Dec `json:"exchange_rate"`
// }
message ExchangeRateTuple {
    string denom = 1;
    string exchange_rate  = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}


// AggregateExchangeRateVote - struct to store a validator's aggregate vote on the rate of Luna in the denom asset
// type AggregateExchangeRateVote struct {
// 	ExchangeRateTuples ExchangeRateTuples `json:"exchange_rate_tuples"` // ExchangeRates of Luna in target fiat currencies
// 	Voter              sdk.ValAddress     `json:"voter"`                // voter val address of validator
// }
message AggregateExchangeRateVote {
    repeated ExchangeRateTuple exchange_rate_tuples = 1;
    string voter = 2;
}


// // Denom is the object to hold configurations of each denom
// type Denom struct {
// 	Name     string  `json:"name" yaml:"name"`
// 	TobinTax sdk.Dec `json:"tobin_tax" yaml:"tobin_tax"`
// }
message Denom {
    string name = 1;
    string tobin_tax = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}


// Claim is an interface that directs its rewards to an attached bank account.
// type Claim struct {
// 	Weight    int64          `json:"weight"`
// 	Recipient sdk.ValAddress `json:"recipient"`
// }
message Claim {
    int64 weight = 1;
    string recipient = 2;
}