// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cork/v2/proposal.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AddManagedCellarIDsProposal struct {
	Title           string       `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description     string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CellarIds       *CellarIDSet `protobuf:"bytes,3,opt,name=cellar_ids,json=cellarIds,proto3" json:"cellar_ids,omitempty"`
	PublisherDomain string       `protobuf:"bytes,4,opt,name=publisher_domain,json=publisherDomain,proto3" json:"publisher_domain,omitempty"`
}

func (m *AddManagedCellarIDsProposal) Reset()         { *m = AddManagedCellarIDsProposal{} }
func (m *AddManagedCellarIDsProposal) String() string { return proto.CompactTextString(m) }
func (*AddManagedCellarIDsProposal) ProtoMessage()    {}
func (*AddManagedCellarIDsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e01dea5e2496e85f, []int{0}
}
func (m *AddManagedCellarIDsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddManagedCellarIDsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddManagedCellarIDsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddManagedCellarIDsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddManagedCellarIDsProposal.Merge(m, src)
}
func (m *AddManagedCellarIDsProposal) XXX_Size() int {
	return m.Size()
}
func (m *AddManagedCellarIDsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AddManagedCellarIDsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AddManagedCellarIDsProposal proto.InternalMessageInfo

func (m *AddManagedCellarIDsProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AddManagedCellarIDsProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AddManagedCellarIDsProposal) GetCellarIds() *CellarIDSet {
	if m != nil {
		return m.CellarIds
	}
	return nil
}

func (m *AddManagedCellarIDsProposal) GetPublisherDomain() string {
	if m != nil {
		return m.PublisherDomain
	}
	return ""
}

// AddManagedCellarIDsProposalWithDeposit is a specific definition for CLI commands
type AddManagedCellarIDsProposalWithDeposit struct {
	Title           string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description     string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CellarIds       []string `protobuf:"bytes,3,rep,name=cellar_ids,json=cellarIds,proto3" json:"cellar_ids,omitempty"`
	PublisherDomain string   `protobuf:"bytes,4,opt,name=publisher_domain,json=publisherDomain,proto3" json:"publisher_domain,omitempty"`
	Deposit         string   `protobuf:"bytes,5,opt,name=deposit,proto3" json:"deposit,omitempty"`
}

func (m *AddManagedCellarIDsProposalWithDeposit) Reset() {
	*m = AddManagedCellarIDsProposalWithDeposit{}
}
func (m *AddManagedCellarIDsProposalWithDeposit) String() string { return proto.CompactTextString(m) }
func (*AddManagedCellarIDsProposalWithDeposit) ProtoMessage()    {}
func (*AddManagedCellarIDsProposalWithDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e01dea5e2496e85f, []int{1}
}
func (m *AddManagedCellarIDsProposalWithDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddManagedCellarIDsProposalWithDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddManagedCellarIDsProposalWithDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddManagedCellarIDsProposalWithDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddManagedCellarIDsProposalWithDeposit.Merge(m, src)
}
func (m *AddManagedCellarIDsProposalWithDeposit) XXX_Size() int {
	return m.Size()
}
func (m *AddManagedCellarIDsProposalWithDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_AddManagedCellarIDsProposalWithDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_AddManagedCellarIDsProposalWithDeposit proto.InternalMessageInfo

func (m *AddManagedCellarIDsProposalWithDeposit) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AddManagedCellarIDsProposalWithDeposit) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AddManagedCellarIDsProposalWithDeposit) GetCellarIds() []string {
	if m != nil {
		return m.CellarIds
	}
	return nil
}

func (m *AddManagedCellarIDsProposalWithDeposit) GetPublisherDomain() string {
	if m != nil {
		return m.PublisherDomain
	}
	return ""
}

func (m *AddManagedCellarIDsProposalWithDeposit) GetDeposit() string {
	if m != nil {
		return m.Deposit
	}
	return ""
}

type RemoveManagedCellarIDsProposal struct {
	Title       string       `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CellarIds   *CellarIDSet `protobuf:"bytes,3,opt,name=cellar_ids,json=cellarIds,proto3" json:"cellar_ids,omitempty"`
}

func (m *RemoveManagedCellarIDsProposal) Reset()         { *m = RemoveManagedCellarIDsProposal{} }
func (m *RemoveManagedCellarIDsProposal) String() string { return proto.CompactTextString(m) }
func (*RemoveManagedCellarIDsProposal) ProtoMessage()    {}
func (*RemoveManagedCellarIDsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e01dea5e2496e85f, []int{2}
}
func (m *RemoveManagedCellarIDsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveManagedCellarIDsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveManagedCellarIDsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveManagedCellarIDsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveManagedCellarIDsProposal.Merge(m, src)
}
func (m *RemoveManagedCellarIDsProposal) XXX_Size() int {
	return m.Size()
}
func (m *RemoveManagedCellarIDsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveManagedCellarIDsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveManagedCellarIDsProposal proto.InternalMessageInfo

func (m *RemoveManagedCellarIDsProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RemoveManagedCellarIDsProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RemoveManagedCellarIDsProposal) GetCellarIds() *CellarIDSet {
	if m != nil {
		return m.CellarIds
	}
	return nil
}

// RemoveManagedCellarIDsProposalWithDeposit is a specific definition for CLI commands
type RemoveManagedCellarIDsProposalWithDeposit struct {
	Title       string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CellarIds   []string `protobuf:"bytes,3,rep,name=cellar_ids,json=cellarIds,proto3" json:"cellar_ids,omitempty"`
	Deposit     string   `protobuf:"bytes,4,opt,name=deposit,proto3" json:"deposit,omitempty"`
}

func (m *RemoveManagedCellarIDsProposalWithDeposit) Reset() {
	*m = RemoveManagedCellarIDsProposalWithDeposit{}
}
func (m *RemoveManagedCellarIDsProposalWithDeposit) String() string {
	return proto.CompactTextString(m)
}
func (*RemoveManagedCellarIDsProposalWithDeposit) ProtoMessage() {}
func (*RemoveManagedCellarIDsProposalWithDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e01dea5e2496e85f, []int{3}
}
func (m *RemoveManagedCellarIDsProposalWithDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveManagedCellarIDsProposalWithDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveManagedCellarIDsProposalWithDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveManagedCellarIDsProposalWithDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveManagedCellarIDsProposalWithDeposit.Merge(m, src)
}
func (m *RemoveManagedCellarIDsProposalWithDeposit) XXX_Size() int {
	return m.Size()
}
func (m *RemoveManagedCellarIDsProposalWithDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveManagedCellarIDsProposalWithDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveManagedCellarIDsProposalWithDeposit proto.InternalMessageInfo

func (m *RemoveManagedCellarIDsProposalWithDeposit) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RemoveManagedCellarIDsProposalWithDeposit) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RemoveManagedCellarIDsProposalWithDeposit) GetCellarIds() []string {
	if m != nil {
		return m.CellarIds
	}
	return nil
}

func (m *RemoveManagedCellarIDsProposalWithDeposit) GetDeposit() string {
	if m != nil {
		return m.Deposit
	}
	return ""
}

type ScheduledCorkProposal struct {
	Title                 string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description           string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	BlockHeight           uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TargetContractAddress string `protobuf:"bytes,4,opt,name=target_contract_address,json=targetContractAddress,proto3" json:"target_contract_address,omitempty"`
	//
	// The JSON representation of a ScheduleRequest defined in the Steward protos
	//
	// Example: The following is the JSON form of a ScheduleRequest containing a steward.v2.cellar_v1.TrustPosition
	// message, which maps to the `trustPosition(address)` function of the the V1 Cellar contract.
	//
	// {
	//   "cellar_id": "0x1234567890000000000000000000000000000000",
	//   "cellar_v1": {
	//     "trust_position": {
	//       "erc20_address": "0x1234567890000000000000000000000000000000"
	//     }
	//   },
	//   "block_height": 1000000
	// }
	//
	// You can use the Steward CLI to generate the required JSON rather than constructing it by hand https://github.com/peggyjv/steward
	ContractCallProtoJson string `protobuf:"bytes,5,opt,name=contract_call_proto_json,json=contractCallProtoJson,proto3" json:"contract_call_proto_json,omitempty"`
}

func (m *ScheduledCorkProposal) Reset()         { *m = ScheduledCorkProposal{} }
func (m *ScheduledCorkProposal) String() string { return proto.CompactTextString(m) }
func (*ScheduledCorkProposal) ProtoMessage()    {}
func (*ScheduledCorkProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e01dea5e2496e85f, []int{4}
}
func (m *ScheduledCorkProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduledCorkProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduledCorkProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduledCorkProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledCorkProposal.Merge(m, src)
}
func (m *ScheduledCorkProposal) XXX_Size() int {
	return m.Size()
}
func (m *ScheduledCorkProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledCorkProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledCorkProposal proto.InternalMessageInfo

func (m *ScheduledCorkProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ScheduledCorkProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ScheduledCorkProposal) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ScheduledCorkProposal) GetTargetContractAddress() string {
	if m != nil {
		return m.TargetContractAddress
	}
	return ""
}

func (m *ScheduledCorkProposal) GetContractCallProtoJson() string {
	if m != nil {
		return m.ContractCallProtoJson
	}
	return ""
}

// ScheduledCorkProposalWithDeposit is a specific definition for CLI commands
type ScheduledCorkProposalWithDeposit struct {
	Title                 string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description           string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	BlockHeight           uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TargetContractAddress string `protobuf:"bytes,4,opt,name=target_contract_address,json=targetContractAddress,proto3" json:"target_contract_address,omitempty"`
	ContractCallProtoJson string `protobuf:"bytes,5,opt,name=contract_call_proto_json,json=contractCallProtoJson,proto3" json:"contract_call_proto_json,omitempty"`
	Deposit               string `protobuf:"bytes,6,opt,name=deposit,proto3" json:"deposit,omitempty"`
}

func (m *ScheduledCorkProposalWithDeposit) Reset()         { *m = ScheduledCorkProposalWithDeposit{} }
func (m *ScheduledCorkProposalWithDeposit) String() string { return proto.CompactTextString(m) }
func (*ScheduledCorkProposalWithDeposit) ProtoMessage()    {}
func (*ScheduledCorkProposalWithDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e01dea5e2496e85f, []int{5}
}
func (m *ScheduledCorkProposalWithDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduledCorkProposalWithDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduledCorkProposalWithDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduledCorkProposalWithDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledCorkProposalWithDeposit.Merge(m, src)
}
func (m *ScheduledCorkProposalWithDeposit) XXX_Size() int {
	return m.Size()
}
func (m *ScheduledCorkProposalWithDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledCorkProposalWithDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledCorkProposalWithDeposit proto.InternalMessageInfo

func (m *ScheduledCorkProposalWithDeposit) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ScheduledCorkProposalWithDeposit) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ScheduledCorkProposalWithDeposit) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ScheduledCorkProposalWithDeposit) GetTargetContractAddress() string {
	if m != nil {
		return m.TargetContractAddress
	}
	return ""
}

func (m *ScheduledCorkProposalWithDeposit) GetContractCallProtoJson() string {
	if m != nil {
		return m.ContractCallProtoJson
	}
	return ""
}

func (m *ScheduledCorkProposalWithDeposit) GetDeposit() string {
	if m != nil {
		return m.Deposit
	}
	return ""
}

func init() {
	proto.RegisterType((*AddManagedCellarIDsProposal)(nil), "cork.v2.AddManagedCellarIDsProposal")
	proto.RegisterType((*AddManagedCellarIDsProposalWithDeposit)(nil), "cork.v2.AddManagedCellarIDsProposalWithDeposit")
	proto.RegisterType((*RemoveManagedCellarIDsProposal)(nil), "cork.v2.RemoveManagedCellarIDsProposal")
	proto.RegisterType((*RemoveManagedCellarIDsProposalWithDeposit)(nil), "cork.v2.RemoveManagedCellarIDsProposalWithDeposit")
	proto.RegisterType((*ScheduledCorkProposal)(nil), "cork.v2.ScheduledCorkProposal")
	proto.RegisterType((*ScheduledCorkProposalWithDeposit)(nil), "cork.v2.ScheduledCorkProposalWithDeposit")
}

func init() { proto.RegisterFile("cork/v2/proposal.proto", fileDescriptor_e01dea5e2496e85f) }

var fileDescriptor_e01dea5e2496e85f = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xc1, 0x6a, 0x13, 0x41,
	0x18, 0xce, 0xb4, 0x69, 0x4b, 0x26, 0x82, 0x32, 0x34, 0xba, 0x28, 0x2e, 0x71, 0x0f, 0x92, 0x82,
	0xec, 0x42, 0x0a, 0xf6, 0x5c, 0x13, 0xc4, 0x0a, 0x42, 0x49, 0x0f, 0x82, 0x97, 0x65, 0x32, 0xf3,
	0xb3, 0x3b, 0xcd, 0xec, 0xce, 0x30, 0x33, 0x59, 0xec, 0x1b, 0x78, 0x11, 0x7c, 0x00, 0x5f, 0xc3,
	0x37, 0xf0, 0xe0, 0xb1, 0x47, 0x8f, 0x92, 0xbc, 0x88, 0x74, 0x76, 0x53, 0x52, 0x91, 0x1e, 0xaa,
	0x94, 0x1e, 0xff, 0xef, 0xfb, 0xf7, 0xdf, 0xef, 0xfb, 0xfe, 0x99, 0xc1, 0x0f, 0x99, 0x32, 0xb3,
	0xa4, 0x1a, 0x26, 0xda, 0x28, 0xad, 0x2c, 0x95, 0xb1, 0x36, 0xca, 0x29, 0xb2, 0x73, 0x81, 0xc7,
	0xd5, 0xf0, 0x31, 0x59, 0x35, 0x78, 0xc0, 0x93, 0xd1, 0x37, 0x84, 0x9f, 0x1c, 0x72, 0xfe, 0x8e,
	0x96, 0x34, 0x03, 0x3e, 0x02, 0x29, 0xa9, 0x39, 0x1a, 0xdb, 0xe3, 0x66, 0x04, 0xd9, 0xc5, 0x5b,
	0x4e, 0x38, 0x09, 0x01, 0xea, 0xa3, 0x41, 0x67, 0x52, 0x17, 0xa4, 0x8f, 0xbb, 0x1c, 0x2c, 0x33,
	0x42, 0x3b, 0xa1, 0xca, 0x60, 0xc3, 0x73, 0xeb, 0x10, 0xd9, 0xc7, 0x98, 0xf9, 0x61, 0xa9, 0xe0,
	0x36, 0xd8, 0xec, 0xa3, 0x41, 0x77, 0xb8, 0x1b, 0x37, 0x4a, 0xe2, 0xd5, 0x7f, 0x4e, 0xc0, 0x4d,
	0x3a, 0x75, 0xdf, 0x11, 0xb7, 0x64, 0x0f, 0x3f, 0xd0, 0xf3, 0xa9, 0x14, 0x36, 0x07, 0x93, 0x72,
	0x55, 0x50, 0x51, 0x06, 0x6d, 0x3f, 0xfb, 0xfe, 0x25, 0x3e, 0xf6, 0x70, 0xf4, 0x1d, 0xe1, 0xe7,
	0xd7, 0xe8, 0x7e, 0x2f, 0x5c, 0x3e, 0x06, 0xad, 0xac, 0x70, 0x37, 0xb6, 0xf0, 0xf4, 0x0f, 0x0b,
	0x9b, 0x83, 0xce, 0xcd, 0xc4, 0x92, 0x00, 0xef, 0xf0, 0x5a, 0x4c, 0xb0, 0xe5, 0x3b, 0x56, 0x65,
	0xf4, 0x19, 0xe1, 0x70, 0x02, 0x85, 0xaa, 0xe0, 0x4e, 0x6c, 0x20, 0xfa, 0x8a, 0xf0, 0xde, 0xf5,
	0x7a, 0x6e, 0x21, 0xd9, 0xb5, 0xb8, 0xda, 0x57, 0xe3, 0x5a, 0x22, 0xdc, 0x3b, 0x61, 0x39, 0xf0,
	0xb9, 0x04, 0x3e, 0x52, 0x66, 0xf6, 0xcf, 0x29, 0x3d, 0xc3, 0xf7, 0xa6, 0x52, 0xb1, 0x59, 0x9a,
	0x83, 0xc8, 0x72, 0xe7, 0x73, 0x6a, 0x4f, 0xba, 0x1e, 0x7b, 0xe3, 0x21, 0xf2, 0x12, 0x3f, 0x72,
	0xd4, 0x64, 0xe0, 0x52, 0xa6, 0x4a, 0x67, 0x28, 0x73, 0x29, 0xe5, 0xdc, 0x80, 0xb5, 0x8d, 0xbc,
	0x5e, 0x4d, 0x8f, 0x1a, 0xf6, 0xb0, 0x26, 0xc9, 0x01, 0x0e, 0x2e, 0x3f, 0x60, 0x54, 0xca, 0xd4,
	0xdf, 0xb8, 0xf4, 0xd4, 0xaa, 0xb2, 0x39, 0x06, 0xbd, 0x15, 0x3f, 0xa2, 0x52, 0x1e, 0x5f, 0xb0,
	0x6f, 0xad, 0x2a, 0xa3, 0x4f, 0x1b, 0xb8, 0xff, 0x57, 0x97, 0xff, 0x23, 0xfb, 0x3b, 0x68, 0x78,
	0x7d, 0xe1, 0xdb, 0x57, 0x16, 0xfe, 0xea, 0xf5, 0x8f, 0x45, 0x88, 0xce, 0x17, 0x21, 0xfa, 0xb5,
	0x08, 0xd1, 0x97, 0x65, 0xd8, 0x3a, 0x5f, 0x86, 0xad, 0x9f, 0xcb, 0xb0, 0xf5, 0xe1, 0x45, 0x26,
	0x5c, 0x3e, 0x9f, 0xc6, 0x4c, 0x15, 0x89, 0x86, 0x2c, 0x3b, 0x3b, 0xad, 0x12, 0xab, 0x8a, 0x02,
	0xa4, 0x00, 0x93, 0x54, 0x07, 0xc9, 0x47, 0xff, 0xcc, 0x25, 0xee, 0x4c, 0x83, 0x9d, 0x6e, 0x7b,
	0x29, 0xfb, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xd4, 0xbf, 0x65, 0x24, 0x05, 0x00, 0x00,
}

func (m *AddManagedCellarIDsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddManagedCellarIDsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddManagedCellarIDsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublisherDomain) > 0 {
		i -= len(m.PublisherDomain)
		copy(dAtA[i:], m.PublisherDomain)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PublisherDomain)))
		i--
		dAtA[i] = 0x22
	}
	if m.CellarIds != nil {
		{
			size, err := m.CellarIds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddManagedCellarIDsProposalWithDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddManagedCellarIDsProposalWithDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddManagedCellarIDsProposalWithDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PublisherDomain) > 0 {
		i -= len(m.PublisherDomain)
		copy(dAtA[i:], m.PublisherDomain)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PublisherDomain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CellarIds) > 0 {
		for iNdEx := len(m.CellarIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CellarIds[iNdEx])
			copy(dAtA[i:], m.CellarIds[iNdEx])
			i = encodeVarintProposal(dAtA, i, uint64(len(m.CellarIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveManagedCellarIDsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveManagedCellarIDsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveManagedCellarIDsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CellarIds != nil {
		{
			size, err := m.CellarIds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveManagedCellarIDsProposalWithDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveManagedCellarIDsProposalWithDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveManagedCellarIDsProposalWithDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CellarIds) > 0 {
		for iNdEx := len(m.CellarIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CellarIds[iNdEx])
			copy(dAtA[i:], m.CellarIds[iNdEx])
			i = encodeVarintProposal(dAtA, i, uint64(len(m.CellarIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScheduledCorkProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledCorkProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduledCorkProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractCallProtoJson) > 0 {
		i -= len(m.ContractCallProtoJson)
		copy(dAtA[i:], m.ContractCallProtoJson)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ContractCallProtoJson)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TargetContractAddress) > 0 {
		i -= len(m.TargetContractAddress)
		copy(dAtA[i:], m.TargetContractAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.TargetContractAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScheduledCorkProposalWithDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledCorkProposalWithDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduledCorkProposalWithDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ContractCallProtoJson) > 0 {
		i -= len(m.ContractCallProtoJson)
		copy(dAtA[i:], m.ContractCallProtoJson)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ContractCallProtoJson)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TargetContractAddress) > 0 {
		i -= len(m.TargetContractAddress)
		copy(dAtA[i:], m.TargetContractAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.TargetContractAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddManagedCellarIDsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.CellarIds != nil {
		l = m.CellarIds.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.PublisherDomain)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *AddManagedCellarIDsProposalWithDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.CellarIds) > 0 {
		for _, s := range m.CellarIds {
			l = len(s)
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	l = len(m.PublisherDomain)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *RemoveManagedCellarIDsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.CellarIds != nil {
		l = m.CellarIds.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *RemoveManagedCellarIDsProposalWithDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.CellarIds) > 0 {
		for _, s := range m.CellarIds {
			l = len(s)
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *ScheduledCorkProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovProposal(uint64(m.BlockHeight))
	}
	l = len(m.TargetContractAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ContractCallProtoJson)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *ScheduledCorkProposalWithDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovProposal(uint64(m.BlockHeight))
	}
	l = len(m.TargetContractAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ContractCallProtoJson)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddManagedCellarIDsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddManagedCellarIDsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddManagedCellarIDsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CellarIds == nil {
				m.CellarIds = &CellarIDSet{}
			}
			if err := m.CellarIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublisherDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublisherDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddManagedCellarIDsProposalWithDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddManagedCellarIDsProposalWithDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddManagedCellarIDsProposalWithDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellarIds = append(m.CellarIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublisherDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublisherDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveManagedCellarIDsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveManagedCellarIDsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveManagedCellarIDsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CellarIds == nil {
				m.CellarIds = &CellarIDSet{}
			}
			if err := m.CellarIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveManagedCellarIDsProposalWithDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveManagedCellarIDsProposalWithDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveManagedCellarIDsProposalWithDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellarIds = append(m.CellarIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledCorkProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledCorkProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledCorkProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCallProtoJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractCallProtoJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledCorkProposalWithDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledCorkProposalWithDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledCorkProposalWithDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCallProtoJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractCallProtoJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
