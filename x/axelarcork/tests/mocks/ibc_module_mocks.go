// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/mv/go/pkg/mod/github.com/cosmos/ibc-go/v6@v3.4.0/modules/core/05-port/types/module.go

// Package mock_types is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/cosmos/cosmos-sdk/x/capability/types"
	types1 "github.com/cosmos/ibc-go/v6/modules/core/04-channel/types"
	exported "github.com/cosmos/ibc-go/v6/modules/core/exported"
	gomock "github.com/golang/mock/gomock"
)

// MockIBCModule is a mock of IBCModule interface.
type MockIBCModule struct {
	ctrl     *gomock.Controller
	recorder *MockIBCModuleMockRecorder
}

// MockIBCModuleMockRecorder is the mock recorder for MockIBCModule.
type MockIBCModuleMockRecorder struct {
	mock *MockIBCModule
}

// NewMockIBCModule creates a new mock instance.
func NewMockIBCModule(ctrl *gomock.Controller) *MockIBCModule {
	mock := &MockIBCModule{ctrl: ctrl}
	mock.recorder = &MockIBCModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBCModule) EXPECT() *MockIBCModuleMockRecorder {
	return m.recorder
}

// OnAcknowledgementPacket mocks base method.
func (m *MockIBCModule) OnAcknowledgementPacket(ctx types.Context, packet types1.Packet, acknowledgement []byte, relayer types.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnAcknowledgementPacket", ctx, packet, acknowledgement, relayer)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnAcknowledgementPacket indicates an expected call of OnAcknowledgementPacket.
func (mr *MockIBCModuleMockRecorder) OnAcknowledgementPacket(ctx, packet, acknowledgement, relayer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAcknowledgementPacket", reflect.TypeOf((*MockIBCModule)(nil).OnAcknowledgementPacket), ctx, packet, acknowledgement, relayer)
}

// OnChanCloseConfirm mocks base method.
func (m *MockIBCModule) OnChanCloseConfirm(ctx types.Context, portID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnChanCloseConfirm", ctx, portID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnChanCloseConfirm indicates an expected call of OnChanCloseConfirm.
func (mr *MockIBCModuleMockRecorder) OnChanCloseConfirm(ctx, portID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChanCloseConfirm", reflect.TypeOf((*MockIBCModule)(nil).OnChanCloseConfirm), ctx, portID, channelID)
}

// OnChanCloseInit mocks base method.
func (m *MockIBCModule) OnChanCloseInit(ctx types.Context, portID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnChanCloseInit", ctx, portID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnChanCloseInit indicates an expected call of OnChanCloseInit.
func (mr *MockIBCModuleMockRecorder) OnChanCloseInit(ctx, portID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChanCloseInit", reflect.TypeOf((*MockIBCModule)(nil).OnChanCloseInit), ctx, portID, channelID)
}

// OnChanOpenAck mocks base method.
func (m *MockIBCModule) OnChanOpenAck(ctx types.Context, portID, channelID, counterpartyChannelID, counterpartyVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnChanOpenAck", ctx, portID, channelID, counterpartyChannelID, counterpartyVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnChanOpenAck indicates an expected call of OnChanOpenAck.
func (mr *MockIBCModuleMockRecorder) OnChanOpenAck(ctx, portID, channelID, counterpartyChannelID, counterpartyVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChanOpenAck", reflect.TypeOf((*MockIBCModule)(nil).OnChanOpenAck), ctx, portID, channelID, counterpartyChannelID, counterpartyVersion)
}

// OnChanOpenConfirm mocks base method.
func (m *MockIBCModule) OnChanOpenConfirm(ctx types.Context, portID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnChanOpenConfirm", ctx, portID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnChanOpenConfirm indicates an expected call of OnChanOpenConfirm.
func (mr *MockIBCModuleMockRecorder) OnChanOpenConfirm(ctx, portID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChanOpenConfirm", reflect.TypeOf((*MockIBCModule)(nil).OnChanOpenConfirm), ctx, portID, channelID)
}

// OnChanOpenInit mocks base method.
func (m *MockIBCModule) OnChanOpenInit(ctx types.Context, order types1.Order, connectionHops []string, portID, channelID string, channelCap *types0.Capability, counterparty types1.Counterparty, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnChanOpenInit", ctx, order, connectionHops, portID, channelID, channelCap, counterparty, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnChanOpenInit indicates an expected call of OnChanOpenInit.
func (mr *MockIBCModuleMockRecorder) OnChanOpenInit(ctx, order, connectionHops, portID, channelID, channelCap, counterparty, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChanOpenInit", reflect.TypeOf((*MockIBCModule)(nil).OnChanOpenInit), ctx, order, connectionHops, portID, channelID, channelCap, counterparty, version)
}

// OnChanOpenTry mocks base method.
func (m *MockIBCModule) OnChanOpenTry(ctx types.Context, order types1.Order, connectionHops []string, portID, channelID string, channelCap *types0.Capability, counterparty types1.Counterparty, counterpartyVersion string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnChanOpenTry", ctx, order, connectionHops, portID, channelID, channelCap, counterparty, counterpartyVersion)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnChanOpenTry indicates an expected call of OnChanOpenTry.
func (mr *MockIBCModuleMockRecorder) OnChanOpenTry(ctx, order, connectionHops, portID, channelID, channelCap, counterparty, counterpartyVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChanOpenTry", reflect.TypeOf((*MockIBCModule)(nil).OnChanOpenTry), ctx, order, connectionHops, portID, channelID, channelCap, counterparty, counterpartyVersion)
}

// OnRecvPacket mocks base method.
func (m *MockIBCModule) OnRecvPacket(ctx types.Context, packet types1.Packet, relayer types.AccAddress) exported.Acknowledgement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnRecvPacket", ctx, packet, relayer)
	ret0, _ := ret[0].(exported.Acknowledgement)
	return ret0
}

// OnRecvPacket indicates an expected call of OnRecvPacket.
func (mr *MockIBCModuleMockRecorder) OnRecvPacket(ctx, packet, relayer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRecvPacket", reflect.TypeOf((*MockIBCModule)(nil).OnRecvPacket), ctx, packet, relayer)
}

// OnTimeoutPacket mocks base method.
func (m *MockIBCModule) OnTimeoutPacket(ctx types.Context, packet types1.Packet, relayer types.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnTimeoutPacket", ctx, packet, relayer)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnTimeoutPacket indicates an expected call of OnTimeoutPacket.
func (mr *MockIBCModuleMockRecorder) OnTimeoutPacket(ctx, packet, relayer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnTimeoutPacket", reflect.TypeOf((*MockIBCModule)(nil).OnTimeoutPacket), ctx, packet, relayer)
}

// MockMiddleware is a mock of Middleware interface.
type MockMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareMockRecorder
}

// MockMiddlewareMockRecorder is the mock recorder for MockMiddleware.
type MockMiddlewareMockRecorder struct {
	mock *MockMiddleware
}

// NewMockMiddleware creates a new mock instance.
func NewMockMiddleware(ctrl *gomock.Controller) *MockMiddleware {
	mock := &MockMiddleware{ctrl: ctrl}
	mock.recorder = &MockMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddleware) EXPECT() *MockMiddlewareMockRecorder {
	return m.recorder
}

// OnAcknowledgementPacket mocks base method.
func (m *MockMiddleware) OnAcknowledgementPacket(ctx types.Context, packet types1.Packet, acknowledgement []byte, relayer types.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnAcknowledgementPacket", ctx, packet, acknowledgement, relayer)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnAcknowledgementPacket indicates an expected call of OnAcknowledgementPacket.
func (mr *MockMiddlewareMockRecorder) OnAcknowledgementPacket(ctx, packet, acknowledgement, relayer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAcknowledgementPacket", reflect.TypeOf((*MockMiddleware)(nil).OnAcknowledgementPacket), ctx, packet, acknowledgement, relayer)
}

// OnChanCloseConfirm mocks base method.
func (m *MockMiddleware) OnChanCloseConfirm(ctx types.Context, portID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnChanCloseConfirm", ctx, portID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnChanCloseConfirm indicates an expected call of OnChanCloseConfirm.
func (mr *MockMiddlewareMockRecorder) OnChanCloseConfirm(ctx, portID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChanCloseConfirm", reflect.TypeOf((*MockMiddleware)(nil).OnChanCloseConfirm), ctx, portID, channelID)
}

// OnChanCloseInit mocks base method.
func (m *MockMiddleware) OnChanCloseInit(ctx types.Context, portID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnChanCloseInit", ctx, portID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnChanCloseInit indicates an expected call of OnChanCloseInit.
func (mr *MockMiddlewareMockRecorder) OnChanCloseInit(ctx, portID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChanCloseInit", reflect.TypeOf((*MockMiddleware)(nil).OnChanCloseInit), ctx, portID, channelID)
}

// OnChanOpenAck mocks base method.
func (m *MockMiddleware) OnChanOpenAck(ctx types.Context, portID, channelID, counterpartyChannelID, counterpartyVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnChanOpenAck", ctx, portID, channelID, counterpartyChannelID, counterpartyVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnChanOpenAck indicates an expected call of OnChanOpenAck.
func (mr *MockMiddlewareMockRecorder) OnChanOpenAck(ctx, portID, channelID, counterpartyChannelID, counterpartyVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChanOpenAck", reflect.TypeOf((*MockMiddleware)(nil).OnChanOpenAck), ctx, portID, channelID, counterpartyChannelID, counterpartyVersion)
}

// OnChanOpenConfirm mocks base method.
func (m *MockMiddleware) OnChanOpenConfirm(ctx types.Context, portID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnChanOpenConfirm", ctx, portID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnChanOpenConfirm indicates an expected call of OnChanOpenConfirm.
func (mr *MockMiddlewareMockRecorder) OnChanOpenConfirm(ctx, portID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChanOpenConfirm", reflect.TypeOf((*MockMiddleware)(nil).OnChanOpenConfirm), ctx, portID, channelID)
}

// OnChanOpenInit mocks base method.
func (m *MockMiddleware) OnChanOpenInit(ctx types.Context, order types1.Order, connectionHops []string, portID, channelID string, channelCap *types0.Capability, counterparty types1.Counterparty, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnChanOpenInit", ctx, order, connectionHops, portID, channelID, channelCap, counterparty, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnChanOpenInit indicates an expected call of OnChanOpenInit.
func (mr *MockMiddlewareMockRecorder) OnChanOpenInit(ctx, order, connectionHops, portID, channelID, channelCap, counterparty, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChanOpenInit", reflect.TypeOf((*MockMiddleware)(nil).OnChanOpenInit), ctx, order, connectionHops, portID, channelID, channelCap, counterparty, version)
}

// OnChanOpenTry mocks base method.
func (m *MockMiddleware) OnChanOpenTry(ctx types.Context, order types1.Order, connectionHops []string, portID, channelID string, channelCap *types0.Capability, counterparty types1.Counterparty, counterpartyVersion string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnChanOpenTry", ctx, order, connectionHops, portID, channelID, channelCap, counterparty, counterpartyVersion)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnChanOpenTry indicates an expected call of OnChanOpenTry.
func (mr *MockMiddlewareMockRecorder) OnChanOpenTry(ctx, order, connectionHops, portID, channelID, channelCap, counterparty, counterpartyVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChanOpenTry", reflect.TypeOf((*MockMiddleware)(nil).OnChanOpenTry), ctx, order, connectionHops, portID, channelID, channelCap, counterparty, counterpartyVersion)
}

// OnRecvPacket mocks base method.
func (m *MockMiddleware) OnRecvPacket(ctx types.Context, packet types1.Packet, relayer types.AccAddress) exported.Acknowledgement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnRecvPacket", ctx, packet, relayer)
	ret0, _ := ret[0].(exported.Acknowledgement)
	return ret0
}

// OnRecvPacket indicates an expected call of OnRecvPacket.
func (mr *MockMiddlewareMockRecorder) OnRecvPacket(ctx, packet, relayer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRecvPacket", reflect.TypeOf((*MockMiddleware)(nil).OnRecvPacket), ctx, packet, relayer)
}

// OnTimeoutPacket mocks base method.
func (m *MockMiddleware) OnTimeoutPacket(ctx types.Context, packet types1.Packet, relayer types.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnTimeoutPacket", ctx, packet, relayer)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnTimeoutPacket indicates an expected call of OnTimeoutPacket.
func (mr *MockMiddlewareMockRecorder) OnTimeoutPacket(ctx, packet, relayer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnTimeoutPacket", reflect.TypeOf((*MockMiddleware)(nil).OnTimeoutPacket), ctx, packet, relayer)
}

// SendPacket mocks base method.
func (m *MockMiddleware) SendPacket(ctx types.Context, chanCap *types0.Capability, packet exported.PacketI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPacket", ctx, chanCap, packet)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPacket indicates an expected call of SendPacket.
func (mr *MockMiddlewareMockRecorder) SendPacket(ctx, chanCap, packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPacket", reflect.TypeOf((*MockMiddleware)(nil).SendPacket), ctx, chanCap, packet)
}

// WriteAcknowledgement mocks base method.
func (m *MockMiddleware) WriteAcknowledgement(ctx types.Context, chanCap *types0.Capability, packet exported.PacketI, ack exported.Acknowledgement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAcknowledgement", ctx, chanCap, packet, ack)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAcknowledgement indicates an expected call of WriteAcknowledgement.
func (mr *MockMiddlewareMockRecorder) WriteAcknowledgement(ctx, chanCap, packet, ack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAcknowledgement", reflect.TypeOf((*MockMiddleware)(nil).WriteAcknowledgement), ctx, chanCap, packet, ack)
}
