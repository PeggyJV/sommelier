// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cellarfees/v1/cellarfees.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CellarFeePool struct {
	Pool github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=pool,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"pool"`
}

func (m *CellarFeePool) Reset()         { *m = CellarFeePool{} }
func (m *CellarFeePool) String() string { return proto.CompactTextString(m) }
func (*CellarFeePool) ProtoMessage()    {}
func (*CellarFeePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_34c89ca12b610c1b, []int{0}
}
func (m *CellarFeePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellarFeePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellarFeePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellarFeePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellarFeePool.Merge(m, src)
}
func (m *CellarFeePool) XXX_Size() int {
	return m.Size()
}
func (m *CellarFeePool) XXX_DiscardUnknown() {
	xxx_messageInfo_CellarFeePool.DiscardUnknown(m)
}

var xxx_messageInfo_CellarFeePool proto.InternalMessageInfo

func (m *CellarFeePool) GetPool() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Pool
	}
	return nil
}

type FeeAccrualCounter struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Count uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *FeeAccrualCounter) Reset()         { *m = FeeAccrualCounter{} }
func (m *FeeAccrualCounter) String() string { return proto.CompactTextString(m) }
func (*FeeAccrualCounter) ProtoMessage()    {}
func (*FeeAccrualCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_34c89ca12b610c1b, []int{1}
}
func (m *FeeAccrualCounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeAccrualCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeAccrualCounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeAccrualCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeAccrualCounter.Merge(m, src)
}
func (m *FeeAccrualCounter) XXX_Size() int {
	return m.Size()
}
func (m *FeeAccrualCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeAccrualCounter.DiscardUnknown(m)
}

var xxx_messageInfo_FeeAccrualCounter proto.InternalMessageInfo

func (m *FeeAccrualCounter) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *FeeAccrualCounter) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type FeeAccrualCounters struct {
	Counters []FeeAccrualCounter `protobuf:"bytes,1,rep,name=counters,proto3" json:"counters"`
}

func (m *FeeAccrualCounters) Reset()         { *m = FeeAccrualCounters{} }
func (m *FeeAccrualCounters) String() string { return proto.CompactTextString(m) }
func (*FeeAccrualCounters) ProtoMessage()    {}
func (*FeeAccrualCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor_34c89ca12b610c1b, []int{2}
}
func (m *FeeAccrualCounters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeAccrualCounters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeAccrualCounters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeAccrualCounters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeAccrualCounters.Merge(m, src)
}
func (m *FeeAccrualCounters) XXX_Size() int {
	return m.Size()
}
func (m *FeeAccrualCounters) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeAccrualCounters.DiscardUnknown(m)
}

var xxx_messageInfo_FeeAccrualCounters proto.InternalMessageInfo

func (m *FeeAccrualCounters) GetCounters() []FeeAccrualCounter {
	if m != nil {
		return m.Counters
	}
	return nil
}

func init() {
	proto.RegisterType((*CellarFeePool)(nil), "cellarfees.v1.CellarFeePool")
	proto.RegisterType((*FeeAccrualCounter)(nil), "cellarfees.v1.FeeAccrualCounter")
	proto.RegisterType((*FeeAccrualCounters)(nil), "cellarfees.v1.FeeAccrualCounters")
}

func init() { proto.RegisterFile("cellarfees/v1/cellarfees.proto", fileDescriptor_34c89ca12b610c1b) }

var fileDescriptor_34c89ca12b610c1b = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xbf, 0x4e, 0xeb, 0x30,
	0x14, 0xc6, 0xe3, 0x7b, 0x0b, 0x02, 0xa3, 0x0e, 0x44, 0x1d, 0x4a, 0x07, 0x37, 0xea, 0x94, 0x05,
	0x9b, 0x14, 0x76, 0x44, 0x2a, 0x75, 0x62, 0x40, 0x99, 0x10, 0x0b, 0x4a, 0xdc, 0x43, 0x08, 0x38,
	0x39, 0x51, 0x9c, 0x46, 0xf4, 0x2d, 0x78, 0x0e, 0x9e, 0xa4, 0x63, 0x47, 0x26, 0x40, 0xed, 0x8b,
	0xa0, 0xc4, 0x11, 0x14, 0x75, 0xf2, 0xf9, 0xf7, 0xfb, 0xec, 0xef, 0x98, 0x32, 0x09, 0x4a, 0x85,
	0xc5, 0x03, 0x80, 0x16, 0x95, 0x27, 0x7e, 0x33, 0x9e, 0x17, 0x58, 0xa2, 0xdd, 0xdd, 0xaa, 0x54,
	0xde, 0xa0, 0x17, 0x63, 0x8c, 0x4d, 0x47, 0xd4, 0x91, 0x19, 0x1a, 0x30, 0x89, 0x3a, 0x45, 0x2d,
	0xa2, 0x50, 0x83, 0xa8, 0xbc, 0x08, 0xca, 0xd0, 0x13, 0x12, 0x93, 0xcc, 0xf4, 0x47, 0x39, 0xed,
	0x4e, 0x1a, 0x99, 0x29, 0xc0, 0x0d, 0xa2, 0xb2, 0xef, 0x69, 0x27, 0x47, 0x54, 0x7d, 0xe2, 0xfc,
	0x77, 0x8f, 0xc6, 0x27, 0xdc, 0xf0, 0xbc, 0xe6, 0x79, 0xcb, 0xf3, 0x09, 0x26, 0x99, 0x7f, 0xb6,
	0xfc, 0x18, 0x5a, 0x6f, 0x9f, 0x43, 0x37, 0x4e, 0xca, 0xc7, 0x79, 0xc4, 0x25, 0xa6, 0xa2, 0xbd,
	0xcc, 0x1c, 0xa7, 0x7a, 0xf6, 0x2c, 0xca, 0x45, 0x0e, 0xba, 0x01, 0x74, 0xd0, 0x08, 0x8f, 0x2e,
	0xe9, 0xf1, 0x14, 0xe0, 0x4a, 0xca, 0x62, 0x1e, 0xaa, 0x09, 0xce, 0xb3, 0x12, 0x0a, 0xbb, 0x47,
	0xf7, 0x66, 0x90, 0x61, 0xda, 0x27, 0x0e, 0x71, 0x0f, 0x03, 0x93, 0xd4, 0x55, 0x59, 0x0f, 0xf4,
	0xff, 0x39, 0xc4, 0xed, 0x04, 0x26, 0x19, 0xdd, 0x52, 0x7b, 0x47, 0x40, 0xdb, 0x3e, 0x3d, 0x90,
	0x6d, 0xdc, 0xbe, 0xdd, 0xe1, 0x7f, 0x16, 0xc4, 0x77, 0x20, 0xbf, 0x53, 0x5b, 0x08, 0x7e, 0x38,
	0xff, 0x7a, 0xb9, 0x66, 0x64, 0xb5, 0x66, 0xe4, 0x6b, 0xcd, 0xc8, 0xeb, 0x86, 0x59, 0xab, 0x0d,
	0xb3, 0xde, 0x37, 0xcc, 0xba, 0x1b, 0x6f, 0x99, 0xcc, 0x21, 0x8e, 0x17, 0x4f, 0x95, 0xd0, 0x98,
	0xa6, 0xa0, 0x12, 0x28, 0x44, 0x75, 0x21, 0x5e, 0xb6, 0xfe, 0xc7, 0x98, 0x8e, 0xf6, 0x9b, 0x0d,
	0x9f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x55, 0xa1, 0x0a, 0xf2, 0xc8, 0x01, 0x00, 0x00,
}

func (m *CellarFeePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellarFeePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellarFeePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pool) > 0 {
		for iNdEx := len(m.Pool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCellarfees(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FeeAccrualCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeAccrualCounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeAccrualCounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintCellarfees(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintCellarfees(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeeAccrualCounters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeAccrualCounters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeAccrualCounters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Counters) > 0 {
		for iNdEx := len(m.Counters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Counters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCellarfees(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCellarfees(dAtA []byte, offset int, v uint64) int {
	offset -= sovCellarfees(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CellarFeePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pool) > 0 {
		for _, e := range m.Pool {
			l = e.Size()
			n += 1 + l + sovCellarfees(uint64(l))
		}
	}
	return n
}

func (m *FeeAccrualCounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovCellarfees(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovCellarfees(uint64(m.Count))
	}
	return n
}

func (m *FeeAccrualCounters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Counters) > 0 {
		for _, e := range m.Counters {
			l = e.Size()
			n += 1 + l + sovCellarfees(uint64(l))
		}
	}
	return n
}

func sovCellarfees(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCellarfees(x uint64) (n int) {
	return sovCellarfees(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CellarFeePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCellarfees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellarFeePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellarFeePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCellarfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCellarfees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCellarfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = append(m.Pool, types.Coin{})
			if err := m.Pool[len(m.Pool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCellarfees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCellarfees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeAccrualCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCellarfees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeAccrualCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeAccrualCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCellarfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCellarfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCellarfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCellarfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCellarfees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCellarfees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeAccrualCounters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCellarfees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeAccrualCounters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeAccrualCounters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCellarfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCellarfees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCellarfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counters = append(m.Counters, FeeAccrualCounter{})
			if err := m.Counters[len(m.Counters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCellarfees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCellarfees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCellarfees(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCellarfees
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCellarfees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCellarfees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCellarfees
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCellarfees
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCellarfees
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCellarfees        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCellarfees          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCellarfees = fmt.Errorf("proto: unexpected end of group")
)
