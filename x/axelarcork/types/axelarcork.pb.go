// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelarcork/v1/axelarcork.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AxelarCork struct {
	// call body containing the ABI encoded bytes to send to the contract
	EncodedContractCall []byte `protobuf:"bytes,1,opt,name=encoded_contract_call,json=encodedContractCall,proto3" json:"encoded_contract_call,omitempty"`
	// the chain ID of the evm target chain
	ChainId uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// address of the contract to send the call
	TargetContractAddress string `protobuf:"bytes,3,opt,name=target_contract_address,json=targetContractAddress,proto3" json:"target_contract_address,omitempty"`
	// unix timestamp before which the contract call must be executed.
	// enforced by the proxy contract.
	Deadline uint64 `protobuf:"varint,4,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (m *AxelarCork) Reset()         { *m = AxelarCork{} }
func (m *AxelarCork) String() string { return proto.CompactTextString(m) }
func (*AxelarCork) ProtoMessage()    {}
func (*AxelarCork) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8790c2a041a4f43, []int{0}
}
func (m *AxelarCork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AxelarCork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AxelarCork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AxelarCork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AxelarCork.Merge(m, src)
}
func (m *AxelarCork) XXX_Size() int {
	return m.Size()
}
func (m *AxelarCork) XXX_DiscardUnknown() {
	xxx_messageInfo_AxelarCork.DiscardUnknown(m)
}

var xxx_messageInfo_AxelarCork proto.InternalMessageInfo

func (m *AxelarCork) GetEncodedContractCall() []byte {
	if m != nil {
		return m.EncodedContractCall
	}
	return nil
}

func (m *AxelarCork) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *AxelarCork) GetTargetContractAddress() string {
	if m != nil {
		return m.TargetContractAddress
	}
	return ""
}

func (m *AxelarCork) GetDeadline() uint64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

type ScheduledAxelarCork struct {
	Cork        *AxelarCork `protobuf:"bytes,1,opt,name=cork,proto3" json:"cork,omitempty"`
	BlockHeight uint64      `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Validator   string      `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
	Id          string      `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ScheduledAxelarCork) Reset()         { *m = ScheduledAxelarCork{} }
func (m *ScheduledAxelarCork) String() string { return proto.CompactTextString(m) }
func (*ScheduledAxelarCork) ProtoMessage()    {}
func (*ScheduledAxelarCork) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8790c2a041a4f43, []int{1}
}
func (m *ScheduledAxelarCork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduledAxelarCork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduledAxelarCork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduledAxelarCork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledAxelarCork.Merge(m, src)
}
func (m *ScheduledAxelarCork) XXX_Size() int {
	return m.Size()
}
func (m *ScheduledAxelarCork) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledAxelarCork.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledAxelarCork proto.InternalMessageInfo

func (m *ScheduledAxelarCork) GetCork() *AxelarCork {
	if m != nil {
		return m.Cork
	}
	return nil
}

func (m *ScheduledAxelarCork) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ScheduledAxelarCork) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *ScheduledAxelarCork) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ScheduledAxelarCorks struct {
	ScheduledCorks []*ScheduledAxelarCork `protobuf:"bytes,1,rep,name=scheduled_corks,json=scheduledCorks,proto3" json:"scheduled_corks,omitempty"`
}

func (m *ScheduledAxelarCorks) Reset()         { *m = ScheduledAxelarCorks{} }
func (m *ScheduledAxelarCorks) String() string { return proto.CompactTextString(m) }
func (*ScheduledAxelarCorks) ProtoMessage()    {}
func (*ScheduledAxelarCorks) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8790c2a041a4f43, []int{2}
}
func (m *ScheduledAxelarCorks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduledAxelarCorks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduledAxelarCorks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduledAxelarCorks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledAxelarCorks.Merge(m, src)
}
func (m *ScheduledAxelarCorks) XXX_Size() int {
	return m.Size()
}
func (m *ScheduledAxelarCorks) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledAxelarCorks.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledAxelarCorks proto.InternalMessageInfo

func (m *ScheduledAxelarCorks) GetScheduledCorks() []*ScheduledAxelarCork {
	if m != nil {
		return m.ScheduledCorks
	}
	return nil
}

type AxelarCorkResult struct {
	Cork               *AxelarCork `protobuf:"bytes,1,opt,name=cork,proto3" json:"cork,omitempty"`
	BlockHeight        uint64      `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Approved           bool        `protobuf:"varint,3,opt,name=approved,proto3" json:"approved,omitempty"`
	ApprovalPercentage string      `protobuf:"bytes,4,opt,name=approval_percentage,json=approvalPercentage,proto3" json:"approval_percentage,omitempty"`
}

func (m *AxelarCorkResult) Reset()         { *m = AxelarCorkResult{} }
func (m *AxelarCorkResult) String() string { return proto.CompactTextString(m) }
func (*AxelarCorkResult) ProtoMessage()    {}
func (*AxelarCorkResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8790c2a041a4f43, []int{3}
}
func (m *AxelarCorkResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AxelarCorkResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AxelarCorkResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AxelarCorkResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AxelarCorkResult.Merge(m, src)
}
func (m *AxelarCorkResult) XXX_Size() int {
	return m.Size()
}
func (m *AxelarCorkResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AxelarCorkResult.DiscardUnknown(m)
}

var xxx_messageInfo_AxelarCorkResult proto.InternalMessageInfo

func (m *AxelarCorkResult) GetCork() *AxelarCork {
	if m != nil {
		return m.Cork
	}
	return nil
}

func (m *AxelarCorkResult) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *AxelarCorkResult) GetApproved() bool {
	if m != nil {
		return m.Approved
	}
	return false
}

func (m *AxelarCorkResult) GetApprovalPercentage() string {
	if m != nil {
		return m.ApprovalPercentage
	}
	return ""
}

type AxelarCorkResults struct {
	CorkResults []*AxelarCorkResult `protobuf:"bytes,1,rep,name=cork_results,json=corkResults,proto3" json:"cork_results,omitempty"`
}

func (m *AxelarCorkResults) Reset()         { *m = AxelarCorkResults{} }
func (m *AxelarCorkResults) String() string { return proto.CompactTextString(m) }
func (*AxelarCorkResults) ProtoMessage()    {}
func (*AxelarCorkResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8790c2a041a4f43, []int{4}
}
func (m *AxelarCorkResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AxelarCorkResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AxelarCorkResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AxelarCorkResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AxelarCorkResults.Merge(m, src)
}
func (m *AxelarCorkResults) XXX_Size() int {
	return m.Size()
}
func (m *AxelarCorkResults) XXX_DiscardUnknown() {
	xxx_messageInfo_AxelarCorkResults.DiscardUnknown(m)
}

var xxx_messageInfo_AxelarCorkResults proto.InternalMessageInfo

func (m *AxelarCorkResults) GetCorkResults() []*AxelarCorkResult {
	if m != nil {
		return m.CorkResults
	}
	return nil
}

type CellarIDSet struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *CellarIDSet) Reset()         { *m = CellarIDSet{} }
func (m *CellarIDSet) String() string { return proto.CompactTextString(m) }
func (*CellarIDSet) ProtoMessage()    {}
func (*CellarIDSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8790c2a041a4f43, []int{5}
}
func (m *CellarIDSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellarIDSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellarIDSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellarIDSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellarIDSet.Merge(m, src)
}
func (m *CellarIDSet) XXX_Size() int {
	return m.Size()
}
func (m *CellarIDSet) XXX_DiscardUnknown() {
	xxx_messageInfo_CellarIDSet.DiscardUnknown(m)
}

var xxx_messageInfo_CellarIDSet proto.InternalMessageInfo

func (m *CellarIDSet) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ChainConfiguration struct {
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id           uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ProxyAddress string `protobuf:"bytes,3,opt,name=proxy_address,json=proxyAddress,proto3" json:"proxy_address,omitempty"`
}

func (m *ChainConfiguration) Reset()         { *m = ChainConfiguration{} }
func (m *ChainConfiguration) String() string { return proto.CompactTextString(m) }
func (*ChainConfiguration) ProtoMessage()    {}
func (*ChainConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8790c2a041a4f43, []int{6}
}
func (m *ChainConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainConfiguration.Merge(m, src)
}
func (m *ChainConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ChainConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ChainConfiguration proto.InternalMessageInfo

func (m *ChainConfiguration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChainConfiguration) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChainConfiguration) GetProxyAddress() string {
	if m != nil {
		return m.ProxyAddress
	}
	return ""
}

type ChainConfigurations struct {
	Configurations []*ChainConfiguration `protobuf:"bytes,1,rep,name=configurations,proto3" json:"configurations,omitempty"`
}

func (m *ChainConfigurations) Reset()         { *m = ChainConfigurations{} }
func (m *ChainConfigurations) String() string { return proto.CompactTextString(m) }
func (*ChainConfigurations) ProtoMessage()    {}
func (*ChainConfigurations) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8790c2a041a4f43, []int{7}
}
func (m *ChainConfigurations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainConfigurations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainConfigurations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainConfigurations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainConfigurations.Merge(m, src)
}
func (m *ChainConfigurations) XXX_Size() int {
	return m.Size()
}
func (m *ChainConfigurations) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainConfigurations.DiscardUnknown(m)
}

var xxx_messageInfo_ChainConfigurations proto.InternalMessageInfo

func (m *ChainConfigurations) GetConfigurations() []*ChainConfiguration {
	if m != nil {
		return m.Configurations
	}
	return nil
}

// Used to enforce strictly newer call ordering per contract
type AxelarContractCallNonce struct {
	ChainId         uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Nonce           uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *AxelarContractCallNonce) Reset()         { *m = AxelarContractCallNonce{} }
func (m *AxelarContractCallNonce) String() string { return proto.CompactTextString(m) }
func (*AxelarContractCallNonce) ProtoMessage()    {}
func (*AxelarContractCallNonce) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8790c2a041a4f43, []int{8}
}
func (m *AxelarContractCallNonce) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AxelarContractCallNonce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AxelarContractCallNonce.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AxelarContractCallNonce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AxelarContractCallNonce.Merge(m, src)
}
func (m *AxelarContractCallNonce) XXX_Size() int {
	return m.Size()
}
func (m *AxelarContractCallNonce) XXX_DiscardUnknown() {
	xxx_messageInfo_AxelarContractCallNonce.DiscardUnknown(m)
}

var xxx_messageInfo_AxelarContractCallNonce proto.InternalMessageInfo

func (m *AxelarContractCallNonce) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *AxelarContractCallNonce) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *AxelarContractCallNonce) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func init() {
	proto.RegisterType((*AxelarCork)(nil), "axelarcork.v1.AxelarCork")
	proto.RegisterType((*ScheduledAxelarCork)(nil), "axelarcork.v1.ScheduledAxelarCork")
	proto.RegisterType((*ScheduledAxelarCorks)(nil), "axelarcork.v1.ScheduledAxelarCorks")
	proto.RegisterType((*AxelarCorkResult)(nil), "axelarcork.v1.AxelarCorkResult")
	proto.RegisterType((*AxelarCorkResults)(nil), "axelarcork.v1.AxelarCorkResults")
	proto.RegisterType((*CellarIDSet)(nil), "axelarcork.v1.CellarIDSet")
	proto.RegisterType((*ChainConfiguration)(nil), "axelarcork.v1.ChainConfiguration")
	proto.RegisterType((*ChainConfigurations)(nil), "axelarcork.v1.ChainConfigurations")
	proto.RegisterType((*AxelarContractCallNonce)(nil), "axelarcork.v1.AxelarContractCallNonce")
}

func init() { proto.RegisterFile("axelarcork/v1/axelarcork.proto", fileDescriptor_f8790c2a041a4f43) }

var fileDescriptor_f8790c2a041a4f43 = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcf, 0x6e, 0x13, 0x3f,
	0x10, 0xae, 0xd3, 0xfc, 0x7e, 0x24, 0x93, 0xf4, 0x0f, 0x4e, 0xab, 0xa6, 0x15, 0xda, 0xa6, 0xcb,
	0x25, 0x1c, 0xc8, 0xaa, 0x41, 0xea, 0xbd, 0x0d, 0x07, 0x2a, 0x10, 0x42, 0xee, 0x01, 0x09, 0x09,
	0x2d, 0xae, 0x6d, 0x36, 0xa6, 0xce, 0x7a, 0xe5, 0x75, 0xa2, 0xf6, 0x2d, 0xb8, 0xf0, 0x1c, 0x88,
	0xb7, 0xe0, 0xd8, 0x23, 0x47, 0xd4, 0xbe, 0x08, 0x5a, 0xef, 0xe6, 0xdf, 0xa6, 0x1c, 0xb9, 0xcd,
	0xcc, 0x37, 0xf3, 0xe5, 0xfb, 0x26, 0x9e, 0x05, 0x8f, 0x5e, 0x0b, 0x45, 0x0d, 0xd3, 0xe6, 0x2a,
	0x98, 0x1c, 0x07, 0xf3, 0xac, 0x97, 0x18, 0x6d, 0x35, 0xde, 0x58, 0xa8, 0x4c, 0x8e, 0x0f, 0x76,
	0x22, 0x1d, 0x69, 0x87, 0x04, 0x59, 0x94, 0x37, 0xf9, 0xdf, 0x11, 0xc0, 0xa9, 0xeb, 0x1b, 0x68,
	0x73, 0x85, 0xfb, 0xb0, 0x2b, 0x62, 0xa6, 0xb9, 0xe0, 0x21, 0xd3, 0xb1, 0x35, 0x94, 0xd9, 0x90,
	0x51, 0xa5, 0xda, 0xa8, 0x83, 0xba, 0x4d, 0xd2, 0x2a, 0xc0, 0x41, 0x81, 0x0d, 0xa8, 0x52, 0x78,
	0x1f, 0x6a, 0x6c, 0x48, 0x65, 0x1c, 0x4a, 0xde, 0xae, 0x74, 0x50, 0xb7, 0x4a, 0x1e, 0xb9, 0xfc,
	0x9c, 0xe3, 0x13, 0xd8, 0xb3, 0xd4, 0x44, 0xc2, 0xce, 0xd9, 0x28, 0xe7, 0x46, 0xa4, 0x69, 0x7b,
	0xbd, 0x83, 0xba, 0x75, 0xb2, 0x9b, 0xc3, 0x53, 0xbe, 0xd3, 0x1c, 0xc4, 0x07, 0x50, 0xe3, 0x82,
	0x72, 0x25, 0x63, 0xd1, 0xae, 0x3a, 0xca, 0x59, 0xee, 0x7f, 0x43, 0xd0, 0xba, 0x60, 0x43, 0xc1,
	0xc7, 0x4a, 0xf0, 0x05, 0xe9, 0xcf, 0xa1, 0x9a, 0x59, 0x75, 0x4a, 0x1b, 0xfd, 0xfd, 0xde, 0x92,
	0xfb, 0xde, 0xbc, 0x91, 0xb8, 0x36, 0x7c, 0x04, 0xcd, 0x4b, 0xa5, 0xd9, 0x55, 0x38, 0x14, 0x32,
	0x1a, 0xda, 0x42, 0x79, 0xc3, 0xd5, 0x5e, 0xb9, 0x12, 0x7e, 0x02, 0xf5, 0x09, 0x55, 0x92, 0x53,
	0xab, 0x4d, 0xa1, 0x77, 0x5e, 0xc0, 0x9b, 0x50, 0x91, 0xdc, 0xa9, 0xab, 0x93, 0x8a, 0xe4, 0x3e,
	0x83, 0x9d, 0x07, 0x64, 0xa5, 0xf8, 0x35, 0x6c, 0xa5, 0xd3, 0x7a, 0x98, 0xfd, 0x74, 0xda, 0x46,
	0x9d, 0xf5, 0x6e, 0xa3, 0xef, 0x97, 0x24, 0x3e, 0x30, 0x4d, 0x36, 0x67, 0xa3, 0x8e, 0xcc, 0xff,
	0x81, 0x60, 0x7b, 0x01, 0x16, 0xe9, 0x58, 0xd9, 0x7f, 0xe0, 0xfc, 0x00, 0x6a, 0x34, 0x49, 0x8c,
	0x9e, 0x08, 0xee, 0x8c, 0xd7, 0xc8, 0x2c, 0xc7, 0x01, 0xb4, 0xf2, 0x98, 0xaa, 0x30, 0x11, 0x86,
	0x89, 0xd8, 0xd2, 0x48, 0x14, 0x8b, 0xc0, 0x53, 0xe8, 0xdd, 0x0c, 0xf1, 0xdf, 0xc3, 0xe3, 0xb2,
	0xe4, 0x14, 0x9f, 0x41, 0x33, 0x13, 0x13, 0x9a, 0x3c, 0x2f, 0x56, 0x72, 0xf8, 0x77, 0xed, 0xae,
	0x8f, 0x34, 0xd8, 0x9c, 0xc3, 0x3f, 0x84, 0xc6, 0x40, 0x28, 0x45, 0xcd, 0xf9, 0xcb, 0x0b, 0x61,
	0xf1, 0x36, 0xac, 0x4b, 0x9e, 0x33, 0xd5, 0x49, 0x16, 0xfa, 0x1f, 0x01, 0x0f, 0xb2, 0x97, 0x38,
	0xd0, 0xf1, 0x67, 0x19, 0x8d, 0x0d, 0xb5, 0x52, 0xc7, 0x18, 0x43, 0x35, 0xa6, 0x23, 0xe1, 0xd6,
	0x55, 0x27, 0x2e, 0x2e, 0xfe, 0xcc, 0x7c, 0x13, 0x15, 0xc9, 0xf1, 0x53, 0xd8, 0x48, 0x8c, 0xbe,
	0xbe, 0x29, 0x3d, 0xd7, 0xa6, 0x2b, 0x16, 0xaf, 0xd4, 0xff, 0x04, 0xad, 0x55, 0xfa, 0x14, 0x9f,
	0xc3, 0x26, 0x5b, 0xaa, 0x14, 0xe6, 0x8e, 0x4a, 0xe6, 0x56, 0x67, 0x49, 0x69, 0xd0, 0x1f, 0xc3,
	0xde, 0x74, 0x05, 0xf3, 0x83, 0x7b, 0xab, 0x63, 0x26, 0x96, 0xae, 0x0e, 0x2d, 0x5f, 0xdd, 0x33,
	0xd8, 0x5e, 0x39, 0xb7, 0x8a, 0xd3, 0xbf, 0xc5, 0x4a, 0x87, 0xb6, 0x03, 0xff, 0xc5, 0x19, 0x9d,
	0xf3, 0x57, 0x25, 0x79, 0x72, 0xf6, 0xe6, 0xe7, 0x9d, 0x87, 0x6e, 0xef, 0x3c, 0xf4, 0xfb, 0xce,
	0x43, 0x5f, 0xef, 0xbd, 0xb5, 0xdb, 0x7b, 0x6f, 0xed, 0xd7, 0xbd, 0xb7, 0xf6, 0xa1, 0x1f, 0x49,
	0x3b, 0x1c, 0x5f, 0xf6, 0x98, 0x1e, 0x05, 0x89, 0x88, 0xa2, 0x9b, 0x2f, 0x93, 0x20, 0xd5, 0xa3,
	0x91, 0x50, 0x52, 0x98, 0x60, 0x72, 0x12, 0x5c, 0x2f, 0x7c, 0x87, 0x02, 0x7b, 0x93, 0x88, 0xf4,
	0xf2, 0x7f, 0xf7, 0xa5, 0x79, 0xf1, 0x27, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xa6, 0x9e, 0x03, 0xb0,
	0x04, 0x00, 0x00,
}

func (m *AxelarCork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AxelarCork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AxelarCork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deadline != 0 {
		i = encodeVarintAxelarcork(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TargetContractAddress) > 0 {
		i -= len(m.TargetContractAddress)
		copy(dAtA[i:], m.TargetContractAddress)
		i = encodeVarintAxelarcork(dAtA, i, uint64(len(m.TargetContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintAxelarcork(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EncodedContractCall) > 0 {
		i -= len(m.EncodedContractCall)
		copy(dAtA[i:], m.EncodedContractCall)
		i = encodeVarintAxelarcork(dAtA, i, uint64(len(m.EncodedContractCall)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScheduledAxelarCork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledAxelarCork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduledAxelarCork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAxelarcork(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintAxelarcork(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAxelarcork(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Cork != nil {
		{
			size, err := m.Cork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAxelarcork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScheduledAxelarCorks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledAxelarCorks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduledAxelarCorks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScheduledCorks) > 0 {
		for iNdEx := len(m.ScheduledCorks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScheduledCorks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAxelarcork(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AxelarCorkResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AxelarCorkResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AxelarCorkResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApprovalPercentage) > 0 {
		i -= len(m.ApprovalPercentage)
		copy(dAtA[i:], m.ApprovalPercentage)
		i = encodeVarintAxelarcork(dAtA, i, uint64(len(m.ApprovalPercentage)))
		i--
		dAtA[i] = 0x22
	}
	if m.Approved {
		i--
		if m.Approved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAxelarcork(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Cork != nil {
		{
			size, err := m.Cork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAxelarcork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AxelarCorkResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AxelarCorkResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AxelarCorkResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CorkResults) > 0 {
		for iNdEx := len(m.CorkResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CorkResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAxelarcork(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CellarIDSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellarIDSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellarIDSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintAxelarcork(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChainConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProxyAddress) > 0 {
		i -= len(m.ProxyAddress)
		copy(dAtA[i:], m.ProxyAddress)
		i = encodeVarintAxelarcork(dAtA, i, uint64(len(m.ProxyAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintAxelarcork(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAxelarcork(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainConfigurations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainConfigurations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainConfigurations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Configurations) > 0 {
		for iNdEx := len(m.Configurations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configurations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAxelarcork(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AxelarContractCallNonce) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AxelarContractCallNonce) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AxelarContractCallNonce) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintAxelarcork(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintAxelarcork(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintAxelarcork(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAxelarcork(dAtA []byte, offset int, v uint64) int {
	offset -= sovAxelarcork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AxelarCork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncodedContractCall)
	if l > 0 {
		n += 1 + l + sovAxelarcork(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovAxelarcork(uint64(m.ChainId))
	}
	l = len(m.TargetContractAddress)
	if l > 0 {
		n += 1 + l + sovAxelarcork(uint64(l))
	}
	if m.Deadline != 0 {
		n += 1 + sovAxelarcork(uint64(m.Deadline))
	}
	return n
}

func (m *ScheduledAxelarCork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cork != nil {
		l = m.Cork.Size()
		n += 1 + l + sovAxelarcork(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovAxelarcork(uint64(m.BlockHeight))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovAxelarcork(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAxelarcork(uint64(l))
	}
	return n
}

func (m *ScheduledAxelarCorks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScheduledCorks) > 0 {
		for _, e := range m.ScheduledCorks {
			l = e.Size()
			n += 1 + l + sovAxelarcork(uint64(l))
		}
	}
	return n
}

func (m *AxelarCorkResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cork != nil {
		l = m.Cork.Size()
		n += 1 + l + sovAxelarcork(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovAxelarcork(uint64(m.BlockHeight))
	}
	if m.Approved {
		n += 2
	}
	l = len(m.ApprovalPercentage)
	if l > 0 {
		n += 1 + l + sovAxelarcork(uint64(l))
	}
	return n
}

func (m *AxelarCorkResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CorkResults) > 0 {
		for _, e := range m.CorkResults {
			l = e.Size()
			n += 1 + l + sovAxelarcork(uint64(l))
		}
	}
	return n
}

func (m *CellarIDSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovAxelarcork(uint64(l))
		}
	}
	return n
}

func (m *ChainConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAxelarcork(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovAxelarcork(uint64(m.Id))
	}
	l = len(m.ProxyAddress)
	if l > 0 {
		n += 1 + l + sovAxelarcork(uint64(l))
	}
	return n
}

func (m *ChainConfigurations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configurations) > 0 {
		for _, e := range m.Configurations {
			l = e.Size()
			n += 1 + l + sovAxelarcork(uint64(l))
		}
	}
	return n
}

func (m *AxelarContractCallNonce) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovAxelarcork(uint64(m.ChainId))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovAxelarcork(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovAxelarcork(uint64(m.Nonce))
	}
	return n
}

func sovAxelarcork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAxelarcork(x uint64) (n int) {
	return sovAxelarcork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AxelarCork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAxelarcork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AxelarCork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AxelarCork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedContractCall", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAxelarcork
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedContractCall = append(m.EncodedContractCall[:0], dAtA[iNdEx:postIndex]...)
			if m.EncodedContractCall == nil {
				m.EncodedContractCall = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAxelarcork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAxelarcork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledAxelarCork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAxelarcork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledAxelarCork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledAxelarCork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAxelarcork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cork == nil {
				m.Cork = &AxelarCork{}
			}
			if err := m.Cork.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAxelarcork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAxelarcork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAxelarcork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledAxelarCorks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAxelarcork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledAxelarCorks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledAxelarCorks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledCorks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAxelarcork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledCorks = append(m.ScheduledCorks, &ScheduledAxelarCork{})
			if err := m.ScheduledCorks[len(m.ScheduledCorks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAxelarcork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AxelarCorkResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAxelarcork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AxelarCorkResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AxelarCorkResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAxelarcork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cork == nil {
				m.Cork = &AxelarCork{}
			}
			if err := m.Cork.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Approved = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAxelarcork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovalPercentage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAxelarcork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AxelarCorkResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAxelarcork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AxelarCorkResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AxelarCorkResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorkResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAxelarcork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorkResults = append(m.CorkResults, &AxelarCorkResult{})
			if err := m.CorkResults[len(m.CorkResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAxelarcork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellarIDSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAxelarcork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellarIDSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellarIDSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAxelarcork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAxelarcork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAxelarcork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAxelarcork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAxelarcork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAxelarcork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainConfigurations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAxelarcork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainConfigurations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainConfigurations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configurations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAxelarcork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configurations = append(m.Configurations, &ChainConfiguration{})
			if err := m.Configurations[len(m.Configurations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAxelarcork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AxelarContractCallNonce) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAxelarcork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AxelarContractCallNonce: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AxelarContractCallNonce: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAxelarcork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAxelarcork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAxelarcork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAxelarcork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAxelarcork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAxelarcork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAxelarcork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAxelarcork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAxelarcork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAxelarcork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAxelarcork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAxelarcork = fmt.Errorf("proto: unexpected end of group")
)
