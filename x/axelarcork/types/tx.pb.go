// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelarcork/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgScheduleCorkRequest - sdk.Msg for scheduling a cork request for on or after a specific block height
type MsgScheduleAxelarCorkRequest struct {
	// the scheduled cork
	Cork *AxelarCork `protobuf:"bytes,1,opt,name=cork,proto3" json:"cork,omitempty"`
	// the chain id
	ChainId uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// the block height that must be reached
	BlockHeight uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// signer account address
	Signer string `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgScheduleAxelarCorkRequest) Reset()         { *m = MsgScheduleAxelarCorkRequest{} }
func (m *MsgScheduleAxelarCorkRequest) String() string { return proto.CompactTextString(m) }
func (*MsgScheduleAxelarCorkRequest) ProtoMessage()    {}
func (*MsgScheduleAxelarCorkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7efa2af5736321fb, []int{0}
}
func (m *MsgScheduleAxelarCorkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgScheduleAxelarCorkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgScheduleAxelarCorkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgScheduleAxelarCorkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgScheduleAxelarCorkRequest.Merge(m, src)
}
func (m *MsgScheduleAxelarCorkRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgScheduleAxelarCorkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgScheduleAxelarCorkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgScheduleAxelarCorkRequest proto.InternalMessageInfo

func (m *MsgScheduleAxelarCorkRequest) GetCork() *AxelarCork {
	if m != nil {
		return m.Cork
	}
	return nil
}

func (m *MsgScheduleAxelarCorkRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgScheduleAxelarCorkRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgScheduleAxelarCorkRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type MsgScheduleAxelarCorkResponse struct {
	// cork ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgScheduleAxelarCorkResponse) Reset()         { *m = MsgScheduleAxelarCorkResponse{} }
func (m *MsgScheduleAxelarCorkResponse) String() string { return proto.CompactTextString(m) }
func (*MsgScheduleAxelarCorkResponse) ProtoMessage()    {}
func (*MsgScheduleAxelarCorkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7efa2af5736321fb, []int{1}
}
func (m *MsgScheduleAxelarCorkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgScheduleAxelarCorkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgScheduleAxelarCorkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgScheduleAxelarCorkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgScheduleAxelarCorkResponse.Merge(m, src)
}
func (m *MsgScheduleAxelarCorkResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgScheduleAxelarCorkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgScheduleAxelarCorkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgScheduleAxelarCorkResponse proto.InternalMessageInfo

func (m *MsgScheduleAxelarCorkResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MsgRelayAxelarCorkRequest struct {
	Signer                string     `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Token                 types.Coin `protobuf:"bytes,2,opt,name=token,proto3" json:"token"`
	Fee                   uint64     `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
	ChainId               uint64     `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TargetContractAddress string     `protobuf:"bytes,5,opt,name=target_contract_address,json=targetContractAddress,proto3" json:"target_contract_address,omitempty"`
}

func (m *MsgRelayAxelarCorkRequest) Reset()         { *m = MsgRelayAxelarCorkRequest{} }
func (m *MsgRelayAxelarCorkRequest) String() string { return proto.CompactTextString(m) }
func (*MsgRelayAxelarCorkRequest) ProtoMessage()    {}
func (*MsgRelayAxelarCorkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7efa2af5736321fb, []int{2}
}
func (m *MsgRelayAxelarCorkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRelayAxelarCorkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRelayAxelarCorkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRelayAxelarCorkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRelayAxelarCorkRequest.Merge(m, src)
}
func (m *MsgRelayAxelarCorkRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgRelayAxelarCorkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRelayAxelarCorkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRelayAxelarCorkRequest proto.InternalMessageInfo

func (m *MsgRelayAxelarCorkRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRelayAxelarCorkRequest) GetToken() types.Coin {
	if m != nil {
		return m.Token
	}
	return types.Coin{}
}

func (m *MsgRelayAxelarCorkRequest) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *MsgRelayAxelarCorkRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgRelayAxelarCorkRequest) GetTargetContractAddress() string {
	if m != nil {
		return m.TargetContractAddress
	}
	return ""
}

type MsgRelayAxelarCorkResponse struct {
}

func (m *MsgRelayAxelarCorkResponse) Reset()         { *m = MsgRelayAxelarCorkResponse{} }
func (m *MsgRelayAxelarCorkResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRelayAxelarCorkResponse) ProtoMessage()    {}
func (*MsgRelayAxelarCorkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7efa2af5736321fb, []int{3}
}
func (m *MsgRelayAxelarCorkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRelayAxelarCorkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRelayAxelarCorkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRelayAxelarCorkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRelayAxelarCorkResponse.Merge(m, src)
}
func (m *MsgRelayAxelarCorkResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRelayAxelarCorkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRelayAxelarCorkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRelayAxelarCorkResponse proto.InternalMessageInfo

type MsgRelayAxelarProxyUpgradeRequest struct {
	Signer  string     `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Token   types.Coin `protobuf:"bytes,2,opt,name=token,proto3" json:"token"`
	Fee     uint64     `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
	ChainId uint64     `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *MsgRelayAxelarProxyUpgradeRequest) Reset()         { *m = MsgRelayAxelarProxyUpgradeRequest{} }
func (m *MsgRelayAxelarProxyUpgradeRequest) String() string { return proto.CompactTextString(m) }
func (*MsgRelayAxelarProxyUpgradeRequest) ProtoMessage()    {}
func (*MsgRelayAxelarProxyUpgradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7efa2af5736321fb, []int{4}
}
func (m *MsgRelayAxelarProxyUpgradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRelayAxelarProxyUpgradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRelayAxelarProxyUpgradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRelayAxelarProxyUpgradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRelayAxelarProxyUpgradeRequest.Merge(m, src)
}
func (m *MsgRelayAxelarProxyUpgradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgRelayAxelarProxyUpgradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRelayAxelarProxyUpgradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRelayAxelarProxyUpgradeRequest proto.InternalMessageInfo

func (m *MsgRelayAxelarProxyUpgradeRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRelayAxelarProxyUpgradeRequest) GetToken() types.Coin {
	if m != nil {
		return m.Token
	}
	return types.Coin{}
}

func (m *MsgRelayAxelarProxyUpgradeRequest) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *MsgRelayAxelarProxyUpgradeRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type MsgRelayAxelarProxyUpgradeResponse struct {
}

func (m *MsgRelayAxelarProxyUpgradeResponse) Reset()         { *m = MsgRelayAxelarProxyUpgradeResponse{} }
func (m *MsgRelayAxelarProxyUpgradeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRelayAxelarProxyUpgradeResponse) ProtoMessage()    {}
func (*MsgRelayAxelarProxyUpgradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7efa2af5736321fb, []int{5}
}
func (m *MsgRelayAxelarProxyUpgradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRelayAxelarProxyUpgradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRelayAxelarProxyUpgradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRelayAxelarProxyUpgradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRelayAxelarProxyUpgradeResponse.Merge(m, src)
}
func (m *MsgRelayAxelarProxyUpgradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRelayAxelarProxyUpgradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRelayAxelarProxyUpgradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRelayAxelarProxyUpgradeResponse proto.InternalMessageInfo

type MsgBumpAxelarCorkGasRequest struct {
	Signer    string     `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Token     types.Coin `protobuf:"bytes,2,opt,name=token,proto3" json:"token"`
	MessageId string     `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (m *MsgBumpAxelarCorkGasRequest) Reset()         { *m = MsgBumpAxelarCorkGasRequest{} }
func (m *MsgBumpAxelarCorkGasRequest) String() string { return proto.CompactTextString(m) }
func (*MsgBumpAxelarCorkGasRequest) ProtoMessage()    {}
func (*MsgBumpAxelarCorkGasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7efa2af5736321fb, []int{6}
}
func (m *MsgBumpAxelarCorkGasRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBumpAxelarCorkGasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBumpAxelarCorkGasRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBumpAxelarCorkGasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBumpAxelarCorkGasRequest.Merge(m, src)
}
func (m *MsgBumpAxelarCorkGasRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgBumpAxelarCorkGasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBumpAxelarCorkGasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBumpAxelarCorkGasRequest proto.InternalMessageInfo

func (m *MsgBumpAxelarCorkGasRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgBumpAxelarCorkGasRequest) GetToken() types.Coin {
	if m != nil {
		return m.Token
	}
	return types.Coin{}
}

func (m *MsgBumpAxelarCorkGasRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

type MsgBumpAxelarCorkGasResponse struct {
}

func (m *MsgBumpAxelarCorkGasResponse) Reset()         { *m = MsgBumpAxelarCorkGasResponse{} }
func (m *MsgBumpAxelarCorkGasResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBumpAxelarCorkGasResponse) ProtoMessage()    {}
func (*MsgBumpAxelarCorkGasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7efa2af5736321fb, []int{7}
}
func (m *MsgBumpAxelarCorkGasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBumpAxelarCorkGasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBumpAxelarCorkGasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBumpAxelarCorkGasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBumpAxelarCorkGasResponse.Merge(m, src)
}
func (m *MsgBumpAxelarCorkGasResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBumpAxelarCorkGasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBumpAxelarCorkGasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBumpAxelarCorkGasResponse proto.InternalMessageInfo

type MsgCancelAxelarCorkRequest struct {
	Signer                string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainId               uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TargetContractAddress string `protobuf:"bytes,3,opt,name=target_contract_address,json=targetContractAddress,proto3" json:"target_contract_address,omitempty"`
}

func (m *MsgCancelAxelarCorkRequest) Reset()         { *m = MsgCancelAxelarCorkRequest{} }
func (m *MsgCancelAxelarCorkRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCancelAxelarCorkRequest) ProtoMessage()    {}
func (*MsgCancelAxelarCorkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7efa2af5736321fb, []int{8}
}
func (m *MsgCancelAxelarCorkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelAxelarCorkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelAxelarCorkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelAxelarCorkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelAxelarCorkRequest.Merge(m, src)
}
func (m *MsgCancelAxelarCorkRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelAxelarCorkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelAxelarCorkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelAxelarCorkRequest proto.InternalMessageInfo

func (m *MsgCancelAxelarCorkRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgCancelAxelarCorkRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgCancelAxelarCorkRequest) GetTargetContractAddress() string {
	if m != nil {
		return m.TargetContractAddress
	}
	return ""
}

type MsgCancelAxelarCorkResponse struct {
}

func (m *MsgCancelAxelarCorkResponse) Reset()         { *m = MsgCancelAxelarCorkResponse{} }
func (m *MsgCancelAxelarCorkResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelAxelarCorkResponse) ProtoMessage()    {}
func (*MsgCancelAxelarCorkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7efa2af5736321fb, []int{9}
}
func (m *MsgCancelAxelarCorkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelAxelarCorkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelAxelarCorkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelAxelarCorkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelAxelarCorkResponse.Merge(m, src)
}
func (m *MsgCancelAxelarCorkResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelAxelarCorkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelAxelarCorkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelAxelarCorkResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgScheduleAxelarCorkRequest)(nil), "axelarcork.v1.MsgScheduleAxelarCorkRequest")
	proto.RegisterType((*MsgScheduleAxelarCorkResponse)(nil), "axelarcork.v1.MsgScheduleAxelarCorkResponse")
	proto.RegisterType((*MsgRelayAxelarCorkRequest)(nil), "axelarcork.v1.MsgRelayAxelarCorkRequest")
	proto.RegisterType((*MsgRelayAxelarCorkResponse)(nil), "axelarcork.v1.MsgRelayAxelarCorkResponse")
	proto.RegisterType((*MsgRelayAxelarProxyUpgradeRequest)(nil), "axelarcork.v1.MsgRelayAxelarProxyUpgradeRequest")
	proto.RegisterType((*MsgRelayAxelarProxyUpgradeResponse)(nil), "axelarcork.v1.MsgRelayAxelarProxyUpgradeResponse")
	proto.RegisterType((*MsgBumpAxelarCorkGasRequest)(nil), "axelarcork.v1.MsgBumpAxelarCorkGasRequest")
	proto.RegisterType((*MsgBumpAxelarCorkGasResponse)(nil), "axelarcork.v1.MsgBumpAxelarCorkGasResponse")
	proto.RegisterType((*MsgCancelAxelarCorkRequest)(nil), "axelarcork.v1.MsgCancelAxelarCorkRequest")
	proto.RegisterType((*MsgCancelAxelarCorkResponse)(nil), "axelarcork.v1.MsgCancelAxelarCorkResponse")
}

func init() { proto.RegisterFile("axelarcork/v1/tx.proto", fileDescriptor_7efa2af5736321fb) }

var fileDescriptor_7efa2af5736321fb = []byte{
	// 618 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xcd, 0xd4, 0x69, 0xbf, 0x2f, 0xd3, 0x82, 0x90, 0x81, 0x92, 0x9a, 0xd6, 0xb4, 0x16, 0x8b,
	0xd0, 0x82, 0x47, 0x09, 0xa2, 0xfb, 0x26, 0x0b, 0xa8, 0x44, 0x24, 0x64, 0xc4, 0x86, 0x4d, 0x98,
	0xd8, 0xb7, 0x13, 0x13, 0xdb, 0x63, 0x3c, 0x93, 0x28, 0x79, 0x02, 0x16, 0x6c, 0x78, 0x03, 0x16,
	0x6c, 0x78, 0x94, 0xee, 0xe8, 0x92, 0x15, 0x42, 0xc9, 0x8b, 0x20, 0x8f, 0x5d, 0x25, 0x21, 0x3f,
	0xca, 0x06, 0x89, 0xdd, 0xcc, 0xbd, 0xe7, 0xce, 0x3d, 0xe7, 0xfe, 0x0c, 0xde, 0xa5, 0x03, 0x08,
	0x68, 0xe2, 0xf2, 0xa4, 0x4b, 0xfa, 0x55, 0x22, 0x07, 0x76, 0x9c, 0x70, 0xc9, 0xf5, 0x1b, 0x13,
	0xbb, 0xdd, 0xaf, 0x1a, 0xa6, 0xcb, 0x45, 0xc8, 0x05, 0x69, 0x53, 0x01, 0xa4, 0x5f, 0x6d, 0x83,
	0xa4, 0x55, 0xe2, 0x72, 0x3f, 0xca, 0xe0, 0x86, 0x39, 0xfb, 0xcc, 0x54, 0x70, 0xe6, 0xbf, 0xc3,
	0x38, 0xe3, 0xea, 0x48, 0xd2, 0x53, 0x66, 0xb5, 0xbe, 0x22, 0xbc, 0xdf, 0x14, 0xec, 0xb5, 0xdb,
	0x01, 0xaf, 0x17, 0xc0, 0x99, 0x8a, 0x6a, 0xf0, 0xa4, 0xeb, 0xc0, 0x87, 0x1e, 0x08, 0xa9, 0x3f,
	0xc1, 0xc5, 0xf4, 0x91, 0x32, 0x3a, 0x44, 0x95, 0xed, 0xda, 0x9e, 0x3d, 0x43, 0xca, 0x9e, 0xc2,
	0x2b, 0x98, 0xbe, 0x87, 0xff, 0x77, 0x3b, 0xd4, 0x8f, 0x5a, 0xbe, 0x57, 0xde, 0x38, 0x44, 0x95,
	0xa2, 0xf3, 0x9f, 0xba, 0x9f, 0x7b, 0xfa, 0x11, 0xde, 0x69, 0x07, 0xdc, 0xed, 0xb6, 0x3a, 0xe0,
	0xb3, 0x8e, 0x2c, 0x6b, 0xca, 0xbd, 0xad, 0x6c, 0x2f, 0x94, 0x49, 0xdf, 0xc5, 0x5b, 0xc2, 0x67,
	0x11, 0x24, 0xe5, 0xe2, 0x21, 0xaa, 0x94, 0x9c, 0xfc, 0x66, 0x11, 0x7c, 0xb0, 0x84, 0xa4, 0x88,
	0x79, 0x24, 0x40, 0xbf, 0x89, 0x37, 0x7c, 0x4f, 0x71, 0x2c, 0x39, 0x1b, 0xbe, 0x67, 0x7d, 0x47,
	0x78, 0xaf, 0x29, 0x98, 0x03, 0x01, 0x1d, 0xce, 0x6b, 0x9a, 0xa4, 0x41, 0xd3, 0x69, 0xf4, 0x67,
	0x78, 0x53, 0xf2, 0x2e, 0x44, 0x8a, 0x79, 0x2a, 0x36, 0x2b, 0xb9, 0x9d, 0x96, 0xdc, 0xce, 0x4b,
	0x6e, 0x37, 0xb8, 0x1f, 0xd5, 0x8b, 0x97, 0x3f, 0x1f, 0x14, 0x9c, 0x0c, 0xad, 0xdf, 0xc2, 0xda,
	0x05, 0x40, 0xae, 0x27, 0x3d, 0xce, 0x54, 0xa1, 0x38, 0x5b, 0x85, 0x53, 0x7c, 0x4f, 0xd2, 0x84,
	0x81, 0x6c, 0xb9, 0x3c, 0x92, 0x09, 0x75, 0x65, 0x8b, 0x7a, 0x5e, 0x02, 0x42, 0x94, 0x37, 0x15,
	0x99, 0xbb, 0x99, 0xbb, 0x91, 0x7b, 0xcf, 0x32, 0xa7, 0xb5, 0x8f, 0x8d, 0x45, 0x82, 0x32, 0xfd,
	0xd6, 0x17, 0x84, 0x8f, 0x66, 0xdd, 0xaf, 0x12, 0x3e, 0x18, 0xbe, 0x89, 0x59, 0x42, 0x3d, 0xf8,
	0x07, 0x74, 0x5b, 0x0f, 0xb1, 0xb5, 0x8a, 0x60, 0xae, 0xe3, 0x13, 0xc2, 0xf7, 0x9b, 0x82, 0xd5,
	0x7b, 0x61, 0x3c, 0x51, 0xf9, 0x9c, 0x8a, 0xbf, 0xa4, 0xe0, 0x00, 0xe3, 0x10, 0x84, 0xa0, 0x0c,
	0x52, 0xc6, 0x9a, 0x7a, 0xb2, 0x94, 0x5b, 0xce, 0x3d, 0xcb, 0x54, 0xbb, 0xb1, 0x80, 0x4c, 0xce,
	0xf6, 0x23, 0x52, 0x4d, 0x69, 0xd0, 0xc8, 0x85, 0x60, 0xfd, 0x31, 0x5b, 0xb1, 0x23, 0x2b, 0xa6,
	0x43, 0x5b, 0x35, 0x1d, 0x07, 0xaa, 0x6c, 0xf3, 0x44, 0x32, 0xa2, 0xb5, 0x6f, 0x1a, 0xd6, 0x9a,
	0x82, 0xe9, 0x3e, 0xde, 0xb9, 0x5e, 0xa2, 0xd4, 0xaf, 0x9f, 0xfc, 0xb1, 0xce, 0xab, 0x7e, 0x02,
	0xe3, 0xf1, 0x7a, 0xe0, 0x7c, 0x23, 0xdf, 0xe1, 0x92, 0x6a, 0xb6, 0xca, 0x53, 0x99, 0x0f, 0x5d,
	0xbc, 0x9a, 0xc6, 0xa3, 0x35, 0x90, 0x79, 0x86, 0x0b, 0xbc, 0x9d, 0xb6, 0x26, 0x6f, 0x8a, 0x7e,
	0x3c, 0x1f, 0xb9, 0x6c, 0x8c, 0x8c, 0x93, 0xb5, 0xb0, 0x79, 0x9e, 0x00, 0xdf, 0xce, 0x0a, 0x7b,
	0xad, 0xd6, 0x53, 0x9a, 0x16, 0x30, 0x5d, 0x32, 0x08, 0xc6, 0xf1, 0x3a, 0xd0, 0x2c, 0x5b, 0xfd,
	0xe5, 0xe5, 0xc8, 0x44, 0x57, 0x23, 0x13, 0xfd, 0x1a, 0x99, 0xe8, 0xf3, 0xd8, 0x2c, 0x5c, 0x8d,
	0xcd, 0xc2, 0x8f, 0xb1, 0x59, 0x78, 0x5b, 0x63, 0xbe, 0xec, 0xf4, 0xda, 0xb6, 0xcb, 0x43, 0x12,
	0x03, 0x63, 0xc3, 0xf7, 0x7d, 0x22, 0x78, 0x18, 0x42, 0xe0, 0x43, 0x42, 0xfa, 0xa7, 0x64, 0x30,
	0xf5, 0xe9, 0x13, 0x39, 0x8c, 0x41, 0xb4, 0xb7, 0xd4, 0x2f, 0xff, 0xf4, 0x77, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x66, 0x58, 0xf3, 0xde, 0x64, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ScheduleCork(ctx context.Context, in *MsgScheduleAxelarCorkRequest, opts ...grpc.CallOption) (*MsgScheduleAxelarCorkResponse, error)
	RelayCork(ctx context.Context, in *MsgRelayAxelarCorkRequest, opts ...grpc.CallOption) (*MsgRelayAxelarCorkResponse, error)
	BumpCorkGas(ctx context.Context, in *MsgBumpAxelarCorkGasRequest, opts ...grpc.CallOption) (*MsgBumpAxelarCorkGasResponse, error)
	CancelScheduledCork(ctx context.Context, in *MsgCancelAxelarCorkRequest, opts ...grpc.CallOption) (*MsgCancelAxelarCorkResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ScheduleCork(ctx context.Context, in *MsgScheduleAxelarCorkRequest, opts ...grpc.CallOption) (*MsgScheduleAxelarCorkResponse, error) {
	out := new(MsgScheduleAxelarCorkResponse)
	err := c.cc.Invoke(ctx, "/axelarcork.v1.Msg/ScheduleCork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RelayCork(ctx context.Context, in *MsgRelayAxelarCorkRequest, opts ...grpc.CallOption) (*MsgRelayAxelarCorkResponse, error) {
	out := new(MsgRelayAxelarCorkResponse)
	err := c.cc.Invoke(ctx, "/axelarcork.v1.Msg/RelayCork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BumpCorkGas(ctx context.Context, in *MsgBumpAxelarCorkGasRequest, opts ...grpc.CallOption) (*MsgBumpAxelarCorkGasResponse, error) {
	out := new(MsgBumpAxelarCorkGasResponse)
	err := c.cc.Invoke(ctx, "/axelarcork.v1.Msg/BumpCorkGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelScheduledCork(ctx context.Context, in *MsgCancelAxelarCorkRequest, opts ...grpc.CallOption) (*MsgCancelAxelarCorkResponse, error) {
	out := new(MsgCancelAxelarCorkResponse)
	err := c.cc.Invoke(ctx, "/axelarcork.v1.Msg/CancelScheduledCork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ScheduleCork(context.Context, *MsgScheduleAxelarCorkRequest) (*MsgScheduleAxelarCorkResponse, error)
	RelayCork(context.Context, *MsgRelayAxelarCorkRequest) (*MsgRelayAxelarCorkResponse, error)
	BumpCorkGas(context.Context, *MsgBumpAxelarCorkGasRequest) (*MsgBumpAxelarCorkGasResponse, error)
	CancelScheduledCork(context.Context, *MsgCancelAxelarCorkRequest) (*MsgCancelAxelarCorkResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ScheduleCork(ctx context.Context, req *MsgScheduleAxelarCorkRequest) (*MsgScheduleAxelarCorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleCork not implemented")
}
func (*UnimplementedMsgServer) RelayCork(ctx context.Context, req *MsgRelayAxelarCorkRequest) (*MsgRelayAxelarCorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayCork not implemented")
}
func (*UnimplementedMsgServer) BumpCorkGas(ctx context.Context, req *MsgBumpAxelarCorkGasRequest) (*MsgBumpAxelarCorkGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BumpCorkGas not implemented")
}
func (*UnimplementedMsgServer) CancelScheduledCork(ctx context.Context, req *MsgCancelAxelarCorkRequest) (*MsgCancelAxelarCorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelScheduledCork not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ScheduleCork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgScheduleAxelarCorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ScheduleCork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelarcork.v1.Msg/ScheduleCork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ScheduleCork(ctx, req.(*MsgScheduleAxelarCorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RelayCork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRelayAxelarCorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RelayCork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelarcork.v1.Msg/RelayCork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RelayCork(ctx, req.(*MsgRelayAxelarCorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BumpCorkGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBumpAxelarCorkGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BumpCorkGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelarcork.v1.Msg/BumpCorkGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BumpCorkGas(ctx, req.(*MsgBumpAxelarCorkGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelScheduledCork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelAxelarCorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelScheduledCork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelarcork.v1.Msg/CancelScheduledCork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelScheduledCork(ctx, req.(*MsgCancelAxelarCorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "axelarcork.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleCork",
			Handler:    _Msg_ScheduleCork_Handler,
		},
		{
			MethodName: "RelayCork",
			Handler:    _Msg_RelayCork_Handler,
		},
		{
			MethodName: "BumpCorkGas",
			Handler:    _Msg_BumpCorkGas_Handler,
		},
		{
			MethodName: "CancelScheduledCork",
			Handler:    _Msg_CancelScheduledCork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "axelarcork/v1/tx.proto",
}

func (m *MsgScheduleAxelarCorkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgScheduleAxelarCorkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgScheduleAxelarCorkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if m.Cork != nil {
		{
			size, err := m.Cork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgScheduleAxelarCorkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgScheduleAxelarCorkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgScheduleAxelarCorkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRelayAxelarCorkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRelayAxelarCorkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRelayAxelarCorkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetContractAddress) > 0 {
		i -= len(m.TargetContractAddress)
		copy(dAtA[i:], m.TargetContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TargetContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x20
	}
	if m.Fee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRelayAxelarCorkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRelayAxelarCorkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRelayAxelarCorkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRelayAxelarProxyUpgradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRelayAxelarProxyUpgradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRelayAxelarProxyUpgradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x20
	}
	if m.Fee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRelayAxelarProxyUpgradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRelayAxelarProxyUpgradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRelayAxelarProxyUpgradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBumpAxelarCorkGasRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBumpAxelarCorkGasRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBumpAxelarCorkGasRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBumpAxelarCorkGasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBumpAxelarCorkGasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBumpAxelarCorkGasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelAxelarCorkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelAxelarCorkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelAxelarCorkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetContractAddress) > 0 {
		i -= len(m.TargetContractAddress)
		copy(dAtA[i:], m.TargetContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TargetContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelAxelarCorkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelAxelarCorkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelAxelarCorkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgScheduleAxelarCorkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cork != nil {
		l = m.Cork.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgScheduleAxelarCorkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRelayAxelarCorkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Token.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Fee != 0 {
		n += 1 + sovTx(uint64(m.Fee))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.TargetContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRelayAxelarCorkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRelayAxelarProxyUpgradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Token.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Fee != 0 {
		n += 1 + sovTx(uint64(m.Fee))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	return n
}

func (m *MsgRelayAxelarProxyUpgradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBumpAxelarCorkGasRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Token.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBumpAxelarCorkGasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelAxelarCorkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.TargetContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelAxelarCorkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgScheduleAxelarCorkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgScheduleAxelarCorkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgScheduleAxelarCorkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cork == nil {
				m.Cork = &AxelarCork{}
			}
			if err := m.Cork.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgScheduleAxelarCorkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgScheduleAxelarCorkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgScheduleAxelarCorkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRelayAxelarCorkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRelayAxelarCorkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRelayAxelarCorkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRelayAxelarCorkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRelayAxelarCorkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRelayAxelarCorkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRelayAxelarProxyUpgradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRelayAxelarProxyUpgradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRelayAxelarProxyUpgradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRelayAxelarProxyUpgradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRelayAxelarProxyUpgradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRelayAxelarProxyUpgradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBumpAxelarCorkGasRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBumpAxelarCorkGasRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBumpAxelarCorkGasRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBumpAxelarCorkGasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBumpAxelarCorkGasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBumpAxelarCorkGasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelAxelarCorkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelAxelarCorkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelAxelarCorkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelAxelarCorkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelAxelarCorkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelAxelarCorkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
