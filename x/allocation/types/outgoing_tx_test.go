package types

import (
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/require"
)

//func TestABIEncodedRebalanceBytes(t *testing.T) {
//
//	rebalanceBytes := Cellar{
//		Id: "0x0000000000",
//		TickRanges: []*TickRange{
//			{-189780, -192480, 160},
//			{-192480, -197880, 680},
//			{-197880, -200640, 160},
//		},
//	}.ABIEncodedRebalanceBytes()
//	rebalanceHash := crypto.Keccak256Hash(rebalanceBytes).Bytes()
//
//	// hash from python brownie code cc @stevenj
//	testHash, err := hex.DecodeString("0xd0f79d9bfeec64dbc27ccd281a20931cfadc07d87875c3289f55383e59f3ebbc"[2:])
//	require.NoError(t, err)
//	if !bytes.Equal(testHash, rebalanceHash) {
//		t.Errorf("gold hash is not equal to generated hash:\n gold hash: %x\n test hash: %x", testHash, rebalanceHash)
//	}
//}

func TestABIEncodedCellarTickInfoBytes(t *testing.T) {
	tickInfoHash := ABIEncodedCellarTickInfoBytes(0)
	t.Logf("hash: %b", tickInfoHash)
}

func TestABIDecodeRebalanceCall(t *testing.T) {
	hbz, err := hex.DecodeString("135d4f2400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000000028")
	require.NoError(t, err)

	abiJSON, err := abiJSON()
	require.NoError(t, err)

	i, err := abiJSON.Unpack("rebalance", hbz)
	require.NoError(t, err)
	t.Logf("interface %v", i)
}
