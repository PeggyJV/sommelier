// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Auction {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(message, optional, tag = "2")]
    pub starting_tokens_for_sale: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
    #[prost(uint64, tag = "3")]
    pub start_block: u64,
    #[prost(uint64, tag = "4")]
    pub end_block: u64,
    #[prost(string, tag = "5")]
    pub initial_price_decrease_rate: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub current_price_decrease_rate: ::prost::alloc::string::String,
    #[prost(uint64, tag = "7")]
    pub price_decrease_block_interval: u64,
    #[prost(string, tag = "8")]
    pub initial_unit_price_in_usomm: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub current_unit_price_in_usomm: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "10")]
    pub remaining_tokens_for_sale: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
    #[prost(string, tag = "11")]
    pub funding_module_account: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub proceeds_module_account: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bid {
    #[prost(uint64, tag = "1")]
    pub id: u64,
    #[prost(uint32, tag = "2")]
    pub auction_id: u32,
    #[prost(string, tag = "3")]
    pub bidder: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub max_bid_in_usomm: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
    #[prost(message, optional, tag = "5")]
    pub sale_token_minimum_amount: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
    #[prost(message, optional, tag = "6")]
    pub total_fulfilled_sale_tokens: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
    #[prost(string, tag = "7")]
    pub sale_token_unit_price_in_usomm: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub total_usomm_paid: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
    #[prost(uint64, tag = "9")]
    pub block_height: u64,
}
/// USD price is the value for one non-fractional token (smallest unit of the token * 10^exponent)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenPrice {
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub exponent: u64,
    #[prost(string, tag = "3")]
    pub usd_price: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    pub last_updated_block: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProposedTokenPrice {
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub exponent: u64,
    #[prost(string, tag = "3")]
    pub usd_price: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSubmitBidRequest {
    #[prost(uint32, tag = "1")]
    pub auction_id: u32,
    #[prost(string, tag = "2")]
    pub signer: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub max_bid_in_usomm: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
    #[prost(message, optional, tag = "4")]
    pub sale_token_minimum_amount: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSubmitBidResponse {
    #[prost(message, optional, tag = "1")]
    pub bid: ::core::option::Option<Bid>,
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn submit_bid(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSubmitBidRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSubmitBidResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/auction.v1.Msg/SubmitBid");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("auction.v1.Msg", "SubmitBid"));
            self.inner.unary(req, path, codec).await
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
    #[prost(message, repeated, tag = "2")]
    pub auctions: ::prost::alloc::vec::Vec<Auction>,
    #[prost(message, repeated, tag = "3")]
    pub bids: ::prost::alloc::vec::Vec<Bid>,
    #[prost(message, repeated, tag = "4")]
    pub token_prices: ::prost::alloc::vec::Vec<TokenPrice>,
    #[prost(uint32, tag = "5")]
    pub last_auction_id: u32,
    #[prost(uint64, tag = "6")]
    pub last_bid_id: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    #[prost(uint64, tag = "1")]
    pub price_max_block_age: u64,
    #[prost(uint64, tag = "2")]
    pub minimum_bid_in_usomm: u64,
    #[prost(string, tag = "3")]
    pub minimum_sale_tokens_usd_value: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    pub auction_max_block_age: u64,
    #[prost(string, tag = "5")]
    pub auction_price_decrease_acceleration_rate: ::prost::alloc::string::String,
    #[prost(uint64, tag = "6")]
    pub minimum_auction_height: u64,
    #[prost(string, tag = "7")]
    pub auction_burn_rate: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryActiveAuctionRequest {
    #[prost(uint32, tag = "1")]
    pub auction_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryActiveAuctionResponse {
    #[prost(message, optional, tag = "1")]
    pub auction: ::core::option::Option<Auction>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryEndedAuctionRequest {
    #[prost(uint32, tag = "1")]
    pub auction_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEndedAuctionResponse {
    #[prost(message, optional, tag = "1")]
    pub auction: ::core::option::Option<Auction>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryActiveAuctionsRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryActiveAuctionsResponse {
    #[prost(message, repeated, tag = "1")]
    pub auctions: ::prost::alloc::vec::Vec<Auction>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEndedAuctionsRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::query::v1beta1::PageRequest,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEndedAuctionsResponse {
    #[prost(message, repeated, tag = "1")]
    pub auctions: ::prost::alloc::vec::Vec<Auction>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::query::v1beta1::PageResponse,
    >,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryBidRequest {
    #[prost(uint64, tag = "1")]
    pub bid_id: u64,
    #[prost(uint32, tag = "2")]
    pub auction_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryBidResponse {
    #[prost(message, optional, tag = "1")]
    pub bid: ::core::option::Option<Bid>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryBidsByAuctionRequest {
    #[prost(uint32, tag = "1")]
    pub auction_id: u32,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::query::v1beta1::PageRequest,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryBidsByAuctionResponse {
    #[prost(message, repeated, tag = "1")]
    pub bids: ::prost::alloc::vec::Vec<Bid>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::query::v1beta1::PageResponse,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenPriceRequest {
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenPriceResponse {
    #[prost(message, optional, tag = "1")]
    pub token_price: ::core::option::Option<TokenPrice>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryTokenPricesRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenPricesResponse {
    #[prost(message, repeated, tag = "1")]
    pub token_prices: ::prost::alloc::vec::Vec<TokenPrice>,
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn query_params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auction.v1.Query/QueryParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auction.v1.Query", "QueryParams"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_active_auction(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryActiveAuctionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryActiveAuctionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auction.v1.Query/QueryActiveAuction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auction.v1.Query", "QueryActiveAuction"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_ended_auction(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryEndedAuctionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryEndedAuctionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auction.v1.Query/QueryEndedAuction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auction.v1.Query", "QueryEndedAuction"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_active_auctions(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryActiveAuctionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryActiveAuctionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auction.v1.Query/QueryActiveAuctions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auction.v1.Query", "QueryActiveAuctions"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_ended_auctions(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryEndedAuctionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryEndedAuctionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auction.v1.Query/QueryEndedAuctions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auction.v1.Query", "QueryEndedAuctions"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_bid(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryBidRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryBidResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auction.v1.Query/QueryBid",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("auction.v1.Query", "QueryBid"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_bids_by_auction(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryBidsByAuctionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryBidsByAuctionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auction.v1.Query/QueryBidsByAuction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auction.v1.Query", "QueryBidsByAuction"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_token_price(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryTokenPriceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTokenPriceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auction.v1.Query/QueryTokenPrice",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auction.v1.Query", "QueryTokenPrice"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_token_prices(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryTokenPricesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTokenPricesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auction.v1.Query/QueryTokenPrices",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auction.v1.Query", "QueryTokenPrices"));
            self.inner.unary(req, path, codec).await
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetTokenPricesProposal {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub token_prices: ::prost::alloc::vec::Vec<ProposedTokenPrice>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetTokenPricesProposalWithDeposit {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub token_prices: ::prost::alloc::vec::Vec<ProposedTokenPrice>,
    #[prost(string, tag = "4")]
    pub deposit: ::prost::alloc::string::String,
}
