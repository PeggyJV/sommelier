// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oracle/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
<<<<<<< HEAD
<<<<<<< HEAD
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
=======
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

<<<<<<< HEAD
<<<<<<< HEAD
type QueryExchangeRateRequest struct {
	// token denomination
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
=======
type QueryValidatorAddressRequest struct {
	Delegate string `protobuf:"bytes,1,opt,name=delegate,proto3" json:"delegate,omitempty"`
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
type QueryValidatorAddressRequest struct {
	Delegate string `protobuf:"bytes,1,opt,name=delegate,proto3" json:"delegate,omitempty"`
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
}

func (m *QueryValidatorAddressRequest) Reset()         { *m = QueryValidatorAddressRequest{} }
func (m *QueryValidatorAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorAddressRequest) ProtoMessage()    {}
func (*QueryValidatorAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{0}
}
func (m *QueryValidatorAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorAddressRequest.Merge(m, src)
}
func (m *QueryValidatorAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorAddressRequest proto.InternalMessageInfo

func (m *QueryValidatorAddressRequest) GetDelegate() string {
	if m != nil {
		return m.Delegate
	}
	return ""
}

<<<<<<< HEAD
<<<<<<< HEAD
type QueryExchangeRateResponse struct {
	// token exchange rate
	Rate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate"`
=======
type QueryValidatorAddressResponse struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
type QueryValidatorAddressResponse struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
}

func (m *QueryValidatorAddressResponse) Reset()         { *m = QueryValidatorAddressResponse{} }
func (m *QueryValidatorAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorAddressResponse) ProtoMessage()    {}
func (*QueryValidatorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{1}
}
<<<<<<< HEAD
<<<<<<< HEAD
func (m *QueryExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRateResponse.Merge(m, src)
}
func (m *QueryExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRateResponse proto.InternalMessageInfo

type QueryExchangeRatesRequest struct {
	// pagination request
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryExchangeRatesRequest) Reset()         { *m = QueryExchangeRatesRequest{} }
func (m *QueryExchangeRatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRatesRequest) ProtoMessage()    {}
func (*QueryExchangeRatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{2}
}
func (m *QueryExchangeRatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRatesRequest.Merge(m, src)
}
func (m *QueryExchangeRatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRatesRequest proto.InternalMessageInfo

func (m *QueryExchangeRatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryExchangeRatesResponse struct {
	Rates github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=rates,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"rates"`
	// pagination response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryExchangeRatesResponse) Reset()         { *m = QueryExchangeRatesResponse{} }
func (m *QueryExchangeRatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRatesResponse) ProtoMessage()    {}
func (*QueryExchangeRatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{3}
}
func (m *QueryExchangeRatesResponse) XXX_Unmarshal(b []byte) error {
=======
func (m *QueryValidatorAddressResponse) XXX_Unmarshal(b []byte) error {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
func (m *QueryValidatorAddressResponse) XXX_Unmarshal(b []byte) error {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	return m.Unmarshal(b)
}
func (m *QueryValidatorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorAddressResponse.Merge(m, src)
}
func (m *QueryValidatorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorAddressResponse proto.InternalMessageInfo
<<<<<<< HEAD

func (m *QueryValidatorAddressResponse) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

<<<<<<< HEAD
func (m *QueryExchangeRatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
=======

func (m *QueryValidatorAddressResponse) GetValidator() string {
	if m != nil {
		return m.Validator
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	}
	return ""
}

<<<<<<< HEAD
type QueryActivesRequest struct {
	// pagination request
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
=======
type QueryParamsRequest struct {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
type QueryParamsRequest struct {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{2}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo
<<<<<<< HEAD

<<<<<<< HEAD
func (m *QueryActivesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryActivesResponse struct {
	Denoms []string `protobuf:"bytes,1,rep,name=denoms,proto3" json:"denoms,omitempty"`
	// pagination response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
=======
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{3}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
<<<<<<< HEAD
}

<<<<<<< HEAD
func (m *QueryActivesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryParametersRequest struct {
=======
type QueryVotePeriodRequest struct {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
}

func (m *QueryVotePeriodRequest) Reset()         { *m = QueryVotePeriodRequest{} }
func (m *QueryVotePeriodRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVotePeriodRequest) ProtoMessage()    {}
func (*QueryVotePeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{4}
}
func (m *QueryVotePeriodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotePeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotePeriodRequest.Marshal(b, m, deterministic)
=======
}

type QueryVotePeriodRequest struct {
}

func (m *QueryVotePeriodRequest) Reset()         { *m = QueryVotePeriodRequest{} }
func (m *QueryVotePeriodRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVotePeriodRequest) ProtoMessage()    {}
func (*QueryVotePeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{4}
}
func (m *QueryVotePeriodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotePeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotePeriodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVotePeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotePeriodRequest.Merge(m, src)
}
func (m *QueryVotePeriodRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotePeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotePeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotePeriodRequest proto.InternalMessageInfo

type VotePeriod struct {
	CurrentHeight   int64 `protobuf:"varint,1,opt,name=current_height,json=currentHeight,proto3" json:"current_height,omitempty"`
	VotePeriodStart int64 `protobuf:"varint,2,opt,name=vote_period_start,json=votePeriodStart,proto3" json:"vote_period_start,omitempty"`
	VotePeriodEnd   int64 `protobuf:"varint,3,opt,name=vote_period_end,json=votePeriodEnd,proto3" json:"vote_period_end,omitempty"`
}

func (m *VotePeriod) Reset()         { *m = VotePeriod{} }
func (m *VotePeriod) String() string { return proto.CompactTextString(m) }
func (*VotePeriod) ProtoMessage()    {}
func (*VotePeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{5}
}
func (m *VotePeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VotePeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VotePeriod.Marshal(b, m, deterministic)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
<<<<<<< HEAD
func (m *QueryVotePeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotePeriodRequest.Merge(m, src)
}
func (m *QueryVotePeriodRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotePeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotePeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotePeriodRequest proto.InternalMessageInfo

type VotePeriod struct {
	CurrentHeight   int64 `protobuf:"varint,1,opt,name=current_height,json=currentHeight,proto3" json:"current_height,omitempty"`
	VotePeriodStart int64 `protobuf:"varint,2,opt,name=vote_period_start,json=votePeriodStart,proto3" json:"vote_period_start,omitempty"`
	VotePeriodEnd   int64 `protobuf:"varint,3,opt,name=vote_period_end,json=votePeriodEnd,proto3" json:"vote_period_end,omitempty"`
}

func (m *VotePeriod) Reset()         { *m = VotePeriod{} }
func (m *VotePeriod) String() string { return proto.CompactTextString(m) }
func (*VotePeriod) ProtoMessage()    {}
func (*VotePeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{5}
}
func (m *VotePeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VotePeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VotePeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VotePeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotePeriod.Merge(m, src)
}
func (m *VotePeriod) XXX_Size() int {
	return m.Size()
}
func (m *VotePeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_VotePeriod.DiscardUnknown(m)
}

var xxx_messageInfo_VotePeriod proto.InternalMessageInfo

func (m *VotePeriod) GetCurrentHeight() int64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *VotePeriod) GetVotePeriodStart() int64 {
	if m != nil {
=======
func (m *VotePeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotePeriod.Merge(m, src)
}
func (m *VotePeriod) XXX_Size() int {
	return m.Size()
}
func (m *VotePeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_VotePeriod.DiscardUnknown(m)
}

var xxx_messageInfo_VotePeriod proto.InternalMessageInfo

func (m *VotePeriod) GetCurrentHeight() int64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *VotePeriod) GetVotePeriodStart() int64 {
	if m != nil {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
		return m.VotePeriodStart
	}
	return 0
}

func (m *VotePeriod) GetVotePeriodEnd() int64 {
	if m != nil {
		return m.VotePeriodEnd
	}
	return 0
}

type QueryMissCounterRequest struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *QueryMissCounterRequest) Reset()         { *m = QueryMissCounterRequest{} }
func (m *QueryMissCounterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMissCounterRequest) ProtoMessage()    {}
func (*QueryMissCounterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{6}
}
func (m *QueryMissCounterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMissCounterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMissCounterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMissCounterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissCounterRequest.Merge(m, src)
}
func (m *QueryMissCounterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMissCounterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissCounterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissCounterRequest proto.InternalMessageInfo

func (m *QueryMissCounterRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

type QueryMissCounterResponse struct {
	MissCounter int64 `protobuf:"varint,1,opt,name=miss_counter,json=missCounter,proto3" json:"miss_counter,omitempty"`
}

func (m *QueryMissCounterResponse) Reset()         { *m = QueryMissCounterResponse{} }
func (m *QueryMissCounterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMissCounterResponse) ProtoMessage()    {}
func (*QueryMissCounterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{7}
}
func (m *QueryMissCounterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMissCounterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMissCounterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMissCounterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissCounterResponse.Merge(m, src)
}
func (m *QueryMissCounterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMissCounterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissCounterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissCounterResponse proto.InternalMessageInfo

func (m *QueryMissCounterResponse) GetMissCounter() int64 {
	if m != nil {
		return m.MissCounter
	}
	return 0
}

type QueryDelegeateAddressRequest struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *QueryDelegeateAddressRequest) Reset()         { *m = QueryDelegeateAddressRequest{} }
func (m *QueryDelegeateAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegeateAddressRequest) ProtoMessage()    {}
func (*QueryDelegeateAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{8}
}
func (m *QueryDelegeateAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegeateAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegeateAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegeateAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegeateAddressRequest.Merge(m, src)
}
func (m *QueryDelegeateAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegeateAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegeateAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegeateAddressRequest proto.InternalMessageInfo

func (m *QueryDelegeateAddressRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

type QueryDelegeateAddressResponse struct {
	Delegate string `protobuf:"bytes,2,opt,name=delegate,proto3" json:"delegate,omitempty"`
}

func (m *QueryDelegeateAddressResponse) Reset()         { *m = QueryDelegeateAddressResponse{} }
func (m *QueryDelegeateAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegeateAddressResponse) ProtoMessage()    {}
func (*QueryDelegeateAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{9}
}
func (m *QueryDelegeateAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegeateAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegeateAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegeateAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegeateAddressResponse.Merge(m, src)
}
func (m *QueryDelegeateAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegeateAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegeateAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegeateAddressResponse proto.InternalMessageInfo

func (m *QueryDelegeateAddressResponse) GetDelegate() string {
	if m != nil {
		return m.Delegate
	}
	return ""
}

type QueryOracleDataPrevoteRequest struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *QueryOracleDataPrevoteRequest) Reset()         { *m = QueryOracleDataPrevoteRequest{} }
func (m *QueryOracleDataPrevoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleDataPrevoteRequest) ProtoMessage()    {}
func (*QueryOracleDataPrevoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{10}
}
func (m *QueryOracleDataPrevoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleDataPrevoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleDataPrevoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleDataPrevoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleDataPrevoteRequest.Merge(m, src)
}
func (m *QueryOracleDataPrevoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleDataPrevoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleDataPrevoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleDataPrevoteRequest proto.InternalMessageInfo

func (m *QueryOracleDataPrevoteRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

<<<<<<< HEAD
<<<<<<< HEAD
type QueryAggregateVoteResponse struct {
	Vote AggregateExchangeRateVote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote"`
}

func (m *QueryAggregateVoteResponse) Reset()         { *m = QueryAggregateVoteResponse{} }
func (m *QueryAggregateVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateVoteResponse) ProtoMessage()    {}
func (*QueryAggregateVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{15}
}
func (m *QueryAggregateVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateVoteResponse.Merge(m, src)
}
func (m *QueryAggregateVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateVoteResponse proto.InternalMessageInfo

func (m *QueryAggregateVoteResponse) GetVote() AggregateExchangeRateVote {
	if m != nil {
		return m.Vote
	}
	return AggregateExchangeRateVote{}
}

type QueryVoteTargetsRequest struct {
	// pagination request
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVoteTargetsRequest) Reset()         { *m = QueryVoteTargetsRequest{} }
func (m *QueryVoteTargetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVoteTargetsRequest) ProtoMessage()    {}
func (*QueryVoteTargetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{16}
}
func (m *QueryVoteTargetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteTargetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteTargetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteTargetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteTargetsRequest.Merge(m, src)
}
func (m *QueryVoteTargetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteTargetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteTargetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteTargetsRequest proto.InternalMessageInfo

func (m *QueryVoteTargetsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryVoteTargetsResponse struct {
	Targets []string `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	// pagination response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
=======
type QueryOracleDataPrevoteResponse struct {
	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
}

=======
type QueryOracleDataPrevoteResponse struct {
	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
func (m *QueryOracleDataPrevoteResponse) Reset()         { *m = QueryOracleDataPrevoteResponse{} }
func (m *QueryOracleDataPrevoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleDataPrevoteResponse) ProtoMessage()    {}
func (*QueryOracleDataPrevoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{11}
}
func (m *QueryOracleDataPrevoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleDataPrevoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleDataPrevoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleDataPrevoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleDataPrevoteResponse.Merge(m, src)
}
func (m *QueryOracleDataPrevoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleDataPrevoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleDataPrevoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleDataPrevoteResponse proto.InternalMessageInfo
<<<<<<< HEAD

func (m *QueryOracleDataPrevoteResponse) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

<<<<<<< HEAD
func (m *QueryVoteTargetsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
=======

func (m *QueryOracleDataPrevoteResponse) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	}
	return nil
}

<<<<<<< HEAD
type QueryTobinTaxRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
=======
type QueryOracleDataVoteRequest struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
type QueryOracleDataVoteRequest struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
}

func (m *QueryOracleDataVoteRequest) Reset()         { *m = QueryOracleDataVoteRequest{} }
func (m *QueryOracleDataVoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleDataVoteRequest) ProtoMessage()    {}
func (*QueryOracleDataVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{12}
}
func (m *QueryOracleDataVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleDataVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleDataVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleDataVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleDataVoteRequest.Merge(m, src)
}
func (m *QueryOracleDataVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleDataVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleDataVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleDataVoteRequest proto.InternalMessageInfo

func (m *QueryOracleDataVoteRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

<<<<<<< HEAD
<<<<<<< HEAD
type QueryTobinTaxResponse struct {
	Rate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate"`
=======
type QueryOracleDataRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
type QueryOracleDataRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
}

func (m *QueryOracleDataRequest) Reset()         { *m = QueryOracleDataRequest{} }
func (m *QueryOracleDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleDataRequest) ProtoMessage()    {}
func (*QueryOracleDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{13}
}
func (m *QueryOracleDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleDataRequest.Merge(m, src)
}
func (m *QueryOracleDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleDataRequest proto.InternalMessageInfo

<<<<<<< HEAD
<<<<<<< HEAD
type QueryTobinTaxesRequest struct {
	// pagination request
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTobinTaxesRequest) Reset()         { *m = QueryTobinTaxesRequest{} }
func (m *QueryTobinTaxesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTobinTaxesRequest) ProtoMessage()    {}
func (*QueryTobinTaxesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{20}
}
func (m *QueryTobinTaxesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTobinTaxesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTobinTaxesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
=======
func (m *QueryOracleDataRequest) GetType() string {
	if m != nil {
		return m.Type
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
func (m *QueryOracleDataRequest) GetType() string {
	if m != nil {
		return m.Type
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	}
	return ""
}

<<<<<<< HEAD
<<<<<<< HEAD
func (m *QueryTobinTaxesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryTobinTaxesResponse struct {
	Rates github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=rates,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"rates"`
	// pagination response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
=======
type QueryOracleDataResponse struct {
	OracleData *types.Any `protobuf:"bytes,1,opt,name=oracle_data,json=oracleData,proto3" json:"oracle_data,omitempty"`
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
}

=======
type QueryOracleDataResponse struct {
	OracleData *types.Any `protobuf:"bytes,1,opt,name=oracle_data,json=oracleData,proto3" json:"oracle_data,omitempty"`
}

>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
func (m *QueryOracleDataResponse) Reset()         { *m = QueryOracleDataResponse{} }
func (m *QueryOracleDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleDataResponse) ProtoMessage()    {}
func (*QueryOracleDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{14}
}
func (m *QueryOracleDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleDataResponse.Merge(m, src)
}
func (m *QueryOracleDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleDataResponse proto.InternalMessageInfo
<<<<<<< HEAD

func (m *QueryOracleDataResponse) GetOracleData() *types.Any {
	if m != nil {
		return m.OracleData
	}
	return nil
}

func (m *QueryTobinTaxesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
=======

func (m *QueryOracleDataResponse) GetOracleData() *types.Any {
	if m != nil {
		return m.OracleData
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryValidatorAddressRequest)(nil), "oracle.v1.QueryValidatorAddressRequest")
	proto.RegisterType((*QueryValidatorAddressResponse)(nil), "oracle.v1.QueryValidatorAddressResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "oracle.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "oracle.v1.QueryParamsResponse")
	proto.RegisterType((*QueryVotePeriodRequest)(nil), "oracle.v1.QueryVotePeriodRequest")
	proto.RegisterType((*VotePeriod)(nil), "oracle.v1.VotePeriod")
	proto.RegisterType((*QueryMissCounterRequest)(nil), "oracle.v1.QueryMissCounterRequest")
	proto.RegisterType((*QueryMissCounterResponse)(nil), "oracle.v1.QueryMissCounterResponse")
	proto.RegisterType((*QueryDelegeateAddressRequest)(nil), "oracle.v1.QueryDelegeateAddressRequest")
	proto.RegisterType((*QueryDelegeateAddressResponse)(nil), "oracle.v1.QueryDelegeateAddressResponse")
	proto.RegisterType((*QueryOracleDataPrevoteRequest)(nil), "oracle.v1.QueryOracleDataPrevoteRequest")
	proto.RegisterType((*QueryOracleDataPrevoteResponse)(nil), "oracle.v1.QueryOracleDataPrevoteResponse")
	proto.RegisterType((*QueryOracleDataVoteRequest)(nil), "oracle.v1.QueryOracleDataVoteRequest")
	proto.RegisterType((*QueryOracleDataRequest)(nil), "oracle.v1.QueryOracleDataRequest")
	proto.RegisterType((*QueryOracleDataResponse)(nil), "oracle.v1.QueryOracleDataResponse")
}

func init() { proto.RegisterFile("oracle/v1/query.proto", fileDescriptor_34238c8dfdfcd7ec) }

var fileDescriptor_34238c8dfdfcd7ec = []byte{
<<<<<<< HEAD
<<<<<<< HEAD
	// 1055 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x5d, 0x6b, 0xdc, 0x46,
	0x14, 0xb5, 0x12, 0x7f, 0xd4, 0xb3, 0x0d, 0xb4, 0x53, 0x7f, 0xac, 0xd5, 0x8d, 0xd6, 0x91, 0xed,
	0x78, 0x49, 0x1a, 0x29, 0x76, 0x0a, 0x25, 0x50, 0x0a, 0xd9, 0x38, 0x09, 0x14, 0x0a, 0xae, 0x30,
	0x79, 0xe8, 0x07, 0xdb, 0x59, 0xed, 0x44, 0x56, 0xbb, 0xab, 0x51, 0x34, 0xf2, 0xc6, 0x26, 0x98,
	0x42, 0xfb, 0xd8, 0x97, 0x42, 0x29, 0xfd, 0x0f, 0xfd, 0x25, 0x81, 0x42, 0x09, 0xf4, 0xa5, 0xf4,
	0xc1, 0x2d, 0x76, 0x7f, 0x48, 0xd1, 0xe8, 0x6a, 0x35, 0xda, 0xd1, 0xee, 0xfa, 0x61, 0x5f, 0xfa,
	0x64, 0x6b, 0xe6, 0xde, 0x7b, 0xce, 0x99, 0x3b, 0x77, 0x8e, 0x8d, 0x96, 0x59, 0x44, 0xdc, 0x2e,
	0xb5, 0xfb, 0x3b, 0xf6, 0xf3, 0x23, 0x1a, 0x9d, 0x58, 0x61, 0xc4, 0x62, 0x86, 0x17, 0xd3, 0x65,
	0xab, 0xbf, 0xa3, 0x2f, 0x79, 0xcc, 0x63, 0x62, 0xd5, 0x4e, 0x7e, 0x4b, 0x03, 0xf4, 0x95, 0x3c,
	0x0f, 0x42, 0xd3, 0xf5, 0x9a, 0xc7, 0x98, 0xd7, 0xa5, 0x36, 0x09, 0x7d, 0x9b, 0x04, 0x01, 0x8b,
	0x49, 0xec, 0xb3, 0x80, 0xc3, 0xae, 0xe1, 0x32, 0xde, 0x63, 0xdc, 0x6e, 0x13, 0x9e, 0xa4, 0xb6,
	0x69, 0x4c, 0x76, 0x6c, 0x97, 0xf9, 0x01, 0xec, 0xdf, 0x92, 0xf7, 0x05, 0x9f, 0x41, 0x54, 0x48,
	0x3c, 0x3f, 0x10, 0xc5, 0xd2, 0x58, 0xf3, 0x2e, 0xaa, 0x7e, 0x9a, 0x44, 0x3c, 0x3a, 0x76, 0x0f,
	0x49, 0xe0, 0x51, 0x87, 0xc4, 0xd4, 0xa1, 0xcf, 0x8f, 0x28, 0x8f, 0xf1, 0x12, 0x9a, 0xeb, 0xd0,
	0x80, 0xf5, 0xaa, 0xda, 0xba, 0xd6, 0x58, 0x74, 0xd2, 0x0f, 0xb3, 0x85, 0xd6, 0x4a, 0x32, 0x78,
	0xc8, 0x02, 0x4e, 0x71, 0x13, 0xcd, 0x46, 0x24, 0xa6, 0x69, 0x46, 0xd3, 0x7a, 0x75, 0x56, 0x9f,
	0xf9, 0xeb, 0xac, 0x7e, 0xd3, 0xf3, 0xe3, 0xc3, 0xa3, 0xb6, 0xe5, 0xb2, 0x9e, 0x0d, 0xdc, 0xd2,
	0x1f, 0x77, 0x78, 0xe7, 0x1b, 0x3b, 0x3e, 0x09, 0x29, 0xb7, 0xf6, 0xa8, 0xeb, 0x88, 0x5c, 0xd3,
	0x2d, 0x01, 0xe0, 0x19, 0xa7, 0xc7, 0x08, 0xe5, 0x1a, 0x04, 0x4c, 0x65, 0xf7, 0xa6, 0x95, 0x56,
	0xb3, 0x12, 0xc1, 0x56, 0xda, 0x00, 0x10, 0x6c, 0xed, 0x13, 0x2f, 0xd3, 0xe3, 0x48, 0x99, 0xe6,
	0xef, 0x1a, 0xd2, 0xcb, 0x50, 0x40, 0x87, 0x87, 0xe6, 0x12, 0x2e, 0xbc, 0xaa, 0xad, 0x5f, 0x6d,
	0x54, 0x76, 0x6b, 0x05, 0x84, 0xac, 0xf6, 0x1e, 0x75, 0x1f, 0x32, 0x3f, 0x68, 0xde, 0x4b, 0x64,
	0xfe, 0xfa, 0x77, 0xfd, 0xf6, 0xe5, 0x64, 0x26, 0x39, 0xdc, 0x49, 0xeb, 0xe3, 0x27, 0x05, 0x3d,
	0x57, 0x84, 0x9e, 0xed, 0x89, 0x7a, 0x52, 0x96, 0x05, 0x41, 0x5f, 0xa2, 0x77, 0x84, 0x9e, 0x07,
	0x6e, 0xec, 0xf7, 0xa7, 0x7f, 0x5e, 0x2f, 0xd0, 0x52, 0xb1, 0x3c, 0x1c, 0xd4, 0x0a, 0x9a, 0x17,
	0xd7, 0x22, 0x3d, 0xa9, 0x45, 0x07, 0xbe, 0xa6, 0xa7, 0xab, 0x8a, 0x56, 0x04, 0xf0, 0x3e, 0x89,
	0x48, 0x8f, 0xc6, 0x34, 0xca, 0xa4, 0x99, 0x1f, 0xa3, 0x55, 0x65, 0x07, 0x58, 0xd9, 0x68, 0x3e,
	0x4c, 0x56, 0x39, 0x28, 0x7e, 0xdb, 0x1a, 0x4c, 0xa2, 0x25, 0xc2, 0x79, 0x73, 0x36, 0x69, 0x9a,
	0x03, 0x61, 0xe6, 0x87, 0xa8, 0x26, 0x6a, 0x3d, 0xa6, 0xb4, 0x43, 0xa3, 0x3d, 0xda, 0xa5, 0x9e,
	0x80, 0xcf, 0x8e, 0xb1, 0x86, 0x16, 0xfb, 0xa4, 0xeb, 0x77, 0x48, 0xcc, 0x22, 0x18, 0x87, 0x7c,
	0xc1, 0xbc, 0x8f, 0xae, 0x8f, 0xc8, 0x06, 0x3e, 0x55, 0xb4, 0x40, 0x3a, 0x9d, 0x88, 0x72, 0x0e,
	0xc9, 0xd9, 0xa7, 0xf9, 0x01, 0x88, 0xf8, 0xc4, 0xe7, 0xfc, 0x21, 0x3b, 0x0a, 0x62, 0x1a, 0x5d,
	0x0e, 0xf3, 0x7d, 0x18, 0xdc, 0x42, 0x62, 0x0e, 0xe7, 0xa6, 0x4b, 0x22, 0xef, 0xaa, 0x93, 0x7d,
	0x0e, 0x74, 0x3e, 0xf0, 0xbc, 0x28, 0x21, 0x49, 0xf7, 0x23, 0xda, 0x67, 0xf9, 0xc8, 0x8f, 0xc7,
	0x3c, 0x04, 0x9d, 0x6a, 0x36, 0x00, 0x3f, 0x41, 0x0b, 0x61, 0xba, 0x04, 0x07, 0xbf, 0x2d, 0x1d,
	0xfc, 0x20, 0x4b, 0x1e, 0x39, 0xa8, 0x00, 0xed, 0xc8, 0xb2, 0xcd, 0xfb, 0xf0, 0x06, 0x0c, 0x72,
	0x9e, 0x5e, 0x9a, 0xe4, 0x17, 0x30, 0xd8, 0x43, 0xa9, 0xc0, 0xf0, 0x23, 0x34, 0x2b, 0xd1, 0xdb,
	0x9c, 0x44, 0xef, 0x69, 0xce, 0x4d, 0xe4, 0x99, 0x04, 0xfa, 0x95, 0x6c, 0x1c, 0x90, 0xc8, 0xa3,
	0xf1, 0xd4, 0x47, 0xed, 0x14, 0x3a, 0x5b, 0x80, 0xc8, 0x3b, 0x1b, 0xa7, 0x4b, 0x30, 0x6f, 0xd9,
	0xe7, 0xf4, 0x06, 0xee, 0x3d, 0x98, 0xf4, 0x03, 0xd6, 0xf6, 0x83, 0x03, 0x72, 0x3c, 0xde, 0x0d,
	0x3e, 0x47, 0xcb, 0x43, 0xd1, 0x53, 0x74, 0x82, 0xaf, 0x60, 0xf6, 0xb3, 0xe2, 0xd3, 0x7f, 0xd6,
	0x7e, 0xd3, 0xa0, 0x9f, 0x32, 0xc4, 0xff, 0xd5, 0x03, 0x76, 0x7f, 0xae, 0xa0, 0x39, 0xa1, 0x06,
	0x7f, 0xaf, 0xa1, 0x37, 0xe5, 0x7b, 0x8c, 0x37, 0xa4, 0x9b, 0x3e, 0xca, 0xf0, 0xf5, 0xcd, 0xf1,
	0x41, 0x29, 0xa2, 0xd9, 0xf8, 0xee, 0x8f, 0x7f, 0x7f, 0xba, 0x62, 0xe2, 0x75, 0x3b, 0xff, 0xeb,
	0x85, 0x42, 0x60, 0x2b, 0x51, 0x64, 0xbf, 0x14, 0x77, 0xe3, 0x14, 0x7f, 0x8b, 0xae, 0x15, 0xec,
	0x15, 0x8f, 0x05, 0xc8, 0x9a, 0xab, 0x6f, 0x4d, 0x88, 0x02, 0x1e, 0x37, 0x04, 0x8f, 0x77, 0xf1,
	0xda, 0x28, 0x1e, 0x1c, 0x3f, 0x43, 0x0b, 0x60, 0x58, 0xd8, 0x18, 0x2e, 0x5a, 0x34, 0x4a, 0xbd,
	0x3e, 0x72, 0x1f, 0xe0, 0x74, 0x01, 0xb7, 0x84, 0xb1, 0x04, 0x47, 0xa0, 0x78, 0x84, 0x50, 0xee,
	0x42, 0xf8, 0xc6, 0x70, 0x29, 0xc5, 0xbb, 0x74, 0x73, 0x5c, 0x08, 0x00, 0x5e, 0x17, 0x80, 0xab,
	0x78, 0x59, 0x02, 0x0c, 0x73, 0x94, 0x5f, 0x34, 0xf4, 0xd6, 0xb0, 0xe1, 0xe0, 0xed, 0xe1, 0xba,
	0x23, 0x0c, 0x4d, 0x6f, 0x4c, 0x0e, 0x04, 0x1a, 0x77, 0x05, 0x8d, 0x5b, 0xb8, 0x21, 0xd1, 0x78,
	0x26, 0x82, 0x5b, 0x9d, 0x41, 0xb4, 0xfd, 0x72, 0xf0, 0x00, 0x9f, 0x26, 0x97, 0xaf, 0x22, 0xd9,
	0x12, 0x56, 0xc4, 0xaa, 0x66, 0xa7, 0x6f, 0x8c, 0x8d, 0x01, 0x2a, 0xb7, 0x05, 0x95, 0x2d, 0xbc,
	0x21, 0x51, 0xe9, 0xf9, 0x9c, 0xb7, 0xc0, 0xde, 0x0a, 0x2c, 0x92, 0xf3, 0x19, 0x36, 0x2a, 0xf5,
	0x7c, 0x46, 0x18, 0xa1, 0x7a, 0x3e, 0xa3, 0x3c, 0xaf, 0xf4, 0x7c, 0x48, 0x16, 0xdc, 0x02, 0x43,
	0x2b, 0x30, 0xfb, 0x41, 0x43, 0xd7, 0x0a, 0xee, 0xa4, 0xce, 0x45, 0x99, 0xef, 0xa9, 0x73, 0x51,
	0x6a, 0x71, 0xe6, 0x1d, 0x41, 0x68, 0x1b, 0x6f, 0x95, 0x12, 0x52, 0xd8, 0xbc, 0x40, 0x15, 0xc9,
	0x69, 0xd4, 0x66, 0xa9, 0x4e, 0xa7, 0x36, 0xab, 0xc4, 0xaa, 0xcc, 0xba, 0xa0, 0xb1, 0x86, 0x57,
	0x25, 0x1a, 0x09, 0x78, 0x2b, 0x73, 0x2c, 0x8e, 0xde, 0xc8, 0x5e, 0x5d, 0xac, 0x4c, 0xdf, 0x90,
	0xfb, 0xe8, 0xeb, 0xa3, 0x03, 0x00, 0x6f, 0x53, 0xe0, 0x19, 0xb8, 0x26, 0xe1, 0xc5, 0x49, 0x50,
	0x2b, 0x26, 0xc7, 0x83, 0x27, 0x89, 0x23, 0x94, 0x3f, 0xf5, 0xea, 0xa4, 0x2a, 0x4e, 0xa3, 0x4e,
	0xaa, 0xea, 0x14, 0xa6, 0x21, 0xa0, 0xab, 0x78, 0xa5, 0x0c, 0x9a, 0xf2, 0xe6, 0xa3, 0x57, 0xe7,
	0x86, 0xf6, 0xfa, 0xdc, 0xd0, 0xfe, 0x39, 0x37, 0xb4, 0x1f, 0x2f, 0x8c, 0x99, 0xd7, 0x17, 0xc6,
	0xcc, 0x9f, 0x17, 0xc6, 0xcc, 0x67, 0xb2, 0x5d, 0x84, 0xd4, 0xf3, 0x4e, 0xbe, 0xee, 0xdb, 0x9c,
	0xf5, 0x7a, 0xb4, 0xeb, 0xd3, 0xc8, 0x3e, 0xce, 0xea, 0x09, 0xdf, 0x68, 0xcf, 0x8b, 0x7f, 0xd9,
	0xee, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x8a, 0x82, 0x76, 0x6e, 0x0e, 0x00, 0x00,
=======
=======
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	// 749 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x52, 0xd3, 0x40,
	0x14, 0x4e, 0x01, 0x3b, 0x72, 0x8a, 0x20, 0x2b, 0x3f, 0x35, 0x53, 0xa2, 0xac, 0x83, 0xe2, 0x5f,
	0x32, 0xe0, 0x85, 0x0e, 0xca, 0x05, 0x08, 0x8e, 0x37, 0x28, 0xd6, 0x91, 0x0b, 0x47, 0xa7, 0x6e,
	0x9b, 0x35, 0x8d, 0xd3, 0x66, 0x43, 0x76, 0xdb, 0xa1, 0x4f, 0xc0, 0xad, 0x0f, 0xe3, 0x43, 0x30,
	0x5e, 0x71, 0xe9, 0x95, 0xe3, 0xc0, 0x8b, 0x38, 0xd9, 0x6c, 0x9a, 0x90, 0x98, 0xca, 0x5d, 0xf6,
	0x3b, 0xdf, 0x77, 0xce, 0xd9, 0x3d, 0x3f, 0x81, 0x79, 0x16, 0x90, 0x56, 0x87, 0x5a, 0xfd, 0x35,
	0xeb, 0xb0, 0x47, 0x83, 0x81, 0xe9, 0x07, 0x4c, 0x30, 0x34, 0x19, 0xc1, 0x66, 0x7f, 0x4d, 0x9f,
	0x73, 0x98, 0xc3, 0x24, 0x6a, 0x85, 0x5f, 0x11, 0x41, 0x5f, 0x48, 0x74, 0x8a, 0x1a, 0xe1, 0x8b,
	0x09, 0xee, 0x50, 0x8f, 0x72, 0x97, 0x2b, 0x03, 0x4a, 0x0c, 0xe2, 0x48, 0x61, 0x35, 0x87, 0x31,
	0xa7, 0x43, 0x2d, 0xe2, 0xbb, 0x16, 0xf1, 0x3c, 0x26, 0x88, 0x70, 0x99, 0x17, 0x2b, 0x8c, 0x16,
	0xe3, 0x5d, 0xc6, 0xad, 0x26, 0xe1, 0xa1, 0xac, 0x49, 0x05, 0x59, 0xb3, 0x5a, 0xcc, 0xf5, 0x94,
	0xfd, 0x66, 0x64, 0x6f, 0x44, 0xb9, 0x45, 0x87, 0xd8, 0xa4, 0x1c, 0xcb, 0x53, 0xb3, 0xf7, 0xd5,
	0x22, 0x9e, 0xba, 0x19, 0xde, 0x80, 0xda, 0xbb, 0xf0, 0xa2, 0x07, 0xa4, 0xe3, 0xda, 0x44, 0xb0,
	0x60, 0xcb, 0xb6, 0x03, 0xca, 0x79, 0x9d, 0x1e, 0xf6, 0x28, 0x17, 0x48, 0x87, 0xab, 0x36, 0xed,
	0x50, 0x87, 0x08, 0x5a, 0x2d, 0xdd, 0x2e, 0xad, 0x4e, 0xd6, 0x87, 0x67, 0xbc, 0x09, 0x4b, 0x05,
	0x5a, 0xee, 0x33, 0x8f, 0x53, 0x54, 0x83, 0xc9, 0x7e, 0x6c, 0x53, 0xea, 0x04, 0xc0, 0x73, 0x80,
	0xa4, 0x7c, 0x9f, 0x04, 0xa4, 0x1b, 0x07, 0xc4, 0xaf, 0xe0, 0xc6, 0x05, 0x54, 0xb9, 0xb2, 0xa0,
	0xec, 0x4b, 0x44, 0xfa, 0xa9, 0xac, 0xcf, 0x9a, 0xc3, 0x92, 0x98, 0x11, 0x75, 0x7b, 0xe2, 0xe4,
	0xf7, 0x2d, 0xad, 0xae, 0x68, 0xb8, 0x0a, 0x0b, 0x51, 0x72, 0x4c, 0xd0, 0x7d, 0x1a, 0xb8, 0xcc,
	0x8e, 0x23, 0x1c, 0x97, 0x00, 0x12, 0x14, 0xad, 0xc0, 0x74, 0xab, 0x17, 0x04, 0xd4, 0x13, 0x8d,
	0x36, 0x75, 0x9d, 0xb6, 0x90, 0x11, 0xc6, 0xeb, 0xd7, 0x14, 0xfa, 0x5a, 0x82, 0xe8, 0x01, 0xcc,
	0xf6, 0x99, 0xa0, 0x0d, 0x5f, 0xaa, 0x1a, 0x5c, 0x90, 0x40, 0x54, 0xc7, 0x24, 0x73, 0xa6, 0x3f,
	0xf4, 0xf6, 0x3e, 0x84, 0xd1, 0x5d, 0x98, 0x49, 0x73, 0xa9, 0x67, 0x57, 0xc7, 0x23, 0x9f, 0x09,
	0x73, 0xd7, 0xb3, 0xf1, 0x53, 0x58, 0x94, 0x39, 0xee, 0xb9, 0x9c, 0xbf, 0x64, 0x3d, 0x4f, 0xd0,
	0x20, 0x7e, 0xf7, 0xd1, 0x4f, 0xb7, 0x09, 0xd5, 0xbc, 0x50, 0xbd, 0xd4, 0x32, 0x4c, 0x75, 0x5d,
	0xce, 0x1b, 0xad, 0x08, 0x57, 0xb7, 0xa9, 0x74, 0x13, 0x2a, 0x7e, 0xa1, 0x8a, 0xbe, 0x13, 0x56,
	0x92, 0x12, 0x41, 0x33, 0x45, 0x1f, 0x1d, 0xfc, 0xb9, 0x2a, 0x7b, 0x5e, 0xad, 0x32, 0x48, 0xf7,
	0xcc, 0x58, 0x41, 0xcf, 0xbc, 0x95, 0xd5, 0xdb, 0x21, 0x82, 0xec, 0x07, 0x34, 0x7c, 0x95, 0xcb,
	0xc5, 0x7e, 0x06, 0x46, 0x91, 0x5c, 0x05, 0x5f, 0x80, 0x72, 0x9b, 0xf0, 0x36, 0x0d, 0x1b, 0x65,
	0x7c, 0x75, 0xaa, 0xae, 0x4e, 0x78, 0x03, 0xf4, 0x8c, 0xf2, 0xe0, 0xd2, 0x51, 0x1f, 0xa9, 0x5e,
	0x4a, 0xb4, 0xb1, 0x0e, 0xc1, 0x84, 0x18, 0xf8, 0xf1, 0x68, 0xc8, 0x6f, 0xfc, 0x45, 0x55, 0x35,
	0xcd, 0x56, 0xc9, 0xed, 0x42, 0x25, 0x6a, 0xdb, 0x86, 0x4d, 0x04, 0x51, 0xad, 0x3c, 0x67, 0x46,
	0xe3, 0x69, 0xc6, 0xe3, 0x69, 0x6e, 0x79, 0x83, 0xed, 0xe9, 0x9f, 0x3f, 0x1e, 0x43, 0xca, 0x05,
	0xb0, 0xe1, 0xf7, 0xfa, 0x71, 0x19, 0xae, 0xc8, 0x10, 0xe8, 0x0d, 0x54, 0x52, 0xd3, 0x82, 0x96,
	0x52, 0x53, 0x91, 0x9f, 0x2d, 0xdd, 0x28, 0x32, 0x47, 0xe9, 0x61, 0x0d, 0x75, 0x60, 0xfe, 0x9f,
	0xb5, 0x45, 0xf7, 0xb2, 0xd2, 0x82, 0xde, 0xd1, 0x57, 0xff, 0x4f, 0xcc, 0x45, 0xcb, 0x2e, 0x90,
	0x7c, 0xb4, 0x82, 0xf5, 0x94, 0x8f, 0x56, 0xb4, 0x8b, 0xb0, 0x86, 0x58, 0xae, 0x8a, 0xaa, 0x77,
	0x50, 0xce, 0x4b, 0x51, 0x77, 0xea, 0xf7, 0x2f, 0xc1, 0x1c, 0x06, 0xfc, 0xa4, 0x56, 0xd9, 0xc5,
	0x96, 0x43, 0x2b, 0xc5, 0x3e, 0x52, 0x2d, 0xa9, 0xd7, 0x52, 0xb4, 0x3d, 0xee, 0x5c, 0x24, 0x61,
	0x0d, 0xed, 0xc1, 0x4c, 0x66, 0xc1, 0xa1, 0xe5, 0xdc, 0x6b, 0x64, 0x97, 0x9f, 0x3e, 0x9f, 0xa2,
	0x24, 0x56, 0xac, 0xa1, 0xcf, 0x70, 0x3d, 0xbb, 0x52, 0x10, 0xce, 0xfa, 0xcb, 0x2f, 0x2a, 0xfd,
	0xce, 0x48, 0xce, 0xf0, 0x2d, 0x3e, 0x40, 0xaa, 0x99, 0xf3, 0x89, 0xe6, 0x26, 0x4b, 0xc7, 0xa3,
	0x28, 0xb1, 0xdb, 0xed, 0xdd, 0x93, 0x33, 0xa3, 0x74, 0x7a, 0x66, 0x94, 0xfe, 0x9c, 0x19, 0xa5,
	0xef, 0xe7, 0x86, 0x76, 0x7a, 0x6e, 0x68, 0xbf, 0xce, 0x0d, 0xed, 0xe3, 0x43, 0xc7, 0x15, 0xed,
	0x5e, 0xd3, 0x6c, 0xb1, 0xae, 0xe5, 0x53, 0xc7, 0x19, 0x7c, 0xeb, 0x5b, 0x9c, 0x75, 0xbb, 0xb4,
	0xe3, 0xd2, 0xc0, 0x3a, 0x52, 0xbf, 0x69, 0x2b, 0x9c, 0x58, 0xde, 0x2c, 0xcb, 0xd1, 0x7b, 0xf2,
	0x37, 0x00, 0x00, 0xff, 0xff, 0xda, 0x4f, 0x61, 0x73, 0xff, 0x07, 0x00, 0x00,
<<<<<<< HEAD
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	QueryDelegeateAddress(ctx context.Context, in *QueryDelegeateAddressRequest, opts ...grpc.CallOption) (*QueryDelegeateAddressResponse, error)
	QueryValidatorAddress(ctx context.Context, in *QueryValidatorAddressRequest, opts ...grpc.CallOption) (*QueryValidatorAddressResponse, error)
	QueryOracleDataPrevote(ctx context.Context, in *QueryOracleDataPrevoteRequest, opts ...grpc.CallOption) (*QueryOracleDataPrevoteResponse, error)
	QueryOracleDataVote(ctx context.Context, in *QueryOracleDataVoteRequest, opts ...grpc.CallOption) (*MsgOracleDataVote, error)
	QueryVotePeriod(ctx context.Context, in *QueryVotePeriodRequest, opts ...grpc.CallOption) (*VotePeriod, error)
	QueryMissCounter(ctx context.Context, in *QueryMissCounterRequest, opts ...grpc.CallOption) (*QueryMissCounterResponse, error)
	OracleData(ctx context.Context, in *QueryOracleDataRequest, opts ...grpc.CallOption) (*QueryOracleDataResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryParams", in, out, opts...)
<<<<<<< HEAD
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDelegeateAddress(ctx context.Context, in *QueryDelegeateAddressRequest, opts ...grpc.CallOption) (*QueryDelegeateAddressResponse, error) {
	out := new(QueryDelegeateAddressResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryDelegeateAddress", in, out, opts...)
=======
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	if err != nil {
		return nil, err
	}
	return out, nil
}

<<<<<<< HEAD
func (c *queryClient) QueryValidatorAddress(ctx context.Context, in *QueryValidatorAddressRequest, opts ...grpc.CallOption) (*QueryValidatorAddressResponse, error) {
	out := new(QueryValidatorAddressResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryValidatorAddress", in, out, opts...)
=======
func (c *queryClient) QueryDelegeateAddress(ctx context.Context, in *QueryDelegeateAddressRequest, opts ...grpc.CallOption) (*QueryDelegeateAddressResponse, error) {
	out := new(QueryDelegeateAddressResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryDelegeateAddress", in, out, opts...)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	if err != nil {
		return nil, err
	}
	return out, nil
}

<<<<<<< HEAD
=======
func (c *queryClient) QueryValidatorAddress(ctx context.Context, in *QueryValidatorAddressRequest, opts ...grpc.CallOption) (*QueryValidatorAddressResponse, error) {
	out := new(QueryValidatorAddressResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryValidatorAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
func (c *queryClient) QueryOracleDataPrevote(ctx context.Context, in *QueryOracleDataPrevoteRequest, opts ...grpc.CallOption) (*QueryOracleDataPrevoteResponse, error) {
	out := new(QueryOracleDataPrevoteResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryOracleDataPrevote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOracleDataVote(ctx context.Context, in *QueryOracleDataVoteRequest, opts ...grpc.CallOption) (*MsgOracleDataVote, error) {
	out := new(MsgOracleDataVote)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryOracleDataVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVotePeriod(ctx context.Context, in *QueryVotePeriodRequest, opts ...grpc.CallOption) (*VotePeriod, error) {
	out := new(VotePeriod)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryVotePeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryMissCounter(ctx context.Context, in *QueryMissCounterRequest, opts ...grpc.CallOption) (*QueryMissCounterResponse, error) {
	out := new(QueryMissCounterResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryMissCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleData(ctx context.Context, in *QueryOracleDataRequest, opts ...grpc.CallOption) (*QueryOracleDataResponse, error) {
	out := new(QueryOracleDataResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/OracleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	QueryDelegeateAddress(context.Context, *QueryDelegeateAddressRequest) (*QueryDelegeateAddressResponse, error)
	QueryValidatorAddress(context.Context, *QueryValidatorAddressRequest) (*QueryValidatorAddressResponse, error)
	QueryOracleDataPrevote(context.Context, *QueryOracleDataPrevoteRequest) (*QueryOracleDataPrevoteResponse, error)
	QueryOracleDataVote(context.Context, *QueryOracleDataVoteRequest) (*MsgOracleDataVote, error)
	QueryVotePeriod(context.Context, *QueryVotePeriodRequest) (*VotePeriod, error)
	QueryMissCounter(context.Context, *QueryMissCounterRequest) (*QueryMissCounterResponse, error)
	OracleData(context.Context, *QueryOracleDataRequest) (*QueryOracleDataResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
<<<<<<< HEAD
}
func (*UnimplementedQueryServer) QueryDelegeateAddress(ctx context.Context, req *QueryDelegeateAddressRequest) (*QueryDelegeateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDelegeateAddress not implemented")
}
func (*UnimplementedQueryServer) QueryValidatorAddress(ctx context.Context, req *QueryValidatorAddressRequest) (*QueryValidatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryValidatorAddress not implemented")
}
func (*UnimplementedQueryServer) QueryOracleDataPrevote(ctx context.Context, req *QueryOracleDataPrevoteRequest) (*QueryOracleDataPrevoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOracleDataPrevote not implemented")
}
func (*UnimplementedQueryServer) QueryOracleDataVote(ctx context.Context, req *QueryOracleDataVoteRequest) (*MsgOracleDataVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOracleDataVote not implemented")
}
func (*UnimplementedQueryServer) QueryVotePeriod(ctx context.Context, req *QueryVotePeriodRequest) (*VotePeriod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVotePeriod not implemented")
}
func (*UnimplementedQueryServer) QueryMissCounter(ctx context.Context, req *QueryMissCounterRequest) (*QueryMissCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMissCounter not implemented")
}
=======
}
func (*UnimplementedQueryServer) QueryDelegeateAddress(ctx context.Context, req *QueryDelegeateAddressRequest) (*QueryDelegeateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDelegeateAddress not implemented")
}
func (*UnimplementedQueryServer) QueryValidatorAddress(ctx context.Context, req *QueryValidatorAddressRequest) (*QueryValidatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryValidatorAddress not implemented")
}
func (*UnimplementedQueryServer) QueryOracleDataPrevote(ctx context.Context, req *QueryOracleDataPrevoteRequest) (*QueryOracleDataPrevoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOracleDataPrevote not implemented")
}
func (*UnimplementedQueryServer) QueryOracleDataVote(ctx context.Context, req *QueryOracleDataVoteRequest) (*MsgOracleDataVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOracleDataVote not implemented")
}
func (*UnimplementedQueryServer) QueryVotePeriod(ctx context.Context, req *QueryVotePeriodRequest) (*VotePeriod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVotePeriod not implemented")
}
func (*UnimplementedQueryServer) QueryMissCounter(ctx context.Context, req *QueryMissCounterRequest) (*QueryMissCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMissCounter not implemented")
}
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
func (*UnimplementedQueryServer) OracleData(ctx context.Context, req *QueryOracleDataRequest) (*QueryOracleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleData not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
<<<<<<< HEAD
=======
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDelegeateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegeateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDelegeateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryDelegeateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDelegeateAddress(ctx, req.(*QueryDelegeateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryValidatorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryValidatorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryValidatorAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryValidatorAddress(ctx, req.(*QueryValidatorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOracleDataPrevote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleDataPrevoteRequest)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
<<<<<<< HEAD
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
=======
		return srv.(QueryServer).QueryOracleDataPrevote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryOracleDataPrevote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOracleDataPrevote(ctx, req.(*QueryOracleDataPrevoteRequest))
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	}
	return interceptor(ctx, in, info, handler)
}

<<<<<<< HEAD
func _Query_QueryDelegeateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegeateAddressRequest)
=======
func _Query_QueryOracleDataVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleDataVoteRequest)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
<<<<<<< HEAD
		return srv.(QueryServer).QueryDelegeateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryDelegeateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDelegeateAddress(ctx, req.(*QueryDelegeateAddressRequest))
=======
		return srv.(QueryServer).QueryOracleDataVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryOracleDataVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOracleDataVote(ctx, req.(*QueryOracleDataVoteRequest))
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	}
	return interceptor(ctx, in, info, handler)
}

<<<<<<< HEAD
func _Query_QueryValidatorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorAddressRequest)
=======
func _Query_QueryVotePeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVotePeriodRequest)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
<<<<<<< HEAD
		return srv.(QueryServer).QueryValidatorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryValidatorAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryValidatorAddress(ctx, req.(*QueryValidatorAddressRequest))
=======
		return srv.(QueryServer).QueryVotePeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryVotePeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVotePeriod(ctx, req.(*QueryVotePeriodRequest))
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	}
	return interceptor(ctx, in, info, handler)
}

<<<<<<< HEAD
func _Query_QueryOracleDataPrevote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleDataPrevoteRequest)
=======
func _Query_QueryMissCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMissCounterRequest)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
<<<<<<< HEAD
		return srv.(QueryServer).QueryOracleDataPrevote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryOracleDataPrevote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOracleDataPrevote(ctx, req.(*QueryOracleDataPrevoteRequest))
=======
		return srv.(QueryServer).QueryMissCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryMissCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryMissCounter(ctx, req.(*QueryMissCounterRequest))
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	}
	return interceptor(ctx, in, info, handler)
}

<<<<<<< HEAD
func _Query_QueryOracleDataVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleDataVoteRequest)
=======
func _Query_OracleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleDataRequest)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
<<<<<<< HEAD
		return srv.(QueryServer).QueryOracleDataVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryOracleDataVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOracleDataVote(ctx, req.(*QueryOracleDataVoteRequest))
=======
		return srv.(QueryServer).OracleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/OracleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleData(ctx, req.(*QueryOracleDataRequest))
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	}
	return interceptor(ctx, in, info, handler)
}

<<<<<<< HEAD
func _Query_QueryVotePeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVotePeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVotePeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryVotePeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVotePeriod(ctx, req.(*QueryVotePeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryMissCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMissCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryMissCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryMissCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryMissCounter(ctx, req.(*QueryMissCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/OracleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleData(ctx, req.(*QueryOracleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oracle.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "QueryDelegeateAddress",
			Handler:    _Query_QueryDelegeateAddress_Handler,
		},
		{
			MethodName: "QueryValidatorAddress",
			Handler:    _Query_QueryValidatorAddress_Handler,
		},
		{
			MethodName: "QueryOracleDataPrevote",
			Handler:    _Query_QueryOracleDataPrevote_Handler,
		},
		{
			MethodName: "QueryOracleDataVote",
			Handler:    _Query_QueryOracleDataVote_Handler,
		},
		{
			MethodName: "QueryVotePeriod",
			Handler:    _Query_QueryVotePeriod_Handler,
		},
		{
			MethodName: "QueryMissCounter",
			Handler:    _Query_QueryMissCounter_Handler,
		},
		{
			MethodName: "OracleData",
			Handler:    _Query_OracleData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oracle/v1/query.proto",
}

=======
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oracle.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "QueryDelegeateAddress",
			Handler:    _Query_QueryDelegeateAddress_Handler,
		},
		{
			MethodName: "QueryValidatorAddress",
			Handler:    _Query_QueryValidatorAddress_Handler,
		},
		{
			MethodName: "QueryOracleDataPrevote",
			Handler:    _Query_QueryOracleDataPrevote_Handler,
		},
		{
			MethodName: "QueryOracleDataVote",
			Handler:    _Query_QueryOracleDataVote_Handler,
		},
		{
			MethodName: "QueryVotePeriod",
			Handler:    _Query_QueryVotePeriod_Handler,
		},
		{
			MethodName: "QueryMissCounter",
			Handler:    _Query_QueryMissCounter_Handler,
		},
		{
			MethodName: "OracleData",
			Handler:    _Query_OracleData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oracle/v1/query.proto",
}

>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
func (m *QueryValidatorAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
<<<<<<< HEAD
<<<<<<< HEAD
	i--
	dAtA[i] = 0xa
=======
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
<<<<<<< HEAD
<<<<<<< HEAD
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rates) > 0 {
		for iNdEx := len(m.Rates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
=======
=======
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
<<<<<<< HEAD
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVotePeriodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVotePeriodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVotePeriodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VotePeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VotePeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VotePeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
<<<<<<< HEAD
<<<<<<< HEAD
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denoms[iNdEx])
			copy(dAtA[i:], m.Denoms[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Denoms[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
=======
=======
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	if m.VotePeriodEnd != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotePeriodEnd))
		i--
		dAtA[i] = 0x18
	}
	if m.VotePeriodStart != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotePeriodStart))
		i--
		dAtA[i] = 0x10
	}
	if m.CurrentHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentHeight))
		i--
		dAtA[i] = 0x8
<<<<<<< HEAD
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	}
	return len(dAtA) - i, nil
}

func (m *QueryMissCounterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMissCounterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMissCounterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMissCounterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMissCounterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMissCounterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MissCounter != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MissCounter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegeateAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegeateAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegeateAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegeateAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegeateAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegeateAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleDataPrevoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleDataPrevoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleDataPrevoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleDataPrevoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleDataPrevoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleDataPrevoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for iNdEx := len(m.Hashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hashes[iNdEx])
			copy(dAtA[i:], m.Hashes[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Hashes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleDataVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleDataVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleDataVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OracleData != nil {
		{
			size, err := m.OracleData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryValidatorAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVotePeriodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
<<<<<<< HEAD
<<<<<<< HEAD
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
=======
	return n
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
	return n
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
}

func (m *VotePeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentHeight != 0 {
		n += 1 + sovQuery(uint64(m.CurrentHeight))
	}
	if m.VotePeriodStart != 0 {
		n += 1 + sovQuery(uint64(m.VotePeriodStart))
	}
	if m.VotePeriodEnd != 0 {
		n += 1 + sovQuery(uint64(m.VotePeriodEnd))
	}
	return n
}

func (m *QueryMissCounterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMissCounterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
<<<<<<< HEAD
<<<<<<< HEAD
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Targets) > 0 {
		for iNdEx := len(m.Targets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Targets[iNdEx])
			copy(dAtA[i:], m.Targets[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Targets[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
=======
	if m.MissCounter != 0 {
		n += 1 + sovQuery(uint64(m.MissCounter))
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
	if m.MissCounter != 0 {
		n += 1 + sovQuery(uint64(m.MissCounter))
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	}
	return n
}

<<<<<<< HEAD
<<<<<<< HEAD
func (m *QueryTobinTaxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTobinTaxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTobinTaxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTobinTaxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTobinTaxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTobinTaxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTobinTaxesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTobinTaxesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTobinTaxesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTobinTaxesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTobinTaxesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTobinTaxesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rates) > 0 {
		for iNdEx := len(m.Rates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryExchangeRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryExchangeRatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExchangeRatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rates) > 0 {
		for _, e := range m.Rates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActivesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActivesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for _, s := range m.Denoms {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParametersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParametersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFeederDelegationRequest) Size() (n int) {
=======
func (m *QueryDelegeateAddressRequest) Size() (n int) {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
func (m *QueryDelegeateAddressRequest) Size() (n int) {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegeateAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleDataPrevoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleDataPrevoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for _, b := range m.Hashes {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOracleDataVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

<<<<<<< HEAD
<<<<<<< HEAD
func (m *QueryAggregateVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Vote.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVoteTargetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVoteTargetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, s := range m.Targets {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTobinTaxRequest) Size() (n int) {
=======
func (m *QueryOracleDataResponse) Size() (n int) {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
func (m *QueryOracleDataResponse) Size() (n int) {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OracleData != nil {
		l = m.OracleData.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

<<<<<<< HEAD
<<<<<<< HEAD
func (m *QueryTobinTaxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTobinTaxesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTobinTaxesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rates) > 0 {
		for _, e := range m.Rates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

=======
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
<<<<<<< HEAD
<<<<<<< HEAD
}
func (m *QueryExchangeRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rates = append(m.Rates, types.DecCoin{})
			if err := m.Rates[len(m.Rates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActivesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActivesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActivesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActivesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActivesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActivesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParametersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParametersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParametersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
=======
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
}
func (m *QueryValidatorAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVotePeriodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVotePeriodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVotePeriodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
<<<<<<< HEAD
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VotePeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VotePeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VotePeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHeight", wireType)
			}
			m.CurrentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriodStart", wireType)
			}
			m.VotePeriodStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriodStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriodEnd", wireType)
			}
			m.VotePeriodEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriodEnd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
=======
		}
		switch fieldNum {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *QueryMissCounterRequest) Unmarshal(dAtA []byte) error {
=======
func (m *VotePeriod) Unmarshal(dAtA []byte) error {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
<<<<<<< HEAD
			return fmt.Errorf("proto: QueryMissCounterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMissCounterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
=======
			return fmt.Errorf("proto: VotePeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VotePeriod: illegal tag %d (wire type %d)", fieldNum, wire)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHeight", wireType)
			}
			m.CurrentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriodStart", wireType)
			}
			m.VotePeriodStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriodStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriodEnd", wireType)
			}
			m.VotePeriodEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriodEnd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *QueryMissCounterResponse) Unmarshal(dAtA []byte) error {
=======
func (m *QueryMissCounterRequest) Unmarshal(dAtA []byte) error {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
<<<<<<< HEAD
			return fmt.Errorf("proto: QueryMissCounterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMissCounterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissCounter", wireType)
			}
			m.MissCounter = 0
=======
			return fmt.Errorf("proto: QueryMissCounterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMissCounterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
<<<<<<< HEAD
				m.MissCounter |= int64(b&0x7F) << shift
=======
				stringLen |= uint64(b&0x7F) << shift
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
				if b < 0x80 {
					break
				}
			}
<<<<<<< HEAD
=======
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *QueryDelegeateAddressRequest) Unmarshal(dAtA []byte) error {
=======
func (m *QueryMissCounterResponse) Unmarshal(dAtA []byte) error {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
<<<<<<< HEAD
			return fmt.Errorf("proto: QueryDelegeateAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegeateAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
=======
			return fmt.Errorf("proto: QueryMissCounterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMissCounterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissCounter", wireType)
			}
			m.MissCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissCounter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *QueryDelegeateAddressResponse) Unmarshal(dAtA []byte) error {
=======
func (m *QueryDelegeateAddressRequest) Unmarshal(dAtA []byte) error {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
<<<<<<< HEAD
			return fmt.Errorf("proto: QueryDelegeateAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegeateAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
=======
			return fmt.Errorf("proto: QueryDelegeateAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegeateAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
		}
		switch fieldNum {
<<<<<<< HEAD
		case 1:
			if wireType != 2 {
<<<<<<< HEAD
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
=======
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var stringLen uint64
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
<<<<<<< HEAD
<<<<<<< HEAD
				msglen |= int(b&0x7F) << shift
=======
				stringLen |= uint64(b&0x7F) << shift
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
				stringLen |= uint64(b&0x7F) << shift
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
				if b < 0x80 {
					break
				}
			}
<<<<<<< HEAD
<<<<<<< HEAD
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
=======
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
<<<<<<< HEAD
<<<<<<< HEAD
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
=======
			m.Delegate = string(dAtA[iNdEx:postIndex])
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
			m.Validator = string(dAtA[iNdEx:postIndex])
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *QueryOracleDataPrevoteRequest) Unmarshal(dAtA []byte) error {
=======
func (m *QueryDelegeateAddressResponse) Unmarshal(dAtA []byte) error {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
<<<<<<< HEAD
			return fmt.Errorf("proto: QueryOracleDataPrevoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataPrevoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
=======
			return fmt.Errorf("proto: QueryDelegeateAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegeateAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
<<<<<<< HEAD
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
=======
			m.Delegate = string(dAtA[iNdEx:postIndex])
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *QueryOracleDataPrevoteResponse) Unmarshal(dAtA []byte) error {
=======
func (m *QueryOracleDataPrevoteRequest) Unmarshal(dAtA []byte) error {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
<<<<<<< HEAD
			return fmt.Errorf("proto: QueryOracleDataPrevoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataPrevoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
=======
			return fmt.Errorf("proto: QueryOracleDataPrevoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataPrevoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
<<<<<<< HEAD
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
=======
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
<<<<<<< HEAD
			m.Hashes = append(m.Hashes, make([]byte, postIndex-iNdEx))
			copy(m.Hashes[len(m.Hashes)-1], dAtA[iNdEx:postIndex])
=======
			m.Validator = string(dAtA[iNdEx:postIndex])
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *QueryOracleDataVoteRequest) Unmarshal(dAtA []byte) error {
=======
func (m *QueryOracleDataPrevoteResponse) Unmarshal(dAtA []byte) error {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
<<<<<<< HEAD
			return fmt.Errorf("proto: QueryOracleDataVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
=======
			return fmt.Errorf("proto: QueryOracleDataPrevoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataPrevoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
<<<<<<< HEAD
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
=======
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
<<<<<<< HEAD
			m.Validator = string(dAtA[iNdEx:postIndex])
=======
			m.Hashes = append(m.Hashes, make([]byte, postIndex-iNdEx))
			copy(m.Hashes[len(m.Hashes)-1], dAtA[iNdEx:postIndex])
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *QueryOracleDataRequest) Unmarshal(dAtA []byte) error {
=======
func (m *QueryOracleDataVoteRequest) Unmarshal(dAtA []byte) error {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
<<<<<<< HEAD
			return fmt.Errorf("proto: QueryOracleDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
=======
			return fmt.Errorf("proto: QueryOracleDataVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
<<<<<<< HEAD
<<<<<<< HEAD
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
=======
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
=======
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			}
			var stringLen uint64
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
<<<<<<< HEAD
				msglen |= int(b&0x7F) << shift
=======
				stringLen |= uint64(b&0x7F) << shift
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
				if b < 0x80 {
					break
				}
			}
<<<<<<< HEAD
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
=======
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
<<<<<<< HEAD
<<<<<<< HEAD
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
=======
			m.Type = string(dAtA[iNdEx:postIndex])
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
=======
			m.Validator = string(dAtA[iNdEx:postIndex])
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *QueryOracleDataResponse) Unmarshal(dAtA []byte) error {
=======
func (m *QueryOracleDataRequest) Unmarshal(dAtA []byte) error {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
<<<<<<< HEAD
			return fmt.Errorf("proto: QueryOracleDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
=======
			return fmt.Errorf("proto: QueryOracleDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
<<<<<<< HEAD
				return fmt.Errorf("proto: wrong wireType = %d for field OracleData", wireType)
=======
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
<<<<<<< HEAD
			if m.OracleData == nil {
				m.OracleData = &types.Any{}
=======
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			}
			if err := m.OracleData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
<<<<<<< HEAD
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
=======
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleData", wireType)
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
<<<<<<< HEAD
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
=======
			if m.OracleData == nil {
				m.OracleData = &types.Any{}
			}
			if err := m.OracleData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
>>>>>>> 80d76df335316d61841ce9bca513aaf530ec40d3
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
