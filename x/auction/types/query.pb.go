// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auction/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryActiveAuctionRequest struct {
	AuctionId uint32 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
}

func (m *QueryActiveAuctionRequest) Reset()         { *m = QueryActiveAuctionRequest{} }
func (m *QueryActiveAuctionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActiveAuctionRequest) ProtoMessage()    {}
func (*QueryActiveAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{2}
}
func (m *QueryActiveAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveAuctionRequest.Merge(m, src)
}
func (m *QueryActiveAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveAuctionRequest proto.InternalMessageInfo

func (m *QueryActiveAuctionRequest) GetAuctionId() uint32 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

type QueryActiveAuctionResponse struct {
	Auction *Auction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction,omitempty"`
}

func (m *QueryActiveAuctionResponse) Reset()         { *m = QueryActiveAuctionResponse{} }
func (m *QueryActiveAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveAuctionResponse) ProtoMessage()    {}
func (*QueryActiveAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{3}
}
func (m *QueryActiveAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveAuctionResponse.Merge(m, src)
}
func (m *QueryActiveAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveAuctionResponse proto.InternalMessageInfo

func (m *QueryActiveAuctionResponse) GetAuction() *Auction {
	if m != nil {
		return m.Auction
	}
	return nil
}

type QueryEndedAuctionRequest struct {
	AuctionId uint32 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
}

func (m *QueryEndedAuctionRequest) Reset()         { *m = QueryEndedAuctionRequest{} }
func (m *QueryEndedAuctionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEndedAuctionRequest) ProtoMessage()    {}
func (*QueryEndedAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{4}
}
func (m *QueryEndedAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEndedAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEndedAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEndedAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEndedAuctionRequest.Merge(m, src)
}
func (m *QueryEndedAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEndedAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEndedAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEndedAuctionRequest proto.InternalMessageInfo

func (m *QueryEndedAuctionRequest) GetAuctionId() uint32 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

type QueryEndedAuctionResponse struct {
	Auction *Auction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction,omitempty"`
}

func (m *QueryEndedAuctionResponse) Reset()         { *m = QueryEndedAuctionResponse{} }
func (m *QueryEndedAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEndedAuctionResponse) ProtoMessage()    {}
func (*QueryEndedAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{5}
}
func (m *QueryEndedAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEndedAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEndedAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEndedAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEndedAuctionResponse.Merge(m, src)
}
func (m *QueryEndedAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEndedAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEndedAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEndedAuctionResponse proto.InternalMessageInfo

func (m *QueryEndedAuctionResponse) GetAuction() *Auction {
	if m != nil {
		return m.Auction
	}
	return nil
}

type QueryActiveAuctionsRequest struct {
}

func (m *QueryActiveAuctionsRequest) Reset()         { *m = QueryActiveAuctionsRequest{} }
func (m *QueryActiveAuctionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActiveAuctionsRequest) ProtoMessage()    {}
func (*QueryActiveAuctionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{6}
}
func (m *QueryActiveAuctionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveAuctionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveAuctionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveAuctionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveAuctionsRequest.Merge(m, src)
}
func (m *QueryActiveAuctionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveAuctionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveAuctionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveAuctionsRequest proto.InternalMessageInfo

type QueryActiveAuctionsResponse struct {
	Auctions []*Auction `protobuf:"bytes,1,rep,name=auctions,proto3" json:"auctions,omitempty"`
}

func (m *QueryActiveAuctionsResponse) Reset()         { *m = QueryActiveAuctionsResponse{} }
func (m *QueryActiveAuctionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveAuctionsResponse) ProtoMessage()    {}
func (*QueryActiveAuctionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{7}
}
func (m *QueryActiveAuctionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveAuctionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveAuctionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveAuctionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveAuctionsResponse.Merge(m, src)
}
func (m *QueryActiveAuctionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveAuctionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveAuctionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveAuctionsResponse proto.InternalMessageInfo

func (m *QueryActiveAuctionsResponse) GetAuctions() []*Auction {
	if m != nil {
		return m.Auctions
	}
	return nil
}

type QueryEndedAuctionsRequest struct {
	Pagination query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryEndedAuctionsRequest) Reset()         { *m = QueryEndedAuctionsRequest{} }
func (m *QueryEndedAuctionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEndedAuctionsRequest) ProtoMessage()    {}
func (*QueryEndedAuctionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{8}
}
func (m *QueryEndedAuctionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEndedAuctionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEndedAuctionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEndedAuctionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEndedAuctionsRequest.Merge(m, src)
}
func (m *QueryEndedAuctionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEndedAuctionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEndedAuctionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEndedAuctionsRequest proto.InternalMessageInfo

func (m *QueryEndedAuctionsRequest) GetPagination() query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return query.PageRequest{}
}

type QueryEndedAuctionsResponse struct {
	Auctions   []*Auction         `protobuf:"bytes,1,rep,name=auctions,proto3" json:"auctions,omitempty"`
	Pagination query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryEndedAuctionsResponse) Reset()         { *m = QueryEndedAuctionsResponse{} }
func (m *QueryEndedAuctionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEndedAuctionsResponse) ProtoMessage()    {}
func (*QueryEndedAuctionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{9}
}
func (m *QueryEndedAuctionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEndedAuctionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEndedAuctionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEndedAuctionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEndedAuctionsResponse.Merge(m, src)
}
func (m *QueryEndedAuctionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEndedAuctionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEndedAuctionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEndedAuctionsResponse proto.InternalMessageInfo

func (m *QueryEndedAuctionsResponse) GetAuctions() []*Auction {
	if m != nil {
		return m.Auctions
	}
	return nil
}

func (m *QueryEndedAuctionsResponse) GetPagination() query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return query.PageResponse{}
}

type QueryBidRequest struct {
	BidId     uint64 `protobuf:"varint,1,opt,name=bid_id,json=bidId,proto3" json:"bid_id,omitempty"`
	AuctionId uint32 `protobuf:"varint,2,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
}

func (m *QueryBidRequest) Reset()         { *m = QueryBidRequest{} }
func (m *QueryBidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBidRequest) ProtoMessage()    {}
func (*QueryBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{10}
}
func (m *QueryBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidRequest.Merge(m, src)
}
func (m *QueryBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidRequest proto.InternalMessageInfo

func (m *QueryBidRequest) GetBidId() uint64 {
	if m != nil {
		return m.BidId
	}
	return 0
}

func (m *QueryBidRequest) GetAuctionId() uint32 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

type QueryBidResponse struct {
	Bid *Bid `protobuf:"bytes,1,opt,name=bid,proto3" json:"bid,omitempty"`
}

func (m *QueryBidResponse) Reset()         { *m = QueryBidResponse{} }
func (m *QueryBidResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBidResponse) ProtoMessage()    {}
func (*QueryBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{11}
}
func (m *QueryBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidResponse.Merge(m, src)
}
func (m *QueryBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidResponse proto.InternalMessageInfo

func (m *QueryBidResponse) GetBid() *Bid {
	if m != nil {
		return m.Bid
	}
	return nil
}

type QueryBidsByAuctionRequest struct {
	AuctionId  uint32            `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Pagination query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryBidsByAuctionRequest) Reset()         { *m = QueryBidsByAuctionRequest{} }
func (m *QueryBidsByAuctionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBidsByAuctionRequest) ProtoMessage()    {}
func (*QueryBidsByAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{12}
}
func (m *QueryBidsByAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidsByAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidsByAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidsByAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidsByAuctionRequest.Merge(m, src)
}
func (m *QueryBidsByAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidsByAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidsByAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidsByAuctionRequest proto.InternalMessageInfo

func (m *QueryBidsByAuctionRequest) GetAuctionId() uint32 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *QueryBidsByAuctionRequest) GetPagination() query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return query.PageRequest{}
}

type QueryBidsByAuctionResponse struct {
	Bids       []*Bid             `protobuf:"bytes,1,rep,name=bids,proto3" json:"bids,omitempty"`
	Pagination query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryBidsByAuctionResponse) Reset()         { *m = QueryBidsByAuctionResponse{} }
func (m *QueryBidsByAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBidsByAuctionResponse) ProtoMessage()    {}
func (*QueryBidsByAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{13}
}
func (m *QueryBidsByAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidsByAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidsByAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidsByAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidsByAuctionResponse.Merge(m, src)
}
func (m *QueryBidsByAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidsByAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidsByAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidsByAuctionResponse proto.InternalMessageInfo

func (m *QueryBidsByAuctionResponse) GetBids() []*Bid {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *QueryBidsByAuctionResponse) GetPagination() query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return query.PageResponse{}
}

type QueryTokenPriceRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryTokenPriceRequest) Reset()         { *m = QueryTokenPriceRequest{} }
func (m *QueryTokenPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPriceRequest) ProtoMessage()    {}
func (*QueryTokenPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{14}
}
func (m *QueryTokenPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPriceRequest.Merge(m, src)
}
func (m *QueryTokenPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPriceRequest proto.InternalMessageInfo

func (m *QueryTokenPriceRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryTokenPriceResponse struct {
	TokenPrice *TokenPrice `protobuf:"bytes,1,opt,name=token_price,json=tokenPrice,proto3" json:"token_price,omitempty"`
}

func (m *QueryTokenPriceResponse) Reset()         { *m = QueryTokenPriceResponse{} }
func (m *QueryTokenPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPriceResponse) ProtoMessage()    {}
func (*QueryTokenPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{15}
}
func (m *QueryTokenPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPriceResponse.Merge(m, src)
}
func (m *QueryTokenPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPriceResponse proto.InternalMessageInfo

func (m *QueryTokenPriceResponse) GetTokenPrice() *TokenPrice {
	if m != nil {
		return m.TokenPrice
	}
	return nil
}

type QueryTokenPricesRequest struct {
}

func (m *QueryTokenPricesRequest) Reset()         { *m = QueryTokenPricesRequest{} }
func (m *QueryTokenPricesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPricesRequest) ProtoMessage()    {}
func (*QueryTokenPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{16}
}
func (m *QueryTokenPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPricesRequest.Merge(m, src)
}
func (m *QueryTokenPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPricesRequest proto.InternalMessageInfo

type QueryTokenPricesResponse struct {
	TokenPrices []*TokenPrice `protobuf:"bytes,1,rep,name=token_prices,json=tokenPrices,proto3" json:"token_prices,omitempty"`
}

func (m *QueryTokenPricesResponse) Reset()         { *m = QueryTokenPricesResponse{} }
func (m *QueryTokenPricesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPricesResponse) ProtoMessage()    {}
func (*QueryTokenPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{17}
}
func (m *QueryTokenPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPricesResponse.Merge(m, src)
}
func (m *QueryTokenPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPricesResponse proto.InternalMessageInfo

func (m *QueryTokenPricesResponse) GetTokenPrices() []*TokenPrice {
	if m != nil {
		return m.TokenPrices
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "auction.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "auction.v1.QueryParamsResponse")
	proto.RegisterType((*QueryActiveAuctionRequest)(nil), "auction.v1.QueryActiveAuctionRequest")
	proto.RegisterType((*QueryActiveAuctionResponse)(nil), "auction.v1.QueryActiveAuctionResponse")
	proto.RegisterType((*QueryEndedAuctionRequest)(nil), "auction.v1.QueryEndedAuctionRequest")
	proto.RegisterType((*QueryEndedAuctionResponse)(nil), "auction.v1.QueryEndedAuctionResponse")
	proto.RegisterType((*QueryActiveAuctionsRequest)(nil), "auction.v1.QueryActiveAuctionsRequest")
	proto.RegisterType((*QueryActiveAuctionsResponse)(nil), "auction.v1.QueryActiveAuctionsResponse")
	proto.RegisterType((*QueryEndedAuctionsRequest)(nil), "auction.v1.QueryEndedAuctionsRequest")
	proto.RegisterType((*QueryEndedAuctionsResponse)(nil), "auction.v1.QueryEndedAuctionsResponse")
	proto.RegisterType((*QueryBidRequest)(nil), "auction.v1.QueryBidRequest")
	proto.RegisterType((*QueryBidResponse)(nil), "auction.v1.QueryBidResponse")
	proto.RegisterType((*QueryBidsByAuctionRequest)(nil), "auction.v1.QueryBidsByAuctionRequest")
	proto.RegisterType((*QueryBidsByAuctionResponse)(nil), "auction.v1.QueryBidsByAuctionResponse")
	proto.RegisterType((*QueryTokenPriceRequest)(nil), "auction.v1.QueryTokenPriceRequest")
	proto.RegisterType((*QueryTokenPriceResponse)(nil), "auction.v1.QueryTokenPriceResponse")
	proto.RegisterType((*QueryTokenPricesRequest)(nil), "auction.v1.QueryTokenPricesRequest")
	proto.RegisterType((*QueryTokenPricesResponse)(nil), "auction.v1.QueryTokenPricesResponse")
}

func init() { proto.RegisterFile("auction/v1/query.proto", fileDescriptor_73c48d70714d6628) }

var fileDescriptor_73c48d70714d6628 = []byte{
	// 905 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xdf, 0x4f, 0xf3, 0x54,
	0x18, 0xc7, 0xd7, 0xbd, 0x80, 0xef, 0x7b, 0xa6, 0x79, 0xf5, 0x01, 0x11, 0xca, 0x2c, 0x5a, 0x06,
	0x18, 0x02, 0x3d, 0x6c, 0x68, 0x70, 0x78, 0xc5, 0x12, 0x43, 0xf0, 0x57, 0x70, 0xd1, 0x1b, 0x6f,
	0x96, 0x76, 0x3d, 0xa9, 0x55, 0xd6, 0x96, 0xb5, 0x5b, 0x5c, 0x08, 0x37, 0x5e, 0xe1, 0x8d, 0xc1,
	0x18, 0xaf, 0xd4, 0xf8, 0x37, 0xf8, 0x5f, 0x70, 0x49, 0xe2, 0x8d, 0x57, 0xc6, 0x80, 0x7f, 0x88,
	0xe9, 0xe9, 0xd3, 0xb5, 0x5d, 0xcf, 0x36, 0x40, 0xef, 0xd6, 0xf3, 0x3c, 0xe7, 0x79, 0x3e, 0xcf,
	0x8f, 0x7e, 0x3b, 0xb2, 0xa8, 0xf7, 0xda, 0x81, 0xed, 0x3a, 0xb4, 0x5f, 0xa5, 0x67, 0x3d, 0xd6,
	0x1d, 0x68, 0x5e, 0xd7, 0x0d, 0x5c, 0x20, 0x78, 0xae, 0xf5, 0xab, 0xf2, 0x82, 0xe5, 0x5a, 0x2e,
	0x3f, 0xa6, 0xe1, 0xaf, 0xc8, 0x43, 0x2e, 0x5b, 0xae, 0x6b, 0x9d, 0x32, 0xaa, 0x7b, 0x36, 0xd5,
	0x1d, 0xc7, 0x0d, 0xf4, 0xd0, 0xdf, 0x47, 0xeb, 0x52, 0x2a, 0xae, 0xc5, 0x1c, 0xe6, 0xdb, 0x22,
	0x4b, 0x9c, 0x24, 0xb2, 0x2c, 0xb7, 0x5d, 0xbf, 0xe3, 0xfa, 0xad, 0x28, 0x55, 0xf4, 0x80, 0xa6,
	0xad, 0xe8, 0x89, 0x1a, 0xba, 0xcf, 0x22, 0x4e, 0xda, 0xaf, 0x1a, 0x2c, 0xd0, 0xab, 0xd4, 0xd3,
	0x2d, 0xdb, 0xd1, 0x93, 0x30, 0xea, 0x02, 0x81, 0x4f, 0x43, 0x8f, 0x13, 0xbd, 0xab, 0x77, 0xfc,
	0x26, 0x3b, 0xeb, 0x31, 0x3f, 0x50, 0x8f, 0xc8, 0x7c, 0xe6, 0xd4, 0xf7, 0x5c, 0xc7, 0x67, 0xb0,
	0x4b, 0xe6, 0x3c, 0x7e, 0xb2, 0x24, 0xbd, 0x21, 0xbd, 0x55, 0xaa, 0x81, 0x96, 0x14, 0xae, 0x45,
	0xbe, 0x8d, 0x99, 0xeb, 0xbf, 0x56, 0x0b, 0x4d, 0xf4, 0x53, 0x0f, 0xc8, 0x32, 0x0f, 0x74, 0xd8,
	0x0e, 0xec, 0x3e, 0x3b, 0x8c, 0xbc, 0x31, 0x0b, 0xbc, 0x4e, 0xe2, 0xc6, 0xb5, 0x6c, 0x93, 0x87,
	0x7c, 0xa9, 0xf9, 0x0c, 0x4f, 0x8e, 0x4d, 0xf5, 0x43, 0x22, 0x8b, 0xee, 0x22, 0xcb, 0x0e, 0x79,
	0x01, 0x5d, 0x11, 0x66, 0x3e, 0x0d, 0x13, 0x7b, 0xc7, 0x3e, 0x6a, 0x9d, 0x2c, 0xf1, 0x60, 0xef,
	0x3b, 0x26, 0x33, 0x1f, 0xc6, 0xf1, 0x01, 0xd6, 0x90, 0xbd, 0xfa, 0x38, 0x8c, 0xb2, 0xa8, 0xa6,
	0x61, 0xdb, 0x3f, 0x21, 0x2b, 0x42, 0x2b, 0xe6, 0xa2, 0xe4, 0x29, 0xc6, 0x09, 0x07, 0xf0, 0x64,
	0x5c, 0xb2, 0xa1, 0x93, 0x6a, 0x0b, 0xc8, 0xe3, 0x64, 0xf0, 0x11, 0x21, 0xc9, 0x36, 0x20, 0xfc,
	0x86, 0x86, 0x8b, 0x14, 0xae, 0x8e, 0x16, 0xad, 0x38, 0xae, 0x8e, 0x76, 0xa2, 0x5b, 0x0c, 0xef,
	0xe2, 0x90, 0x53, 0xf7, 0xd5, 0x5f, 0x24, 0xac, 0x6c, 0x24, 0xd7, 0x23, 0xd1, 0xe1, 0xe3, 0x0c,
	0x5d, 0x91, 0xd3, 0x6d, 0x4e, 0xa5, 0x8b, 0xb2, 0x09, 0xf0, 0x8e, 0xc8, 0x73, 0x4e, 0xd7, 0xb0,
	0xcd, 0xb8, 0xfe, 0x57, 0xc9, 0x9c, 0x61, 0x9b, 0xf1, 0xc4, 0x67, 0x9a, 0xb3, 0x86, 0x6d, 0x1e,
	0x9b, 0x23, 0xcb, 0x50, 0x1c, 0x5d, 0x86, 0x77, 0xc8, 0xcb, 0x49, 0x20, 0x2c, 0xee, 0x4d, 0xf2,
	0xc4, 0xc0, 0x30, 0xa5, 0xda, 0xf3, 0x74, 0x5d, 0xa1, 0x57, 0x68, 0x53, 0x2f, 0x25, 0x1c, 0x45,
	0xc3, 0x36, 0xfd, 0xc6, 0xe0, 0x41, 0x0b, 0x38, 0x32, 0xa9, 0xe2, 0x7f, 0x9c, 0xd4, 0x55, 0x3c,
	0xa9, 0x11, 0x14, 0x2c, 0x66, 0x8d, 0xcc, 0x18, 0xb6, 0x19, 0x4f, 0x29, 0x57, 0x0d, 0x37, 0xfe,
	0xdf, 0xd3, 0xd1, 0xc8, 0x22, 0x27, 0xfa, 0xcc, 0xfd, 0x9a, 0x39, 0x27, 0x5d, 0xbb, 0x1d, 0xe3,
	0xc3, 0x02, 0x99, 0x35, 0x99, 0xe3, 0x76, 0x78, 0x53, 0x9e, 0x35, 0xa3, 0x07, 0xb5, 0x49, 0x5e,
	0xcb, 0xf9, 0x23, 0xfe, 0x3e, 0x29, 0x05, 0xe1, 0x69, 0xcb, 0x0b, 0x8f, 0x71, 0x26, 0x8b, 0xe9,
	0x2a, 0x52, 0x97, 0x48, 0x30, 0xfc, 0xad, 0x2e, 0xe7, 0x62, 0x0e, 0x5f, 0xcb, 0xcf, 0x51, 0x3b,
	0x32, 0x26, 0xcc, 0x57, 0x27, 0x2f, 0xa6, 0xf2, 0xc5, 0x6d, 0x1b, 0x97, 0xb0, 0x94, 0x24, 0xf4,
	0x6b, 0xbf, 0x13, 0x32, 0xcb, 0xe3, 0x42, 0x40, 0x4a, 0x29, 0xb9, 0x05, 0x25, 0x7d, 0x3b, 0xaf,
	0xce, 0xf2, 0xea, 0x58, 0x7b, 0x04, 0xa5, 0x56, 0xbe, 0xfd, 0xe3, 0x9f, 0x1f, 0x8b, 0x0a, 0x94,
	0xa9, 0xef, 0x76, 0x3a, 0xec, 0xd4, 0x66, 0x5d, 0x9a, 0xfa, 0x90, 0x44, 0xda, 0x0c, 0xbf, 0x49,
	0xa8, 0xfd, 0x19, 0xb9, 0x81, 0xf5, 0x5c, 0x74, 0x91, 0x78, 0xcb, 0x1b, 0xd3, 0xdc, 0x90, 0xe5,
	0x80, 0xb3, 0xbc, 0x0d, 0x35, 0x31, 0x8b, 0xce, 0x2f, 0xb5, 0xe2, 0xf7, 0x9e, 0x9e, 0x27, 0x2f,
	0xc2, 0x05, 0xfc, 0x2c, 0x91, 0x57, 0x72, 0xa2, 0x02, 0x95, 0x5c, 0x66, 0x81, 0xa8, 0xcb, 0xeb,
	0x53, 0xbc, 0x10, 0xaf, 0xce, 0xf1, 0xf6, 0xa0, 0x2a, 0xc6, 0x63, 0xe1, 0x9d, 0x31, 0x74, 0x3f,
	0x49, 0xf8, 0x95, 0xcc, 0xca, 0x35, 0x4c, 0xe9, 0xcc, 0x70, 0x8c, 0x9b, 0x53, 0xfd, 0x90, 0x71,
	0x87, 0x33, 0x6e, 0xc2, 0xfa, 0xbd, 0x5a, 0x08, 0x3f, 0xc4, 0x73, 0xcd, 0x48, 0x31, 0x4c, 0x6e,
	0x88, 0x3f, 0x7e, 0xae, 0x42, 0x45, 0x57, 0xb7, 0x39, 0xd4, 0x06, 0x54, 0xee, 0xd3, 0x38, 0xb8,
	0x94, 0xc8, 0xd3, 0x58, 0x74, 0x60, 0x25, 0x97, 0x22, 0x91, 0x65, 0xb9, 0x2c, 0x36, 0x62, 0xd6,
	0x43, 0x9e, 0xf5, 0x3d, 0xa8, 0x8f, 0x69, 0x85, 0x68, 0x50, 0x34, 0x94, 0x2c, 0x7a, 0x1e, 0x89,
	0xfd, 0x05, 0xfc, 0x1a, 0xb7, 0x27, 0xa3, 0x7f, 0x82, 0xf6, 0x88, 0xa4, 0x5a, 0xd0, 0x1e, 0xa1,
	0x8c, 0xaa, 0xef, 0x72, 0xd0, 0x1a, 0xec, 0x3e, 0x14, 0x14, 0xbe, 0x97, 0xf0, 0x5b, 0x95, 0xe8,
	0x06, 0xa8, 0xb9, 0xac, 0x39, 0xa9, 0x94, 0xd7, 0x26, 0xfa, 0x20, 0x56, 0x8d, 0x63, 0x6d, 0xc3,
	0x96, 0x18, 0x2b, 0x2d, 0x65, 0xf4, 0x9c, 0x8b, 0xed, 0x05, 0x7c, 0x27, 0xe1, 0x37, 0x2f, 0xa5,
	0x7f, 0x30, 0x29, 0xdb, 0x70, 0x97, 0x2a, 0x93, 0x9d, 0x90, 0x69, 0x8b, 0x33, 0x55, 0x40, 0x9d,
	0xce, 0xd4, 0x38, 0xbe, 0xbe, 0x55, 0xa4, 0x9b, 0x5b, 0x45, 0xfa, 0xfb, 0x56, 0x91, 0xae, 0xee,
	0x94, 0xc2, 0xcd, 0x9d, 0x52, 0xf8, 0xf3, 0x4e, 0x29, 0x7c, 0x41, 0x2d, 0x3b, 0xf8, 0xb2, 0x67,
	0x68, 0x6d, 0xb7, 0x43, 0x3d, 0x66, 0x59, 0x83, 0xaf, 0xfa, 0xa9, 0x78, 0xfd, 0x7d, 0xfa, 0xcd,
	0x30, 0x68, 0x30, 0xf0, 0x98, 0x6f, 0xcc, 0xf1, 0x3f, 0xc0, 0x7b, 0xff, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x25, 0x5a, 0xbc, 0x81, 0xd5, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	QueryActiveAuction(ctx context.Context, in *QueryActiveAuctionRequest, opts ...grpc.CallOption) (*QueryActiveAuctionResponse, error)
	QueryEndedAuction(ctx context.Context, in *QueryEndedAuctionRequest, opts ...grpc.CallOption) (*QueryEndedAuctionResponse, error)
	QueryActiveAuctions(ctx context.Context, in *QueryActiveAuctionsRequest, opts ...grpc.CallOption) (*QueryActiveAuctionsResponse, error)
	QueryEndedAuctions(ctx context.Context, in *QueryEndedAuctionsRequest, opts ...grpc.CallOption) (*QueryEndedAuctionsResponse, error)
	QueryBid(ctx context.Context, in *QueryBidRequest, opts ...grpc.CallOption) (*QueryBidResponse, error)
	QueryBidsByAuction(ctx context.Context, in *QueryBidsByAuctionRequest, opts ...grpc.CallOption) (*QueryBidsByAuctionResponse, error)
	QueryTokenPrice(ctx context.Context, in *QueryTokenPriceRequest, opts ...grpc.CallOption) (*QueryTokenPriceResponse, error)
	QueryTokenPrices(ctx context.Context, in *QueryTokenPricesRequest, opts ...grpc.CallOption) (*QueryTokenPricesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryActiveAuction(ctx context.Context, in *QueryActiveAuctionRequest, opts ...grpc.CallOption) (*QueryActiveAuctionResponse, error) {
	out := new(QueryActiveAuctionResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/QueryActiveAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryEndedAuction(ctx context.Context, in *QueryEndedAuctionRequest, opts ...grpc.CallOption) (*QueryEndedAuctionResponse, error) {
	out := new(QueryEndedAuctionResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/QueryEndedAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryActiveAuctions(ctx context.Context, in *QueryActiveAuctionsRequest, opts ...grpc.CallOption) (*QueryActiveAuctionsResponse, error) {
	out := new(QueryActiveAuctionsResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/QueryActiveAuctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryEndedAuctions(ctx context.Context, in *QueryEndedAuctionsRequest, opts ...grpc.CallOption) (*QueryEndedAuctionsResponse, error) {
	out := new(QueryEndedAuctionsResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/QueryEndedAuctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryBid(ctx context.Context, in *QueryBidRequest, opts ...grpc.CallOption) (*QueryBidResponse, error) {
	out := new(QueryBidResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/QueryBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryBidsByAuction(ctx context.Context, in *QueryBidsByAuctionRequest, opts ...grpc.CallOption) (*QueryBidsByAuctionResponse, error) {
	out := new(QueryBidsByAuctionResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/QueryBidsByAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTokenPrice(ctx context.Context, in *QueryTokenPriceRequest, opts ...grpc.CallOption) (*QueryTokenPriceResponse, error) {
	out := new(QueryTokenPriceResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/QueryTokenPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTokenPrices(ctx context.Context, in *QueryTokenPricesRequest, opts ...grpc.CallOption) (*QueryTokenPricesResponse, error) {
	out := new(QueryTokenPricesResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/QueryTokenPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	QueryActiveAuction(context.Context, *QueryActiveAuctionRequest) (*QueryActiveAuctionResponse, error)
	QueryEndedAuction(context.Context, *QueryEndedAuctionRequest) (*QueryEndedAuctionResponse, error)
	QueryActiveAuctions(context.Context, *QueryActiveAuctionsRequest) (*QueryActiveAuctionsResponse, error)
	QueryEndedAuctions(context.Context, *QueryEndedAuctionsRequest) (*QueryEndedAuctionsResponse, error)
	QueryBid(context.Context, *QueryBidRequest) (*QueryBidResponse, error)
	QueryBidsByAuction(context.Context, *QueryBidsByAuctionRequest) (*QueryBidsByAuctionResponse, error)
	QueryTokenPrice(context.Context, *QueryTokenPriceRequest) (*QueryTokenPriceResponse, error)
	QueryTokenPrices(context.Context, *QueryTokenPricesRequest) (*QueryTokenPricesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (*UnimplementedQueryServer) QueryActiveAuction(ctx context.Context, req *QueryActiveAuctionRequest) (*QueryActiveAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryActiveAuction not implemented")
}
func (*UnimplementedQueryServer) QueryEndedAuction(ctx context.Context, req *QueryEndedAuctionRequest) (*QueryEndedAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEndedAuction not implemented")
}
func (*UnimplementedQueryServer) QueryActiveAuctions(ctx context.Context, req *QueryActiveAuctionsRequest) (*QueryActiveAuctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryActiveAuctions not implemented")
}
func (*UnimplementedQueryServer) QueryEndedAuctions(ctx context.Context, req *QueryEndedAuctionsRequest) (*QueryEndedAuctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEndedAuctions not implemented")
}
func (*UnimplementedQueryServer) QueryBid(ctx context.Context, req *QueryBidRequest) (*QueryBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBid not implemented")
}
func (*UnimplementedQueryServer) QueryBidsByAuction(ctx context.Context, req *QueryBidsByAuctionRequest) (*QueryBidsByAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBidsByAuction not implemented")
}
func (*UnimplementedQueryServer) QueryTokenPrice(ctx context.Context, req *QueryTokenPriceRequest) (*QueryTokenPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTokenPrice not implemented")
}
func (*UnimplementedQueryServer) QueryTokenPrices(ctx context.Context, req *QueryTokenPricesRequest) (*QueryTokenPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTokenPrices not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryActiveAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryActiveAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/QueryActiveAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryActiveAuction(ctx, req.(*QueryActiveAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryEndedAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEndedAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryEndedAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/QueryEndedAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryEndedAuction(ctx, req.(*QueryEndedAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryActiveAuctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveAuctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryActiveAuctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/QueryActiveAuctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryActiveAuctions(ctx, req.(*QueryActiveAuctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryEndedAuctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEndedAuctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryEndedAuctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/QueryEndedAuctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryEndedAuctions(ctx, req.(*QueryEndedAuctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/QueryBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryBid(ctx, req.(*QueryBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryBidsByAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBidsByAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryBidsByAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/QueryBidsByAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryBidsByAuction(ctx, req.(*QueryBidsByAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTokenPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTokenPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/QueryTokenPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTokenPrice(ctx, req.(*QueryTokenPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTokenPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTokenPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/QueryTokenPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTokenPrices(ctx, req.(*QueryTokenPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auction.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "QueryActiveAuction",
			Handler:    _Query_QueryActiveAuction_Handler,
		},
		{
			MethodName: "QueryEndedAuction",
			Handler:    _Query_QueryEndedAuction_Handler,
		},
		{
			MethodName: "QueryActiveAuctions",
			Handler:    _Query_QueryActiveAuctions_Handler,
		},
		{
			MethodName: "QueryEndedAuctions",
			Handler:    _Query_QueryEndedAuctions_Handler,
		},
		{
			MethodName: "QueryBid",
			Handler:    _Query_QueryBid_Handler,
		},
		{
			MethodName: "QueryBidsByAuction",
			Handler:    _Query_QueryBidsByAuction_Handler,
		},
		{
			MethodName: "QueryTokenPrice",
			Handler:    _Query_QueryTokenPrice_Handler,
		},
		{
			MethodName: "QueryTokenPrices",
			Handler:    _Query_QueryTokenPrices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auction/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryActiveAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Auction != nil {
		{
			size, err := m.Auction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEndedAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEndedAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEndedAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEndedAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEndedAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEndedAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Auction != nil {
		{
			size, err := m.Auction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveAuctionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveAuctionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveAuctionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryActiveAuctionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveAuctionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveAuctionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for iNdEx := len(m.Auctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEndedAuctionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEndedAuctionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEndedAuctionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEndedAuctionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEndedAuctionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEndedAuctionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Auctions) > 0 {
		for iNdEx := len(m.Auctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x10
	}
	if m.BidId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BidId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bid != nil {
		{
			size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBidsByAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidsByAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidsByAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBidsByAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidsByAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidsByAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenPrice != nil {
		{
			size, err := m.TokenPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTokenPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenPrices) > 0 {
		for iNdEx := len(m.TokenPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryActiveAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	return n
}

func (m *QueryActiveAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auction != nil {
		l = m.Auction.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEndedAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	return n
}

func (m *QueryEndedAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auction != nil {
		l = m.Auction.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveAuctionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryActiveAuctionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for _, e := range m.Auctions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryEndedAuctionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEndedAuctionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for _, e := range m.Auctions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BidId != 0 {
		n += 1 + sovQuery(uint64(m.BidId))
	}
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	return n
}

func (m *QueryBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bid != nil {
		l = m.Bid.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBidsByAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBidsByAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokenPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenPrice != nil {
		l = m.TokenPrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTokenPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenPrices) > 0 {
		for _, e := range m.TokenPrices {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auction == nil {
				m.Auction = &Auction{}
			}
			if err := m.Auction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEndedAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEndedAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEndedAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEndedAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEndedAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEndedAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auction == nil {
				m.Auction = &Auction{}
			}
			if err := m.Auction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveAuctionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveAuctionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveAuctionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveAuctionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveAuctionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveAuctionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctions = append(m.Auctions, &Auction{})
			if err := m.Auctions[len(m.Auctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEndedAuctionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEndedAuctionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEndedAuctionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEndedAuctionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEndedAuctionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEndedAuctionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctions = append(m.Auctions, &Auction{})
			if err := m.Auctions[len(m.Auctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidId", wireType)
			}
			m.BidId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bid == nil {
				m.Bid = &Bid{}
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidsByAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidsByAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidsByAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidsByAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidsByAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidsByAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, &Bid{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenPrice == nil {
				m.TokenPrice = &TokenPrice{}
			}
			if err := m.TokenPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPrices = append(m.TokenPrices, &TokenPrice{})
			if err := m.TokenPrices[len(m.TokenPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
